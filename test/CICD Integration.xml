<?xml version="1.0" encoding="UTF-8"?><unload unload_date="2019-09-05 07:44:54">
<sys_remote_update_set action="INSERT_OR_UPDATE">
<application display_value="Global">global</application>
<application_name>Global</application_name>
<application_scope>global</application_scope>
<application_version/>
<collisions/>
<commit_date/>
<deleted/>
<description> </description>
<inserted/>
<name>CICD Integration - 1.4.1 - ARRRRR</name>
<origin_sys_id/>
<parent display_value=""/>
<release_date/>
<remote_base_update_set display_value=""/>
<remote_parent_id/>
<remote_sys_id>7380e54cdbf77b80ee93b14ffe96193e</remote_sys_id>
<state>loaded</state>
<summary/>
<sys_class_name>sys_remote_update_set</sys_class_name>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>a790214cdbf77b80ee93b14ffe9619e4</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<update_set display_value=""/>
<update_source display_value=""/>
<updated/>
</sys_remote_update_set>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_operation_09d498f9db87af00ee93b14ffe9619f9</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ws_operation"&gt;&lt;sys_ws_operation action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;consumes&gt;application/json,application/xml,text/xml&lt;/consumes&gt;&lt;consumes_customized&gt;false&lt;/consumes_customized&gt;&lt;default_operation_uri&gt;/api/devops/cicd/source/{page}&lt;/default_operation_uri&gt;&lt;enforce_acl&gt;2ae86fe7db6fd300dfa9b94ffe9619bc&lt;/enforce_acl&gt;&lt;http_method&gt;GET&lt;/http_method&gt;&lt;name&gt;CD - Update Set Source [hub.do]&lt;/name&gt;&lt;operation_script&gt;&lt;![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
	
	return new CiCdSource().getHubStatus(request, response);
	
})(request, response);]]&gt;&lt;/operation_script&gt;&lt;operation_uri&gt;/api/devops/v1/cicd/source/{page}&lt;/operation_uri&gt;&lt;produces&gt;application/json,application/xml,text/xml&lt;/produces&gt;&lt;produces_customized&gt;false&lt;/produces_customized&gt;&lt;relative_path&gt;/source/{page}&lt;/relative_path&gt;&lt;request_example/&gt;&lt;requires_acl_authorization&gt;true&lt;/requires_acl_authorization&gt;&lt;requires_authentication&gt;true&lt;/requires_authentication&gt;&lt;requires_snc_internal_role&gt;false&lt;/requires_snc_internal_role&gt;&lt;short_description/&gt;&lt;sys_class_name&gt;sys_ws_operation&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-01-17 09:45:37&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;09d498f9db87af00ee93b14ffe9619f9&lt;/sys_id&gt;&lt;sys_mod_count&gt;24&lt;/sys_mod_count&gt;&lt;sys_name&gt;CD - Update Set Source [hub.do]&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ws_operation_09d498f9db87af00ee93b14ffe9619f9&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-02-28 14:23:16&lt;/sys_updated_on&gt;&lt;web_service_definition display_value="CICD Integration"&gt;81eccb6fdbebd300dfa9b94ffe96190e&lt;/web_service_definition&gt;&lt;web_service_version display_value="v1"&gt;0a3dcb2fdbebd300dfa9b94ffe9619c7&lt;/web_service_version&gt;&lt;/sys_ws_operation&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1371499318</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>2390214cdbf77b80ee93b14ffe9619e6</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061e8d30000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CD - Update Set Source [hub.do]</target_name>
<type>Scripted REST Resource</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_category_m2m_a00acfaadb7be7409775f6700f9619b3</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties_category_m2m"><sys_properties_category_m2m action="INSERT_OR_UPDATE"><category display_value="CICD Integration">8d1de113dbb86380432cfc600f9619f6</category><order>20</order><property display_value="cicd-integration.enabled.on-update-set" name="cicd-integration.enabled.on-update-set">ddf983a6db7be7409775f6700f961912</property><sys_class_name>sys_properties_category_m2m</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2019-02-26 13:39:00</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>a00acfaadb7be7409775f6700f9619b3</sys_id><sys_mod_count>1</sys_mod_count><sys_name>cicd-integration.enabled.on-update-set.CICD Integration</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_category_m2m_a00acfaadb7be7409775f6700f9619b3</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2019-02-26 13:43:26</sys_updated_on></sys_properties_category_m2m></record_update>]]></payload>
<payload_hash>-1707656863</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>2390214cdbf77b80ee93b14ffe9619e9</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ecc70000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.enabled.on-update-set.CICD Integration</target_name>
<type>Category Property</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_2ae86fe7db6fd300dfa9b94ffe9619bc</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl"><sys_security_acl action="INSERT_OR_UPDATE"><active>true</active><admin_overrides>true</admin_overrides><advanced>false</advanced><condition/><description/><name>/api/devops/cicd/cd</name><operation display_value="execute">execute</operation><script/><sys_class_name>sys_security_acl</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-02 12:01:49</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>2ae86fe7db6fd300dfa9b94ffe9619bc</sys_id><sys_mod_count>1</sys_mod_count><sys_name>/api/devops/cicd/cd</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_security_acl_2ae86fe7db6fd300dfa9b94ffe9619bc</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-10 07:15:50</sys_updated_on><type display_value="REST_Endpoint">REST_Endpoint</type></sys_security_acl></record_update>]]></payload>
<payload_hash>-561860192</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>23902d4cdbf77b80ee93b14ffe96194a</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ea0a0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table>/api/devops/cicd/cd</table>
<target_name>/api/devops/cicd/cd</target_name>
<type>Access Control</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_operation_a72a5229dbdbaf40ee93b14ffe9619bf</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ws_operation"&gt;&lt;sys_ws_operation action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;consumes&gt;application/json,application/xml,text/xml&lt;/consumes&gt;&lt;consumes_customized&gt;false&lt;/consumes_customized&gt;&lt;default_operation_uri&gt;/api/devops/cicd/export_application/{appId}&lt;/default_operation_uri&gt;&lt;enforce_acl&gt;1a7833bddbb31f0076d6b94ffe961994&lt;/enforce_acl&gt;&lt;http_method&gt;GET&lt;/http_method&gt;&lt;name&gt;CI - Export Application as UpdateSet XML&lt;/name&gt;&lt;operation_script&gt;&lt;![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
	
	return new CiCdApi(request, response).publishToUpdateSet(request.pathParams.appId);
	
})(request, response);]]&gt;&lt;/operation_script&gt;&lt;operation_uri&gt;/api/devops/v1/cicd/export_application/{appId}&lt;/operation_uri&gt;&lt;produces&gt;application/json,application/xml,text/xml&lt;/produces&gt;&lt;produces_customized&gt;false&lt;/produces_customized&gt;&lt;relative_path&gt;/export_application/{appId}&lt;/relative_path&gt;&lt;request_example/&gt;&lt;requires_acl_authorization&gt;true&lt;/requires_acl_authorization&gt;&lt;requires_authentication&gt;true&lt;/requires_authentication&gt;&lt;requires_snc_internal_role&gt;false&lt;/requires_snc_internal_role&gt;&lt;short_description&gt;Get all XML records of an UpdateSet&lt;/short_description&gt;&lt;sys_class_name&gt;sys_ws_operation&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-01-29 11:04:44&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;a72a5229dbdbaf40ee93b14ffe9619bf&lt;/sys_id&gt;&lt;sys_mod_count&gt;8&lt;/sys_mod_count&gt;&lt;sys_name&gt;CI - Export Application as UpdateSet XML&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ws_operation_a72a5229dbdbaf40ee93b14ffe9619bf&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-01-30 11:57:58&lt;/sys_updated_on&gt;&lt;web_service_definition display_value="CICD Integration"&gt;81eccb6fdbebd300dfa9b94ffe96190e&lt;/web_service_definition&gt;&lt;web_service_version display_value="v1"&gt;0a3dcb2fdbebd300dfa9b94ffe9619c7&lt;/web_service_version&gt;&lt;/sys_ws_operation&gt;&lt;/record_update&gt;</payload>
<payload_hash>1487904707</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>23902d4cdbf77b80ee93b14ffe96194d</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ecea0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CI - Export Application as UpdateSet XML</target_name>
<type>Scripted REST Resource</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_map_956de6f1dbffdb0076d6b94ffe9619db</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter_map"><sys_ws_query_parameter_map action="INSERT_OR_UPDATE"><sys_class_name>sys_ws_query_parameter_map</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-09 07:27:33</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>956de6f1dbffdb0076d6b94ffe9619db</sys_id><sys_mod_count>0</sys_mod_count><sys_name>f4636669dbb3db0076d6b94ffe961901</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_map_956de6f1dbffdb0076d6b94ffe9619db</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-09 07:27:33</sys_updated_on><web_service_operation display_value="CI - Get Files from Table">f3cca2b1dbffdb0076d6b94ffe96191e</web_service_operation><web_service_query_parameter display_value="sysparm_query">f4636669dbb3db0076d6b94ffe961901</web_service_query_parameter></sys_ws_query_parameter_map></record_update>]]></payload>
<payload_hash>863175533</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>23902d4cdbf77b80ee93b14ffe961950</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ec9d0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>f4636669dbb3db0076d6b94ffe961901</target_name>
<type>Scripted REST Query Parameter Associatio</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_ddf983a6db7be7409775f6700f961912</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>&lt;b&gt;Trigger CICD process on update set 'complete'.&lt;/b&gt;</description><ignore_cache>false</ignore_cache><is_private>false</is_private><name>cicd-integration.enabled.on-update-set</name><read_roles/><suffix/><sys_class_name>sys_properties</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2019-02-26 13:38:47</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>ddf983a6db7be7409775f6700f961912</sys_id><sys_mod_count>5</sys_mod_count><sys_name>cicd-integration.enabled.on-update-set</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_ddf983a6db7be7409775f6700f961912</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2019-08-28 10:27:17</sys_updated_on><type>boolean</type><value>false</value><write_roles/></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=ddf983a6db7be7409775f6700f961912"/></record_update>]]></payload>
<payload_hash>-1402456303</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>23902d4cdbf77b80ee93b14ffe961953</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ee6e0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.enabled.on-update-set</target_name>
<type>System Property</type>
<update_domain/>
<update_guid>e8197ca54ae3ff408ae53c2feaeb3608</update_guid>
<update_guid_history>e8197ca54ae3ff408ae53c2feaeb3608:-1402456303,a257b825c5e3ff4026e06fefbe1558ec:-1901766210,6d473ce110e3ff40a0a1e16f0242ae71:-1402456303,3a377ce1a0e3ff40e5bb2ad256910237:-1901766210,f2377ce11be3ff40e66dbbe8e7135c36:-1402456303</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_2d24af09db432f00ee93b14ffe961983</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>&lt;b&gt;CICD CD : User creation switch.&lt;/b&gt;&lt;br&gt;&#13;
&lt;span color="red" style="color: red;"&gt;Enable to let the CICD process automatically create a user called _CICD_DEPLOYMENT_#{40} per source environment to allow to pull changes from it.&lt;/span&gt;&lt;br/&gt;&#13;
This user will have the 'teamdev_user' or 'admin' role and a long random password which is sent in a secure way to the target environment to configure an 'update set source' pointing to this instance.&lt;br/&gt;&#13;
If this is disabled, this instance of ServiceNow must have a CD user configured.</description><ignore_cache>false</ignore_cache><is_private>false</is_private><name>cicd-integration.auto-create-cd-user</name><read_roles/><suffix/><sys_class_name>sys_properties</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2019-01-15 16:55:15</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>2d24af09db432f00ee93b14ffe961983</sys_id><sys_mod_count>14</sys_mod_count><sys_name>cicd-integration.auto-create-cd-user</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_2d24af09db432f00ee93b14ffe961983</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2019-01-31 09:27:26</sys_updated_on><type>boolean</type><value>false</value><write_roles/></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=2d24af09db432f00ee93b14ffe961983"/></record_update>]]></payload>
<payload_hash>269058702</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>23902d4cdbf77b80ee93b14ffe961956</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ea290000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.auto-create-cd-user</target_name>
<type>System Property</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_map_2b1baafddbbfdb0076d6b94ffe9619c9</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter_map"><sys_ws_query_parameter_map action="INSERT_OR_UPDATE"><sys_class_name>sys_ws_query_parameter_map</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-09 07:17:32</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>2b1baafddbbfdb0076d6b94ffe9619c9</sys_id><sys_mod_count>0</sys_mod_count><sys_name>a6294a65db73db0076d6b94ffe961937</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_map_2b1baafddbbfdb0076d6b94ffe9619c9</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-09 07:17:32</sys_updated_on><web_service_operation display_value="CI - Get All Test In Suites">7f82aa29dbb3db0076d6b94ffe9619af</web_service_operation><web_service_query_parameter display_value="sysparm_offset">a6294a65db73db0076d6b94ffe961937</web_service_query_parameter></sys_ws_query_parameter_map></record_update>]]></payload>
<payload_hash>1812257927</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>23902d4cdbf77b80ee93b14ffe961957</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ea120000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>a6294a65db73db0076d6b94ffe961937</target_name>
<type>Scripted REST Query Parameter Associatio</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_category_m2m_c0c71ab6dbdaa7c076d6b94ffe9619e5</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties_category_m2m"><sys_properties_category_m2m action="INSERT_OR_UPDATE"><category display_value="CICD Integration">8d1de113dbb86380432cfc600f9619f6</category><order>500</order><property display_value="cicd-integration.pull-request-proxy.enabled" name="cicd-integration.pull-request-proxy.enabled">6cb7d2f6dbdaa7c076d6b94ffe9619b9</property><sys_class_name>sys_properties_category_m2m</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-12-14 15:03:44</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>c0c71ab6dbdaa7c076d6b94ffe9619e5</sys_id><sys_mod_count>1</sys_mod_count><sys_name>cicd-integration.pull-request-proxy.enabled.CICD Integration</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_category_m2m_c0c71ab6dbdaa7c076d6b94ffe9619e5</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-12-14 15:03:57</sys_updated_on></sys_properties_category_m2m></record_update>]]></payload>
<payload_hash>1943250788</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>23902d4cdbf77b80ee93b14ffe96195a</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ed600000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.pull-request-proxy.enabled.CICD Integration</target_name>
<type>Category Property</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_operation_3ad166b2db1ea7c076d6b94ffe961964</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ws_operation"&gt;&lt;sys_ws_operation action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;consumes&gt;application/json,application/xml,text/xml&lt;/consumes&gt;&lt;consumes_customized&gt;false&lt;/consumes_customized&gt;&lt;default_operation_uri&gt;/api/devops/cicd/pull_request&lt;/default_operation_uri&gt;&lt;enforce_acl&gt;2ae86fe7db6fd300dfa9b94ffe9619bc&lt;/enforce_acl&gt;&lt;http_method&gt;POST&lt;/http_method&gt;&lt;name&gt;CI - Pull Request WebHook Proxy&lt;/name&gt;&lt;operation_script&gt;&lt;![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    return new CiCdWebHook(request, response).proxy();

})(request, response);]]&gt;&lt;/operation_script&gt;&lt;operation_uri&gt;/api/devops/v1/cicd/pull_request&lt;/operation_uri&gt;&lt;produces&gt;application/json,application/xml,text/xml&lt;/produces&gt;&lt;produces_customized&gt;false&lt;/produces_customized&gt;&lt;relative_path&gt;/pull_request&lt;/relative_path&gt;&lt;request_example/&gt;&lt;requires_acl_authorization&gt;true&lt;/requires_acl_authorization&gt;&lt;requires_authentication&gt;false&lt;/requires_authentication&gt;&lt;requires_snc_internal_role&gt;true&lt;/requires_snc_internal_role&gt;&lt;short_description&gt;Request Target to Pull an UpdateSet from Source&lt;/short_description&gt;&lt;sys_class_name&gt;sys_ws_operation&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-12-14 15:47:53&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;3ad166b2db1ea7c076d6b94ffe961964&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_name&gt;CI - Pull Request WebHook Proxy&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ws_operation_3ad166b2db1ea7c076d6b94ffe961964&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-12-14 15:48:09&lt;/sys_updated_on&gt;&lt;web_service_definition display_value="CICD Integration"&gt;81eccb6fdbebd300dfa9b94ffe96190e&lt;/web_service_definition&gt;&lt;web_service_version display_value="v1"&gt;0a3dcb2fdbebd300dfa9b94ffe9619c7&lt;/web_service_version&gt;&lt;/sys_ws_operation&gt;&lt;/record_update&gt;</payload>
<payload_hash>-2131605732</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>2790214cdbf77b80ee93b14ffe9619e5</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ea4a0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CI - Pull Request WebHook Proxy</target_name>
<type>Scripted REST Resource</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_map_79e92a31dbffdb0076d6b94ffe9619ef</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter_map"><sys_ws_query_parameter_map action="INSERT_OR_UPDATE"><sys_class_name>sys_ws_query_parameter_map</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-09 07:12:20</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>79e92a31dbffdb0076d6b94ffe9619ef</sys_id><sys_mod_count>0</sys_mod_count><sys_name>8d336669dbb3db0076d6b94ffe96193e</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_map_79e92a31dbffdb0076d6b94ffe9619ef</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-09 07:12:20</sys_updated_on><web_service_operation display_value="CI - Get UpdateSet Details">dfe5f9e1db33db0076d6b94ffe96198a</web_service_operation><web_service_query_parameter display_value="sysparm_fields">8d336669dbb3db0076d6b94ffe96193e</web_service_query_parameter></sys_ws_query_parameter_map></record_update>]]></payload>
<payload_hash>-999199433</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>2790214cdbf77b80ee93b14ffe9619e8</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ec0f0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>8d336669dbb3db0076d6b94ffe96193e</target_name>
<type>Scripted REST Query Parameter Associatio</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_view_957fbe33dbdf3f408fb6f6700f9619fc</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_action_view"><sys_ui_action_view action="INSERT_OR_UPDATE"><sys_class_name>sys_ui_action_view</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2019-08-23 09:45:05</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>957fbe33dbdf3f408fb6f6700f9619fc</sys_id><sys_mod_count>1</sys_mod_count><sys_name>Commit Update Set.CICD Preview</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_ui_action display_value="Commit Update Set">c38b2cab0a0a0b5000470398d9e60c36</sys_ui_action><sys_ui_view display_value="CICD Preview" name="cicd_preview">cdb37233db9f3f408fb6f6700f96191a</sys_ui_view><sys_update_name>sys_ui_action_view_957fbe33dbdf3f408fb6f6700f9619fc</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2019-08-23 09:45:13</sys_updated_on><visibility>exclude</visibility></sys_ui_action_view></record_update>]]></payload>
<payload_hash>-1280646966</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>27902d4cdbf77b80ee93b14ffe961949</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ecb40000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>exclude</target_name>
<type>UI View Action</type>
<update_domain/>
<update_guid>937ffa33a4df3f40ece2dbdbee953c91</update_guid>
<update_guid_history>937ffa33a4df3f40ece2dbdbee953c91:-1280646966,917fbe335adf3f406c329fb73a19abfe:1037813784</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_script_include_525e2d21db33db0076d6b94ffe9619a6</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;global.CiCdApi&lt;/api_name&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;CiCdApi&lt;/name&gt;&lt;script&gt;&lt;![CDATA[/**
 * Various API to prevent CICD process direct connecting to table API
 * 
 * @class 
 * @author Boris Moers
 * @requires sn_ws_err.module:sys_script_include.BadRequestError
 * @requires global.module:sys_script_include.UpdateSetExport
 * @requires global.module:sys_script_include.TableUtils
 * @requires sn_ws_err.module:sys_script_include.NotFoundError
 * @memberof global.module:sys_script_include
 */
var CiCdApi = Class.create();

CiCdApi.prototype = /** @lends global.module:sys_script_include.CiCdApi.prototype */ {

    CICD_INTEGRATION_APP_ID: '19190fabdbebd300dfa9b94ffe96193e',

    /**
     * Constructor
     * 
     * @param {any} request
     * @param {any} response
     * @returns {undefined}
     */
    initialize: function (request, response) {
        var self = this;

        self.request = request;
        self.response = response;

        self.body = null;
        try {
            // support for POST request
            var requestBody = request.body;
            if (requestBody &amp;&amp; requestBody.hasNext()) {
                var body = requestBody.nextEntry();
                if (body) {
                    self.body = body;
                }
            }
        } catch (ignore) {
            // ignore
        }
    },

    /**
     * Get param from URL path
     * 
     * @param {any} paramName
     * @param {any} defaultValue
     * @returns {ConditionalExpression}
     */
    getPathParam: function (paramName, defaultValue) {
        var self = this;

        return (paramName in self.request.pathParams) ? self.request.pathParams[paramName] : defaultValue;
    },

    /**
     * Get param form URL query argument
     * 
     * @param {any} paramName
     * @param {any} defaultValue
     * @returns {ConditionalExpression}
     */
    getQueryParam: function (paramName, defaultValue) {
        var self = this;

        return (paramName in self.request.queryParams) ? (function () {
            var value = self.request.queryParams[paramName];
            if (Array.isArray(value)) {
                return (value.length === 1) ? value[0] : value;
            } else {
                return value;
            }
        })() : defaultValue;
    },

    /**
     * Get the application version
     * 
     * mapped to GET /api/devops/v1/cicd/version/
     * 
     * @returns {Array} the CICD Integration App Version
     */
    getAppVersion: function () {
        var self = this;
        var gr = new GlideRecord('sys_app');
        if (gr.get(self.CICD_INTEGRATION_APP_ID)) {
            return gr.getValue('version').split('.')
        }
        return [0, 0, 0];
    },

    /**
     * Get User information by userId
     * 
     * mapped to GET /api/devops/v1/cicd/user/{userId}
     * 
     * @param {String} userId value of the user_name field
     * @returns {any} the user details
     */
    getUserById: function (userId) {
        var self = this;

        return self._getGrResultStream('sys_user', null, {
            sysparm_limit: 1,
            sysparm_query: 'user_name=' + userId,
            sysparm_fields: 'sys_id, name, email'
        });

    },

    /**
     * Get the details of an update-set
     * 
     * mapped to GET /api/devops/v1/cicd/updateset/{updateSetSysId}
     * 
     * @param {String} updateSetSysId
     * @returns {any} the update-set details
     */
    getUpdateSetDetails: function (updateSetSysId) {
        var self = this;

        return self._getGrResultStream('sys_update_set', updateSetSysId, {});
    },


    /**
     * Get the details of an Scope / App
     * 
     * mapped to GET /api/devops/v1/cicd/scope/{scopeId}
     * 
     * @param {String} scopeId
     * @returns {any} the update-set details
     */
    getScopeDetails: function (scopeId) {
        var self = this;

        return self._getGrResultStream('sys_scope', scopeId, {});
    },

    /**
     * Get all XMl records of an update-set
     * 
     * mapped to GET /api/devops/v1/cicd/updateset_files/{updateSetSysId}
     * 
     * @param {String} updateSetSysId
     * @returns {any} the update-set XML records
     */
    getUpdateSetFiles: function (updateSetSysId) {
        var self = this;

        return self._getGrResultStream('sys_update_xml', null, {
            sysparm_limit: 50,
            sysparm_query: 'update_set.base_update_set=' + updateSetSysId + '^ORupdate_set=' + updateSetSysId + '^ORDERBYsys_recorded_at'
        });

    },

    /**
     * Export an update-set
     * 
     * mapped to GET /api/devops/v1/cicd/export_updateset/{updateSetSysId}
     * @param {any} updateSetSysId
     * @returns {undefined} all test assigned to a test suite
     */
    exportUpdateSet: function (updateSetSysId) {
        var self = this, sysId;

        if (!updateSetSysId)
            return new sn_ws_err.BadRequestError('Update-Set is mandatory');

        var current = new GlideRecord('sys_update_set');
        /*
        current.addEncodedQuery('state=complete^sys_id='.concat(updateSetSysId));
        current._query();
        if(!current._next())
            return new sn_ws_err.BadRequestError('Update-Set Not found. Is it completed?');
        */
        if (!current.get(updateSetSysId))
            return new sn_ws_err.BadRequestError('Update-Set Not found.');

        var updateSetExport = new UpdateSetExport();
        if (current.base_update_set == current.sys_id) {
            sysId = updateSetExport.exportHierarchy(current);

            response.setStatus(302);
            return response.setLocation([gs.getProperty('glide.servlet.uri'), 'cicd_export_base_update_set.do?sysparm_delete_when_done=true&amp;sysparm_sys_id=', sysId].join(''));

        } else if (current.base_update_set.nil()) {
            sysId = updateSetExport.exportUpdateSet(current);

            response.setStatus(302);
            return response.setLocation([gs.getProperty('glide.servlet.uri'), 'cicd_export_update_set.do?sysparm_delete_when_done=true&amp;sysparm_sys_id=', sysId].join(''));

        } else {
            return new sn_ws_err.BadRequestError('Somethings wrong here... '.concat(current.getEncodedQuery()));
        }

    },

    /**
     * convert a scoped app to update-set
     * used in CiCdRun().sys_appUiAction() and exposed on GET to /api/devops/cicd/export_application/{appId}
     * 
     * @param {*} appId
     * @returns {undefined}
     */
    publishToUpdateSet: function (appId) {
        var self = this;

        if (!gs.getUser().getRoles().contains('admin'))
            throw Error('User must have admin grants.');

        var sc = new GlideRecord('sys_app');
        if (sc.get(appId)) {

            var usm = new GlideUpdateManager2();
            var gus = new GlideUpdateSet();
            var currentUS = gus.get();

            //gs.setCurrentApplicationId(appId);
            var queryStore = {};
            // add scope to update set
            queryStore[sc.getRecordClassName()] = [appId];

            gs.info('[CICD API] create new update set');
            var us = new GlideRecord('sys_update_set');
            us.initialize();
            us.setValue('name', sc.getValue('name').concat(' - ', sc.getValue('version')));
            us.setValue('application', appId);
            us.setValue('state', 'build');
            us.setValue('description', 'Automatically created by CICD Process'.concat(sc.getValue('short_description') ? '\n'.concat(sc.getValue('short_description')) : ''));
            var updateSetSysId = us.insert();

            // make new update-set active
            gus.set(updateSetSysId);

            /*
                as OOB sys_metadata_link records are not exported into an update set, this seems to be even the 
                better way of doing it.
                e.g add a trigger via "add to application" ui action to a scoped app (this will create a sys_metadata_link record), export the app as update set (via ui action)
                and the sys_metadata_link is missing.

                sys_metadata_link flags are:

                'new install &amp; upgrade'    &gt; directory == 'update'
                'new install'              &gt; directory == 'unload'
                'new install &amp; demo data'  &gt; directory == 'unload.demo'

                TODO: switch to exclude demo data
            */
            var meta = new GlideRecord('sys_metadata');
            meta.addQuery('sys_scope', appId);
            meta._query();

            while (meta._next()) {
                var className = meta.getRecordClassName();

                if ('sys_ui_list' == className) {
                    var tmp = new GlideRecord(className);
                    if (tmp.get(meta.getValue('sys_id'))) {
                        var tableName = tmp.getValue('name');
                        if (new TableUtils(tableName).getAbsoluteBase() != 'sys_metadata') // this works like OOB, but is wrong. correct would be: !new TableUtils(tableName).getHierarchy().some(function (name) { return (name == 'sys_metadata')})
                            continue;
                        if (!gs.nil(tmp.sys_user))
                            continue;
                    }
                }

                if (queryStore[className] === undefined)
                    queryStore[className] = [];

                queryStore[className].push(meta.getValue('sys_id'))
            }

            gs.info('[CICD API] add all files to the update set');
            Object.keys(queryStore).forEach(function (tableName) {
                gs.info('[CICD API] add ' + queryStore[tableName].length + ' files from ' + tableName);
                var appFiles = new GlideRecord(tableName);
                appFiles.addQuery('sys_id', 'IN', queryStore[tableName]);
                appFiles._query();
                while (appFiles._next()) {
                    // make new update-set active -- in case multiple jobs run at the same time
                    gus.set(updateSetSysId);
                    // save the record
                    usm.saveRecord(appFiles);
                }
            });

            gus.set(currentUS);

            return {
                updateSetSysId: updateSetSysId
            };
        } else {
            throw "not found";
        }
    },



    /**
     * Get all ATF Test which are assigned to a TestSuite. &lt;br&gt;
     * This is used to exclude the test from the ATF runs to avoid running twice.
     * 
     * mapped to GET /api/devops/v1/cicd/test_in_suites
     * @returns {any} all test assigned to a test suite
     */
    getAllTestInSuites: function () {
        var self = this;
        return self._getGrResultStream('sys_atf_test_suite_test', null, {
            sysparm_query: 'test_suite.active=true^test.active=true',
            sysparm_fields: 'test'
        });
    },

    /**
     * This is a wrapper to give access to any kind of table extending sys_metadata
     * 
     * mapped to GET /api/devops/v1/cicd/file/{tableName}
     * 
     * @param {String} tableName the table to read from
     * @returns {any} the records from the corresponding table
     */
    getFilesFromTable: function (tableName) {
        var self = this;

        if ('sys_metadata' != tableName || 'sys_scope' != tableName) {
            var pass = new TableUtils(tableName).getHierarchy().toArray().some(function (table) {
                return ('sys_metadata' == table || 'sys_scope' == table);
            });
            if (!pass)
                return [];
        }
        return self._getGrResultStream(tableName, null, {});
    },

    /**
     * Change the state of an update-set
     * 
     * mapped to PATCH /api/devops/v1/cicd/updateset_status/{updateSetSysId}
     * 
     * @param {String} updateSetSysId the update-set sys_id
     * @returns {undefined} the update-set
     */
    setUpdateSetStatus: function (updateSetSysId) {
        var self = this;

        var state = (self.body) ? self.body.state : undefined;
        if (state === undefined)
            return new sn_ws_err.BadRequestError('State is mandatory');
        /*
        var stateOpt = {
            'build': {
                label: 'Complete (build)',
                sequence: 0
            },
            'build_in_progress': {
                label: 'Build in progress',
                sequence: 20
            },
            'code_review_pending': {
                label: 'Code review pending',
                sequence: 30
            },
            'code_review_rejected': {
                label: 'Code review rejected',
                sequence: 40
            },
            'deployment_in_progress': {
                label: 'Deployment in progress',
                sequence: 50
            },
            'deployment_manual_interaction': {
                label: 'Deployment needs manual interaction',
                sequence: 60
            },
            'build_failed': {
                label: 'Build failed',
                sequence: 70
            },
            'complete': {
                label: 'Build complete',
                sequence: 80
            }
        };
    
        var stateChoice = stateOpt[state];
        if (stateChoice) {
            var cl = new GlideRecord('sys_choice');
            cl.addEncodedQuery('name=sys_update_set^element=state^value=' + state + '^ sequence=' + stateChoice.sequence);
            cl.setLimit(1);
            cl._query();
            if (!cl._next()) {
                cl.initialize();
                cl.language = 'en';
                cl.inactive = true;
                cl.label = stateChoice.label;
                cl.sequence = stateChoice.sequence;
                cl.insert();
            }
        }
        */
        var gr = new GlideRecord('sys_update_set');
        if (gr.get(updateSetSysId)) {
            gr.setValue('state', state);
            gr.update('CI - State Changed');
            return self._getGrResultStream('sys_update_set', updateSetSysId, {
                sysparm_suppress_pagination_header: 'true'
            });
        } else {
            return new sn_ws_err.NotFoundError('No Record found.');
        }
    },


    /**
     * Description
     * 
     * @param {any} limit
     * @param {any} offset
     * @param {any} rel
     * @returns {any} 
     */
    _createLink: function (limit, offset, rel) {
        var self = this;
        var queryParams = Object.keys(self.request.queryParams).reduce(function (prev, key) {
            if (['sysparm_limit', 'sysparm_offset'].indexOf(key) === -1) {
                return prev.concat([key.concat('=', encodeURIComponent(self.getQueryParam(key)))]);
            }
            return prev;
        }, []);
        return '&lt;'.concat(self.request.url, '?', queryParams.concat(['sysparm_limit=' + limit, 'sysparm_offset=' + offset]).join('&amp;'), ';rel="', rel, '"&gt;');
    },

    /**
     * Description
     * 
     * @param {any} tableName
     * @param {any} sysId
     * @param {any} defaultParams
     * @returns {undefined}
     */
    _getGrResultStream: function (tableName, sysId, defaultParams) {

        var self = this;

        defaultParams = defaultParams || {};
        var singleObject = Boolean(sysId);
        if (singleObject) {
            defaultParams.sysparm_suppress_pagination_header = 'true';
        }

        var query = defaultParams.sysparm_query || self.getQueryParam('sysparm_query');
        var fields = defaultParams.sysparm_fields || self.getQueryParam('sysparm_fields');
        fields = (fields) ? fields.split(',') : [];

        var offset = parseInt(self.getQueryParam('sysparm_offset', 0), 10);
        var limit = parseInt(self.getQueryParam('sysparm_limit', defaultParams.sysparm_limit || 10000), 10);

        var displayValue = self.getQueryParam('sysparm_display_value', 'false');
        var category = self.getQueryParam('sysparm_query_category');

        var suppressPaginationLink = defaultParams.sysparm_suppress_pagination_header || self.getQueryParam('sysparm_suppress_pagination_header', 'false');


        // not implemented....
        var excludeRefLink = self.getQueryParam('sysparm_exclude_reference_link', 'false');
        var view = self.getQueryParam('sysparm_view');


        // query the table
        var gr = new GlideRecord(tableName);

        // init so gr has all fields
        gr.initialize();

        // in case no fields specified, use all (only possible after .next())
        if (fields.length === 0) {
            fields = Object.keys(gr);
        }

        // allow query fields to be in url. e.g. active=true
        Object.keys(self.request.queryParams).forEach(function (key) {
            if (key.indexOf('sysparm_') === 0 || gr[key] === undefined)
                return;
            query = ((query) ? query.concat('^') : '').concat(key, '=', self.getQueryParam(key));
        });

        if (sysId) {
            gr.addQuery('sys_id', sysId);
        } else if (query) {
            gr.addQuery(query);
        }

        if (category)
            gr.setCategory(category);

        var onPage = Math.ceil((offset + 1) / limit),
            thisOffset = offset + limit;

        // set window
        gr.chooseWindow(offset, thisOffset, true);
        //gr.setLimit(nextOffset);
        gr._query();

        var totalRows = gr.getRowCount();

        // send 404 in case no row match
        if (totalRows === 0) {
            return [];//new sn_ws_err.NotFoundError('No Record found. Query: '.concat(query));
        }

        var totalPage = Math.ceil(totalRows / limit),
            prevOffset = offset - limit,
            nextOffset = Math.min(thisOffset, (totalPage - 1) * limit),
            lastOffset = (totalPage - 1) * limit;

        self.response.setContentType('application/json');

        var links = [];
        if ('true' != suppressPaginationLink) {
            links.push(self._createLink(limit, 0, 'first'));
            if (onPage &gt; 1) {
                links.push(self._createLink(limit, prevOffset, 'prev'));
            }
            if (onPage &lt; totalPage) {
                links.push(self._createLink(limit, nextOffset, 'next'));
            }
            links.push(self._createLink(limit, lastOffset, 'last'));
            // append to header
            self.response.setHeader("Link", links.join(','));
        }

        self.response.setStatus(200);

        // get the writer
        var writer = response.getStreamWriter();
        // start the result
        writer.writeString('{"result":');
        if (!singleObject) {
            writer.writeString('[');
        }
        //writer.writeString(JSON.stringify(self.request.queryParams));

        var append = false;
        // stream row by row
        while (gr._next()) {

            if (append) {
                writer.writeString(',');
            } else {
                append = true;
            }

            var out = {};
            fields.forEach(function (fieldName) {
                fieldName = fieldName.trim();

                if (!gr.isValidField(fieldName.split('.')[0]))
                    return;

                var element = gr.getElement(fieldName);
                var ed = element.getED(),
                    value = null;
                /*
                .nil() is also true if a filed has length 0 !!
                if (element.nil()) {
                    value = null;
                } else
                */

                if (ed.isBoolean()) {
                    value = JSUtil.toBoolean(element.toString());
                } else if (ed.isTrulyNumber()) {
                    value = parseInt(element.toString(), 10);
                } else {
                    value = element.toString();
                }

                if ('all' == displayValue.toLowerCase()) {
                    out[fieldName] = {
                        display_value: element.getDisplayValue(),
                        value: value
                    };
                } else if ('true' == displayValue.toLowerCase()) {
                    out[fieldName] = element.getDisplayValue();
                } else {
                    out[fieldName] = value;
                }
            });
            writer.writeString(JSON.stringify(out));

        }
        if (!singleObject) {
            writer.writeString(']');
        }

        if (self.getQueryParam('sysparm_meta', false)) {
            // append meta information
            var meta = {
                query: query,
                queryParams: self.request.queryParams,
                sysId: sysId,
                fields: fields,
                offsetWindowStart: offset,
                offsetWindowEnd: thisOffset,
                limit: limit,
                totalRows: totalRows,
                totalPage: totalPage,
                prevOffset: prevOffset,
                nextOffset: nextOffset,
                lastOffset: lastOffset,
                displayValue: displayValue,
                category: category,
                links: links
            };
            writer.writeString(',"__meta":');
            writer.writeString(JSON.stringify(meta));
        }

        // close the result
        writer.writeString('}');

    },


    type: 'CiCdApi'
};
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-08-08 08:13:43&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;525e2d21db33db0076d6b94ffe9619a6&lt;/sys_id&gt;&lt;sys_mod_count&gt;197&lt;/sys_mod_count&gt;&lt;sys_name&gt;CiCdApi&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_525e2d21db33db0076d6b94ffe9619a6&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-09-05 07:42:31&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>1514670925</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>27902d4cdbf77b80ee93b14ffe96194c</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061eaa50000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CiCdApi</target_name>
<type>Script Include</type>
<update_domain/>
<update_guid>3810214c7ef77b80b09e54bb8ebcd73c</update_guid>
<update_guid_history>3810214c7ef77b80b09e54bb8ebcd73c:1514670925,0f780acf45673780b9a79151152b8137:853702063,78c7420fe66737800946d4e0dbf91fea:1716806600,d1d686cba3673780e8576314ac00adca:-1764945176,d1d686cbd267378085e82b874f3b14c7:-1191190207</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_operation_d6cf0b23db2fd300dfa9b94ffe9619cc</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ws_operation"&gt;&lt;sys_ws_operation action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;consumes&gt;application/json,application/xml,text/xml&lt;/consumes&gt;&lt;consumes_customized&gt;false&lt;/consumes_customized&gt;&lt;default_operation_uri&gt;/api/devops/cicd/atf/track/{executionId}&lt;/default_operation_uri&gt;&lt;enforce_acl&gt;9041d7a3db2fd300dfa9b94ffe961910&lt;/enforce_acl&gt;&lt;http_method&gt;GET&lt;/http_method&gt;&lt;name&gt;ATF - Get Execution Tracker State&lt;/name&gt;&lt;operation_script&gt;&lt;![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    return new CiCdAtf(request, response).getExecutionTrackerState();

})(request, response);]]&gt;&lt;/operation_script&gt;&lt;operation_uri&gt;/api/devops/v1/cicd/atf/track/{executionId}&lt;/operation_uri&gt;&lt;produces&gt;application/json,application/xml,text/xml&lt;/produces&gt;&lt;produces_customized&gt;false&lt;/produces_customized&gt;&lt;relative_path&gt;/atf/track/{executionId}&lt;/relative_path&gt;&lt;request_example/&gt;&lt;requires_acl_authorization&gt;true&lt;/requires_acl_authorization&gt;&lt;requires_authentication&gt;true&lt;/requires_authentication&gt;&lt;requires_snc_internal_role&gt;true&lt;/requires_snc_internal_role&gt;&lt;short_description&gt;Get the status of the test execution&lt;/short_description&gt;&lt;sys_class_name&gt;sys_ws_operation&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-08-02 10:12:12&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;d6cf0b23db2fd300dfa9b94ffe9619cc&lt;/sys_id&gt;&lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;&lt;sys_name&gt;ATF - Get Execution Tracker State&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ws_operation_d6cf0b23db2fd300dfa9b94ffe9619cc&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-08-02 11:07:17&lt;/sys_updated_on&gt;&lt;web_service_definition display_value="CICD Integration"&gt;81eccb6fdbebd300dfa9b94ffe96190e&lt;/web_service_definition&gt;&lt;web_service_version display_value="v1"&gt;0a3dcb2fdbebd300dfa9b94ffe9619c7&lt;/web_service_version&gt;&lt;/sys_ws_operation&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1263394805</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>27902d4cdbf77b80ee93b14ffe96194f</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061edd80000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>ATF - Get Execution Tracker State</target_name>
<type>Scripted REST Resource</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_category_m2m_50083fe7db34e380432cfc600f9619bc</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties_category_m2m"><sys_properties_category_m2m action="INSERT_OR_UPDATE"><category display_value="CICD Integration">8d1de113dbb86380432cfc600f9619f6</category><order>200</order><property display_value="cicd-integration.server.through-mid" name="cicd-integration.server.through-mid">a7df4293db3c6380432cfc600f961974</property><sys_class_name>sys_properties_category_m2m</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-10-03 16:25:32</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>50083fe7db34e380432cfc600f9619bc</sys_id><sys_mod_count>0</sys_mod_count><sys_name>cicd-integration.server.through-mid.CICD Integration</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_category_m2m_50083fe7db34e380432cfc600f9619bc</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-10-03 16:25:32</sys_updated_on></sys_properties_category_m2m></record_update>]]></payload>
<payload_hash>-240839192</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>27902d4cdbf77b80ee93b14ffe961952</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ea920000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.server.through-mid.CICD Integration</target_name>
<type>Category Property</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_f4636669dbb3db0076d6b94ffe961901</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter"><sys_ws_query_parameter action="INSERT_OR_UPDATE"><example_value/><name>sysparm_query</name><required>false</required><short_description>An encoded query string used to filter the results</short_description><sys_class_name>sys_ws_query_parameter</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-08 12:05:12</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>f4636669dbb3db0076d6b94ffe961901</sys_id><sys_mod_count>0</sys_mod_count><sys_name>sysparm_query</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_f4636669dbb3db0076d6b94ffe961901</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-08 12:05:12</sys_updated_on><web_service_definition display_value="CICD Integration">81eccb6fdbebd300dfa9b94ffe96190e</web_service_definition></sys_ws_query_parameter></record_update>]]></payload>
<payload_hash>637193011</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>27902d4cdbf77b80ee93b14ffe961955</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061eead0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>sysparm_query</target_name>
<type>Scripted REST Query Parameter</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_3aacd546dbe74300dfa9b94ffe961943</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>&lt;hr&gt;&lt;b&gt;Show JSDoc button in UI to support developer to comment code correctly.&lt;/b&gt;</description><ignore_cache>false</ignore_cache><is_private>false</is_private><name>cicd-integration.jsdocButton.enabled</name><read_roles/><suffix/><sys_class_name>sys_properties</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-01-10 13:46:58</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>3aacd546dbe74300dfa9b94ffe961943</sys_id><sys_mod_count>12</sys_mod_count><sys_name>cicd-integration.jsdocButton.enabled</sys_name><sys_package display_value="Global" source="global">global</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_3aacd546dbe74300dfa9b94ffe961943</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-12-14 15:20:32</sys_updated_on><type>boolean</type><value>true</value><write_roles/></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=3aacd546dbe74300dfa9b94ffe961943"/></record_update>]]></payload>
<payload_hash>-929369827</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>27902d4cdbf77b80ee93b14ffe961956</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ea420000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.jsdocButton.enabled</target_name>
<type>System Property</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_script_include_79e4545fdbbb134076d6b94ffe9619bf</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;global.CiCdDeploy&lt;/api_name&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;CiCdDeploy&lt;/name&gt;&lt;script&gt;&lt;![CDATA[/* exported CiCdDeploy */

/**
 * CD API to request target instance to pull update set
 * 
 * @class 
 * @author Boris Moers
 * @requires sn_ws.module:sys_script_include.RESTMessageV2
 * @requires sn_ws_err.module:sys_script_include.BadRequestError
 * @requires global.module:sys_script_include.UpdateSetPreviewAjax
 * @requires global.module:sys_script_include.HierarchyUpdateSetPreviewAjax
 * @requires global.module:sys_script_include.UpdateSetCommitAjax
 * @requires global.module:sys_script_include.SNC#HierarchyUpdateSetScriptable
 * @requires sn_ws_err.module:sys_script_include.ServiceError
 * @memberof global.module:sys_script_include
 */
var CiCdDeploy = Class.create();

CiCdDeploy.prototype = /** @lends global.module:sys_script_include.CiCdDeploy.prototype */ {

    REQUIRES_REVIEW: 'conflict_review',//'Do Not Commit',

    /**
     * Polyfills for Object.assign
     * 
     * @param {any} target
     * @returns {any} to
     */
    assign: function (target) {
        if (target === null) { // TypeError if undefined or null
            throw new TypeError('Cannot convert undefined or null to object');
        }
        var to = Object(target);

        for (var index = 1; index &lt; arguments.length; index++) {
            var nextSource = arguments[index];

            if (nextSource !== null) { // Skip over if undefined or null
                for (var nextKey in nextSource) {
                    // Avoid bugs when hasOwnProperty is shadowed
                    if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                        to[nextKey] = nextSource[nextKey];
                    }
                }
            }
        }
        return to;
    },

    /**
     * Constructor
     * 
     * @param {any} request
     * @param {any} response
     * @returns {undefined}
     */
    initialize: function (request, response) {
        var self = this;

        self.request = request;
        self.response = response;

        self.body = null;
        try {
            // support for POST request
            var requestBody = request.body;
            if (requestBody &amp;&amp; requestBody.hasNext()) {
                var body = requestBody.nextEntry();
                if (body) {
                    self.body = body;
                }
            }
        } catch (ignore) {
            // ignore
        }

        self.console = {
            /**
             * Description
             * 
             * @returns {undefined}
             */
            log: function () {
                if (arguments.length) arguments[0] = '[' + self.type + '] ' + arguments[0];
                gs.info.apply(null, arguments);
            },
            /**
             * Description
             * 
             * @returns {undefined}
             */
            warn: function () {
                if (arguments.length) arguments[0] = '[' + self.type + '] ' + arguments[0];
                gs.warn.apply(null, arguments);
            },
            /**
             * Description
             * 
             * @returns {undefined}
             */
            error: function () {
                if (arguments.length) arguments[0] = '[' + self.type + '] ' + arguments[0];
                gs.error.apply(null, arguments);
            },
            /**
             * Description
             * 
             * @returns {undefined}
             */
            debug: function () {
                if (arguments.length) arguments[0] = '[' + self.type + '] ' + arguments[0];
                gs.debug.apply(null, arguments);
            },
        };
    },

    /**
     * Get param from URL path
     * 
     * @param {any} paramName
     * @param {any} defaultValue
     * @returns {ConditionalExpression}
     */
    getPathParam: function (paramName, defaultValue) {
        var self = this;

        return (paramName in self.request.pathParams) ? self.request.pathParams[paramName] : defaultValue;
    },

    /**
     * Get param form URL query argument
     * 
     * @param {any} paramName
     * @param {any} defaultValue
     * @returns {any}
     */
    getQueryParam: function (paramName, defaultValue) {
        var self = this;

        var out = (paramName in self.request.queryParams) ? (function () {
            var value = self.request.queryParams[paramName];
            if (Array.isArray(value)) {
                return (value.length === 1) ? value[0] : value;
            } else {
                return value;
            }
        })() : defaultValue;
        var outL = out.toLowerCase();
        if (out === undefined)
            return out;

        if (!isNaN(out))
            return parseInt(out, 10);
        if ('null' == outL)
            return null;
        if ('true' == outL)
            return true;
        if ('false' == outL)
            return false;

        return out;
    },

    /**
     * Get base uri from current request uri
     * 
     * @returns {ConditionalExpression}
     */
    getBaseURI: function () {
        var self = this;
        // get base uri out of '/api/devops/v101/cicd/pull' or '/api/devops/cicd/pull'
        var tmp = self.request.uri.replace(/(\/+)/g, "/").split('/');
        tmp = tmp.slice(0, ((/^v\d+$/m).test(tmp[3]) ? 5 : 4)).join('/');
        return tmp.startsWith('/') ? tmp : '/'.concat(tmp);
    },

    
    /**
     * Source API. &lt;br&gt;This is the entry point to trigger a deployment on a target env.
     * takes updateSetSysId and targetEnvironment from payload body. &lt;p&gt;
     * It:
     * &lt;ul&gt;
     * &lt;li&gt;can create a local admin user with a random password&lt;/li&gt;
     * &lt;li&gt;sends a pull request for the update-set to the target containing
     * &lt;ul&gt;&lt;li&gt;User Credentials (encrypted)&lt;/li&gt;&lt;li&gt;Update Set ID&lt;/li&gt;&lt;li&gt;Source environment&lt;/li&gt;
     * &lt;/li&gt;
     * &lt;li&gt;waits for the target instance to pull and check the update-set&lt;/li&gt;
     * &lt;li&gt;returns the update-set status on the target env&lt;/li&gt;
     * &lt;/ul&gt;
     * &lt;/p&gt;
     * 
     * This is mapped to POST: /api/devops/v1/cicd/deploy
     * 
     * @returns {undefined}
     */
    deployUpdateSet: function () {
        var self = this;
        var userSysId,
            roleSysId, updateSetSysId, commitId, sourceEnvironment, targetEnvironment, limitSet = [],
            sourceUserName, sourcePassword,
            targetUserName, targetPassword,
            autoCreateCdUser,
            gitDeployment, sourceUrl;

        /*
            {
                "updateSetSysId": "xxxxxxxxxxxxxxxxxxxxxxxx",
                "commitId": "xxxxxxxxxxxxxxxxxxxxxxx",
                "deploy" : true/false
                "collisionDetect" : true/false
                "targetEnvironment": {
                    "host": "https://targethost.service-now.com",
                    "username": "",
                    "password": ""
                },
                "sourceEnvironment": {
                    "username": "",
                    "password": ""
                },
                "conflicts": {
                    "resolutions": {},
                    "defaults" : {}
                }
            }
        */

        try {

            if (GlidePluginManager.isUpgradeSystemBusy()) {
                self.console.error('[pullUpdateSet] Environment is upgrading');
                throw Error('pullUpdateSet: Environment is upgrading');
            }

            if (!self.body) {
                self.console.error('no request payload found');
                throw Error('deployUpdateSet: no request payload found');
            }
            if (gs.nil(self.body.commitId || self.body.updateSetSysId) || gs.nil(self.body.targetEnvironment) || gs.nil(self.body.targetEnvironment.host)) {
                throw Error('updateSetSysId/commitId and targetEnvironment are mandatory');
            }

            commitId = self.body.commitId;
            updateSetSysId = self.body.updateSetSysId; // request.updateSetId
            sourceEnvironment = gs.getProperty('glide.servlet.uri').toLowerCase().replace(/\/$/, ""); // the current instance
            gitDeployment = !gs.nil(self.body.commitId);

            sourceUrl = gitDeployment ? sourceEnvironment.concat(self.getBaseURI(), '/source/') : sourceEnvironment;

            targetEnvironment = self.body.targetEnvironment.host.toLowerCase().replace(/\/$/, "");
            targetUserName = self.body.targetEnvironment.username;
            targetPassword = self.body.targetEnvironment.password;

            if (self.body.sourceEnvironment) {
                sourceUserName = self.body.sourceEnvironment.username;
                sourcePassword = self.body.sourceEnvironment.password;
            }

            autoCreateCdUser = ('true' == gs.getProperty('cicd-integration.auto-create-cd-user', 'false'));

            var targetMatch = targetEnvironment.match(/(?:http[s]?:\/\/)([^\.]*)([^:\/]*)/i);
            if (!targetMatch || targetMatch[2] !== '.service-now.com') // protect from sending credentials with high privileges to a non service-now.com host
                throw Error('invalid host');

            var sourceMatch = sourceEnvironment.match(/(?:http[s]?:\/\/)([^\.]*)([^:\/]*)/i);
            if (!sourceMatch || !targetMatch[1])
                throw Error('invalid host');

            if (sourceMatch[1] == targetMatch[1])
                throw Error('source and target can not be same');


            if (gitDeployment) { // git 2 snow deployment
                updateSetSysId = commitId.substr(0, 32); // make the commit ID as long as a sys_id
                limitSet.push(updateSetSysId);

            } else { // for snow 2 snow deployment, check us state etc
                var us = new GlideRecord('sys_update_set');
                if (!us.get(updateSetSysId))
                    throw Error('UpdateSet not found');

                if (us.getValue('state') != 'complete') {
                    throw Error('UpdateSet is not in complete state');
                }

                if (us.base_update_set.nil()) {
                    limitSet.push(updateSetSysId);
                } else {
                    var baseSysId = us.getValue('base_update_set');
                    if (updateSetSysId != baseSysId)
                        throw Error('This update-set is member of a batch. Parent must be deployed: ' + baseSysId);

                    var bus = new GlideRecord('sys_update_set');
                    bus.addQuery('base_update_set', updateSetSysId);
                    bus._query();
                    while (bus._next()) {
                        limitSet.push(bus.getValue('sys_id'));
                    }
                }
            }

            // in GIT deployment mode, the user does not require to have the 'admin' role
            var requiredUserRoles = (gitDeployment) ? ['soap_query', 'soap_script'] : ['admin'];
            // get the sys_ids of the required roles
            var adminRole = '';
            var role = new GlideRecord('sys_user_role');
            if (role.get('name', 'admin')) {
                adminRole = role.getValue('sys_id');
            }

            var adminRoles = [];
            var roles = new GlideRecord('sys_user_role');
            roles.addQuery('name', 'IN', requiredUserRoles);
            roles._query();
            while (roles._next()) {
                adminRoles.push(roles.getValue('sys_id'));
            }

            var user;

            if (!autoCreateCdUser) {

                if (!sourceUserName || !sourcePassword)
                    throw Error('source credentials not specified');

                user = new GlideRecord('sys_user');
                if (!user.get('user_name', sourceUserName))
                    throw Error('source user not specified'); // same error as above to not expose user existence

                userSysId = user.getValue('sys_id');

                // check if use has right roles
                var roleAssignment = new GlideRecord('sys_user_has_role');
                roleAssignment.addQuery('user', userSysId);
                roleAssignment.addQuery('role', 'IN', adminRoles).addOrCondition('role', adminRole);
                roleAssignment.addQuery('state', 'active');
                roleAssignment._query();
                if (!roleAssignment._next())
                    throw Error('source user has not the appropriate role');

            } else {

                // create user on source instance
                var userUniqueId = sourceUrl.concat(' to ', targetEnvironment);
                user = new GlideRecord('sys_user');
                sourceUserName = '_CICD_DEPLOYMENT_'.concat(new GlideChecksum(userUniqueId).getMD5()).substr(0, 40);
                var firstName = 'CD-User for '.concat((gitDeployment) ? 'GIT' : 'source', ' based deployments')
                sourcePassword = null;

                if (user.get('user_name', sourceUserName)) {
                    userSysId = user.getValue('sys_id');
                    if (user.getValue('last_name') !== userUniqueId) {
                        user.setValue('first_name', firstName);
                        user.setValue('last_name', userUniqueId);
                        user.update();
                    }
                } else {
                    // create a random password
                    sourcePassword = GlideSecureRandomUtil.getSecureRandomString(100);

                    user.initialize();
                    user.setValue('user_name', sourceUserName);
                    user.setDisplayValue('user_password', sourcePassword);
                    user.setValue('first_name', firstName);
                    user.setValue('last_name', userUniqueId);
                    userSysId = user.insert();
                    if (!userSysId)
                        throw Error('CICdDeploy: User not created. sys_update_set_source on \'' + targetEnvironment + '\' for host \'' + sourceEnvironment + '\' needs to be created manually');

                }

                if (adminRoles.length == 0)
                    throw Error('CICdDeploy: admin role not found. ' + sourceUserName + ' will not have the correct grants to have this working');

                // assign or update the correct role to the _CICD_DEPLOYMENT_ user
                adminRoles.forEach(function (roleSysId) {
                    // check if use has right roles
                    var roleAssignment = new GlideRecord('sys_user_has_role');
                    roleAssignment.addQuery('user', userSysId);
                    roleAssignment.addQuery('role', roleSysId);
                    roleAssignment.addQuery('state', 'active');
                    roleAssignment._query();
                    if (!roleAssignment._next()) {
                        roleAssignment.initialize();
                        roleAssignment.setValue('user', userSysId);
                        roleAssignment.setValue('role', roleSysId);
                        roleAssignment.setValue('state', 'active');
                        roleAssignment.insert();
                    }
                });
            }

            // call target instance to load the update set
            var endpoint = targetEnvironment.concat(self.getBaseURI(), '/pull'), // pullUpdateSet()
                requestBody = {
                    sourceEnvironment: sourceEnvironment,
                    sourceUrl: sourceUrl,
                    gitDeployment: gitDeployment,
                    credentials: {
                        user: sourceUserName,
                        password: (sourcePassword) ? new GlideEncrypter().encrypt(sourcePassword) : null
                    }
                };

            var request = new sn_ws.RESTMessageV2();
            request.setEndpoint(endpoint);

            if (targetUserName &amp;&amp; targetPassword) {
                request.setBasicAuth(targetUserName, targetPassword);
            } else {
                throw Error('No credentials specified for ' + endpoint);
            }

            request.setRequestHeader("Accept", "application/json");
            request.setRequestHeader("Content-Type", "application/json");
            request.setHttpMethod('POST');

            request.setRequestBody(JSON.stringify(requestBody));

            //gs.info("POST body: {0}", requestBody);

            var response = request.execute();
            if (!response.haveError()) {
                /* redirect to the target environment to execute 
                    - loadUpdateSet
                    - previewUpdateSet
                    - commitUpdateSet
                    - deploymentComplete
                */
                var responseBody = JSON.parse(response.getBody()).result;
                var payload = {
                    version: self.getAppVersion(),
                    sourceSysId: responseBody.sourceSysId,
                    targetEnvironment: responseBody.targetEnvironment,

                    updateSetSysId: updateSetSysId,
                    limitSet: limitSet.join(','), // &lt;-- these are actually the US to be deployed

                    sourceEnvironment: sourceEnvironment,
                    deploy: Boolean(self.body.deploy),
                    collisionDetect: Boolean(self.body.collisionDetect),
                    conflicts: self.body.conflicts,
                    step: 'loadUpdateSet'

                };
                return self._sendLocation(303, payload, targetEnvironment); // see other
            } else {
                var statusCode = response.getStatusCode();
                if (statusCode == 666) {
                    /* Something went wrong with the creation of 'sys_update_set_source', remove user from source.*/
                    self.teardownSource(roleSysId, userSysId);
                }
                throw Error(endpoint.concat(' Request ended in error. Code: ', statusCode, ', Message: ', response.getErrorMessage(), response.getBody()));
            }


        } catch (e) {
            self.console.error(e.message);
            return new sn_ws_err.BadRequestError(e.message);

        }

    },


    /**
     * Remove Update Set Source on target
     * 
     * @param {any} sourceSysId
     * @returns {undefined}
     */
    teardownTarget: function (sourceSysId) {
        var source = new GlideRecord('sys_update_set_source');
        if (!gs.nil(sourceSysId) &amp;&amp; source.get(sourceSysId)) {
            source.deleteRecord();
        }
    },





    /**
     * This is mapped to POST: /api/devops/v1/cicd/deploy_step
     * 
     * @returns {undefined}
     */
    processUpdateSetDeploySteps: function () {
        var self = this;

        try {

            if (GlidePluginManager.isUpgradeSystemBusy()) {
                self.console.error('[pullUpdateSet] Environment is upgrading');
                throw Error('pullUpdateSet: Environment is upgrading');
            }

            var payload = self.body;
            if (!Object.keys(payload))
                throw Error('processUpdateSetDeploySteps: no request payload found');

            var progressId = payload.progressId;

            if (payload.targetEnvironment == gs.getProperty('glide.servlet.uri').toLowerCase()) {

                if (!gs.nil(progressId)) {
                    var pgr = new GlideRecord('sys_execution_tracker');
                    if (!pgr.get(progressId)) {
                        throw Error('no tracker found with that ID: '.concat(progressId));
                    } else {
                        var state = parseInt(pgr.getValue('state'), 10);
                        if (state == 4) // Cancelled
                            throw Error('Execution Tracker cancelled: '.concat(pgr.getLink()));

                        if (parseInt(pgr.getValue('percent_complete'), 10) != 100) {
                            /*
                            job still in progress, return not modified 304 and url to this resource.
                            */
                            return self._sendLocation(304, payload);
                        }
                    }
                }

                // here 'percent_complete' must be 100 (%) or no tracker in place
                switch (payload.step) {
                    case 'loadUpdateSet':
                        return self._targetLoadUpdateSet(payload);

                    case 'previewUpdateSet':
                        return self._targetPreviewUpdateSet(payload);

                    case 'commitUpdateSet':
                        return self._targetCommitUpdateSet(payload);

                    case 'deploymentComplete':
                        return self._targetDeploymentComplete(payload);

                    default:
                        throw Error('Unknown Step: '.concat(payload.step));

                }

            } else {
                throw Error('TargetEnvironment not correct');
            }

        } catch (e) {
            gs.error(e.message);
            return new sn_ws_err.BadRequestError(e.message);
        }
    },


    /**
     * Load update set to target environment
     * 
     * @param {any} payload
     * @returns {any}
     */
    _targetLoadUpdateSet: function (payload) {
        var self = this;

        var sourceSysId = payload.sourceSysId,
            limitSet = (payload.limitSet || '').split(',');

        /*
            if this update set was already loaded, delete it.
        */
        limitSet.forEach(function (limitSetSysId) {
            var lusSysId;
            var rus = new GlideRecord('sys_remote_update_set');
            rus.addQuery('remote_sys_id', 'STARTSWITH', limitSetSysId);
            rus._query();
            if (rus._next()) {
                lusSysId = rus.getValue('update_set');
            }

            var lus = new GlideRecord('sys_update_set');
            if (lusSysId) {
                lus.addQuery('sys_id', lusSysId).addOrCondition('origin_sys_id', 'STARTSWITH', limitSetSysId);
            } else {
                lus.addQuery('origin_sys_id', 'STARTSWITH', limitSetSysId);
            }

            /*
                only delete if it was not changed (opened) on the target system since last deployment
            */
            lus.addQuery('sys_mod_count', '&lt;=', 2);
            lus.addQuery('state', 'complete');
            lus._query();
            if (lus._next()) {
                gs.info("[CICD] : deleting local update-set '{0}'", lus.getValue('sys_id'));
                lus.deleteRecord();
            } else if (lusSysId) {
                gs.info("[CICD] : local update-set '{0}' was modified since deployment and will not be deleted.", lusSysId);
            }

            gs.info("[CICD] : deleting already loaded 'sys_remote_update_set' '{0}'", limitSetSysId);
            // delete the remote update set
            rus.deleteRecord();
        });

        gs.info("[CICD] : source {0}", sourceSysId);
        gs.info("[CICD] : load update set {0}", limitSet);
        /*
            run worker to load the update set from remote
        */
        var worker = new GlideUpdateSetWorker();
        worker.setUpdateSourceSysId(sourceSysId); // the sys_update_set_source sys_id
        worker.setLimitSet(limitSet); // the update-set sys_id's
        worker.setBackground(true);
        worker.start();
        var progressId = worker.getProgressID();

        gs.info("[CICD] : GlideUpdateSetWorker progress_id: '{0}'", String(progressId));

        self.assign(payload, {
            progressId: progressId,
            step: 'previewUpdateSet'
        });

        // job create, return 'accepted'
        return self._sendLocation(202, payload);
    },


    /**
     * Preview update set on target environment
     * 
     * @param {any} payload
     * @returns {undefined}
     */
    _targetPreviewUpdateSet: function (payload) {
        var self = this;

        var updateSetSysId = payload.updateSetSysId;

        /*
            in case the sys property 'glide.update_set.auto_preview' is not enabled, 
            manually run the preview.
        */
        var rus = new GlideRecord('sys_remote_update_set');
        rus.addQuery('remote_sys_id', 'STARTSWITH', updateSetSysId);
        //rus.addQuery('state', '!=', 'previewed');
        rus._query();
        if (rus._next()) {
            var remoteUpdateSetSysId = rus.getValue('sys_id');

            if ('previewed' == rus.getValue('state')) {

                self.assign(payload, {
                    progressId: null,
                    state: rus.getValue('state'),
                    remoteUpdateSetSysId: remoteUpdateSetSysId,
                    step: 'commitUpdateSet'
                });

                // redirect to next step
                return self._sendLocation(303, payload); // see other
            }

            /*
                run the preview 
                code from /sys_script_include.do?sys_id=02ba7cd747103200a03a19fbac9a71bc
            */
            var progressId = (function () {
                if (rus.remote_base_update_set.nil()) {
                    gs.info("Starting update set preview for: " + rus.name);
                    return new UpdateSetPreviewAjax().previewRemoteUpdateSetAgain(rus);
                } else {

                    //This is part of a batch, and it should run the batch previewer
                    var updateSet = new GlideRecord("sys_remote_update_set");
                    updateSet.get(rus.remote_base_update_set);
                    if (!updateSet.isValidRecord())
                        throw Error('Base UpdateSet not found for '.concat(rus.getLink(true)));

                    //Cancel any running trackers on the batch
                    var tracker = new GlideRecord('sys_execution_tracker');
                    tracker.addQuery("source", updateSet.sys_id);
                    tracker.addQuery("source_table", "sys_remote_update_set");
                    tracker.addQuery("state", "IN", "pending,running");
                    tracker.orderByDesc("sys_created_on");
                    tracker.query();
                    while (tracker.next()) {
                        gs.info("Tracker found and cancelling: " + updateSet.sys_id);
                        var previewer = new UpdateSetPreviewAjax();
                        previewer.sendCancelSignal(tracker.sys_id);
                    }
                    // END Cancel any running trackers on the batch

                    gs.info("Starting update set batch preview for: " + updateSet.name);

                    return new HierarchyUpdateSetPreviewAjax().previewRemoteHierarchyUpdateSetAgain(updateSet);
                }
            })();

            gs.info("UpdateSetPreviewer completed progress_id: {0}", progressId);

            self.assign(payload, {
                state: "previewing",
                progressId: progressId,
                remoteUpdateSetSysId: remoteUpdateSetSysId,
                step: 'commitUpdateSet'
            });

            // job create, return 'accepted'
            return self._sendLocation(202, payload);
        }

        throw Error('Remote update-set not found with "remote_sys_id" ' + updateSetSysId);
    },


    /**
     * Commit update set on target environment
     * 
     * @param {any} payload
     * @returns {undefined}
     */
    _targetCommitUpdateSet: function (payload) {
        var self = this;
        try {

            // check for conflicts and always resolve some
            if (GlidePreviewProblemHandler.hasUnresolvedProblems(payload.remoteUpdateSetSysId) &amp;&amp; payload.conflicts &amp;&amp; payload.conflicts.defaults) {

                var skip = (payload.conflicts.defaults.skip || '').split(',').map(function (m) { return m.trim(); }).filter(function (f) { return (f.length) });
                var ignore = (payload.conflicts.defaults.ignore || '').split(',').map(function (m) { return m.trim(); }).filter(function (f) { return (f.length) });

                if (skip.length) {
                    var skipProb = new GlideRecord('sys_update_preview_problem');
                    skipProb.addQuery('remote_update_set', payload.remoteUpdateSetSysId);
                    var lenQuery;
                    skip.forEach(function (updateName, index) {
                        if (index == 0) {
                            lenQuery = skipProb.addQuery('remote_update.name', 'STARTSWITH', updateName);
                        } else {
                            lenQuery.addOrCondition('remote_update.name', 'STARTSWITH', updateName);
                        }
                    });
                    self.console.log('[Conflict Default Resolution Skip] auto SKIP all problems matching this query: "{0}"', skipProb.getEncodedQuery());
                    skipProb.query();
                    while (skipProb._next()) {
                        skipProb.setValue('status', 'skipped');
                        skipProb.setValue('description', '[CICD] - This issue was automatically SKIPPED by the CICD process (CICD_CD_DEPLOY_ALWAYS_SKIP_CONFLICTS)\n'.concat(skipProb.getValue('description')));
                        skipProb.update();
                    }
                }

                if (ignore.length) {
                    var ignProb = new GlideRecord('sys_update_preview_problem');
                    ignProb.addQuery('remote_update_set', payload.remoteUpdateSetSysId);
                    var ignQuery;
                    ignore.forEach(function (updateName, index) {
                        if (index == 0) {
                            ignQuery = ignProb.addQuery('remote_update.name', 'STARTSWITH', updateName);
                        } else {
                            ignQuery.addOrCondition('remote_update.name', 'STARTSWITH', updateName);
                        }
                    });
                    self.console.log('[Conflict Default Resolution Ignore] auto IGNORE all problems matching this query: "{0}"', ignProb.getEncodedQuery());
                    ignProb.query();
                    while (ignProb._next()) {
                        ignProb.setValue('status', 'ignored');
                        ignProb.setValue('description', '[CICD] - This issue was automatically IGNORED by the CICD process (CICD_CD_DEPLOY_ALWAYS_IGNORE_CONFLICTS)\n'.concat(ignProb.getValue('description')));
                        ignProb.update();
                    }
                }
            }

            // check again for conflicts and auto resolve conflicts
            if (!payload.collisionDetect &amp;&amp; GlidePreviewProblemHandler.hasUnresolvedProblems(payload.remoteUpdateSetSysId) &amp;&amp; payload.conflicts &amp;&amp; payload.conflicts.resolutions) {
                // only resolve the problems with the provided resolutions if NOT in collisionDetect mode

                var resolutions = payload.conflicts.resolutions;
                Object.keys(resolutions).forEach(function (updateName) {
                    /*
                    conflicts: {
                        resolutions: {
                            'sys_script_include_1b9ed113dbf32300fcf41780399619fc': {
                                status: 'skipped',
                                sysId: '1b9ed113dbf32300fcf41780399619fc',
                                className: 'sys_script_include',
                                updatedOn: 1567150552000
                            },
                        }
                        default: {
                            skip: 'sys_properties,sys_data_source,ldap_server_config,sys_rest_message_fn,sys_soap_message_function',
                            ignore: 'sys_bla'
                        }

                    }
                    */
                    var resolution = resolutions[updateName];
                    var status = resolution.status;
                    var sysId = resolution.sysId;
                    var updatedOn = resolution.updatedOn;


                    var problem = new GlideRecord('sys_update_preview_problem');
                    problem.addQuery('remote_update_set', payload.remoteUpdateSetSysId);
                    problem.addQuery('remote_update.name', updateName);
                    problem.addQuery('status', '');
                    problem.setLimit(1);
                    problem.query();
                    if (problem._next()) {

                        if (status == 'skipped') {// skipped = 'Skip remote update'
                            // this change can be ignored
                            self.console.log('[Auto Conflict resolution] set this record to "SKIPPED" : {0}', gs.getProperty('glide.servlet.uri').concat(problem.getLink(true)));
                            problem.setValue('status', status);
                            problem.setValue('description', '[CICD] - This issue was automatically SKIPPED by the CICD process (based on preview conflict resolution)\n'.concat(problem.getValue('description')));
                            problem.update();
                        } else if (status == 'ignored') { // ignored = 'Accept remote update'
                            // check if the local record is by any chance newer than the one we should accept
                            // this can be the case if there was another deployment to target from another dev environment
                            var newerLocalFile = (function () {
                                if (sysId &amp;&amp; updatedOn) {
                                    var file = new GlideRecord("sys_metadata");
                                    if (file.get(sysId)) {
                                        var localUpdatedOn = new GlideDateTime(file.getValue('sys_updated_on')).getNumericValue();
                                        if (localUpdatedOn &gt; updatedOn) {
                                            self.console.error("[Conflict Resolution - Accept incoming change] the local record {0} is newer than an incoming one {1}", gs.getProperty('glide.servlet.uri').concat(file.getLink(true)), gs.getProperty('glide.servlet.uri').concat(problem.getLink(true)));
                                            return true;
                                        }
                                    }
                                }
                                return false;
                            })();

                            if (!newerLocalFile) {
                                // this change can be accepted
                                self.console.log('[Auto Conflict resolution] set this record to "IGNORED" : {0}', gs.getProperty('glide.servlet.uri').concat(problem.getLink(true)));
                                problem.setValue('status', status);
                                problem.setValue('description', '[CICD] - This issue was automatically IGNORED by the CICD process (based on preview conflict resolution)\n'.concat(problem.getValue('description')));
                                problem.update();
                            }
                        }
                    }
                });
            }

            var error = {
                name: 'Preview Review Problem',
                message: '',
                updateSet: gs.getProperty('glide.servlet.uri').concat('sys_remote_update_set.do?sys_id=', payload.remoteUpdateSetSysId),
                issues: false,
                previewProblems: [],
                dataLossWarnings: []
            };


            // check again for conflicts
            if (!GlidePreviewProblemHandler.hasUnresolvedProblems(payload.remoteUpdateSetSysId)) {
                // if no collisions detected and in detection mode, remove the preview update set
                if (payload.collisionDetect) {
                    var delRus = new GlideRecord('sys_remote_update_set');
                    if (delRus.get(payload.remoteUpdateSetSysId)) {
                        delRus.deleteRecord();
                    }
                }
            } else {
                // there are unresolved problems
                if (payload.collisionDetect) {
                    // change the name of the remote update set to indicate this is only a dry run to find the conflicts
                    var updRus = new GlideRecord('sys_remote_update_set');
                    if (updRus.get(payload.remoteUpdateSetSysId)) {
                        updRus.setValue('state', self.REQUIRES_REVIEW);
                        updRus.setValue('name', '[CICD PREVIEW] - '.concat(updRus.getValue('name')))
                        updRus.update();
                    }
                }

                var problem = new GlideRecord('sys_update_preview_problem');
                problem.addQuery('type=error^status=^'.concat('remote_update_set=', payload.remoteUpdateSetSysId, '^ORremote_update_set.remote_base_update_set=', payload.remoteUpdateSetSysId));
                problem._query();
                while (problem._next()) {
                    error.previewProblems.push({
                        type: problem.getValue('type'),
                        name: problem.getValue('description'),
                        link: gs.getProperty('glide.servlet.uri').concat(problem.getLink(true))
                    });
                }
                if (error.previewProblems.length) {
                    error.issues = true;
                    error.message += '- Update conflicts must be resolved manually. '
                }

            }

            // check for data loss warnings
            var ignoreDataLoss = (payload.conflicts.defaults.ignoreDataLoss || false);

            if (!ignoreDataLoss) {
                var del = new GlideRecord('sys_update_xml');
                del.addQuery('action=DELETE^'.concat('remote_update_set=', payload.remoteUpdateSetSysId, '^ORremote_update_set.remote_base_update_set=', payload.remoteUpdateSetSysId, '^nameDOES NOT CONTAINsys_dictionary_override^nameSTARTSWITHsys_dictionary^ORnameSTARTSWITHsys_db_object^ORnameSTARTSWITHvar_dictionary^ORnameSTARTSWITHsvc_extension_variable^ORnameSTARTSWITHwf_activity_variable^ORnameSTARTSWITHatf_input_variable^ORnameSTARTSWITHatf_output_variable^ORnameSTARTSWITHsys_atf_variable^ORnameSTARTSWITHsys_atf_remembered_values^ORDERBYtype^ORDERBYname'));
                del._query();
                self.console.warn('DATALOSS QUERY sys_update_xml : {0}', del.getEncodedQuery())
                while (del._next()) {
                    error.dataLossWarnings.push({
                        type: del.getValue('name'),
                        name: 'Data Loss Warning',
                        link: gs.getProperty('glide.servlet.uri').concat(del.getLink(true))
                    });
                }
                if (error.dataLossWarnings.length) {
                    error.issues = true;
                    error.message += '- Data Loss Warnings'
                }
            }

            // in case of some issues exit here
            if (error.issues) {
                self.response.setStatus(409);
                // also send the payload back
                error.payload = payload;
                return self.response.setBody({
                    code: 409,
                    error: error,
                    status: 'failure'
                });
            }

            // only commit if 'deploy' is set
            var progressId = null;
            if (!payload.collisionDetect &amp;&amp; payload.deploy) {
                var rus = new GlideRecord('sys_remote_update_set');
                if (rus.get(payload.remoteUpdateSetSysId)) {
                    if (rus.remote_base_update_set.nil()) {
                        /*
                            Commit the update set.
                            code from /sys_ui_action.do?sys_id=c38b2cab0a0a0b5000470398d9e60c36 
                            calling /sys_script_include.do?sys_id=d14a6c27eff22000c6845a3615c0fb5d
                        */
                        var commitResult = new UpdateSetCommitAjax((function () {
                            var params = {
                                sysparm_type: 'commitRemoteUpdateSet',
                                sysparm_remote_updateset_sys_id: payload.remoteUpdateSetSysId
                            };
                            return {
                                /**
                                 * Description
                                 * 
                                 * @param {any} paramName
                                 * @returns {MemberExpression}
                                 */
                                getParameter: function (paramName) {
                                    return params[paramName];
                                }
                            };
                        })(), new GlideXMLDocument(), '').process();
                        progressId = commitResult.split(',')[0];
                    } else {
                        /*
                            HierarchyUpdateSetCommitAjax
                            code from /sys_ui_action.do?sys_id=addc9e275bb01200abe48d5511f91a78
                            calling /sys_script_include.do?sys_id=fcfc9e275bb01200abe48d5511f91aea
                        */
                        var updateSet = new GlideRecord("sys_remote_update_set");
                        if (updateSet.get(rus.remote_base_update_set)) {
                            var worker = new SNC.HierarchyUpdateSetScriptable();
                            progressId = worker.commitHierarchy(updateSet.sys_id);
                        } else {
                            throw Error("Batch-UpdateSet not found for update-set with id" + payload.remoteUpdateSetSysId);
                        }
                    }
                } else {
                    throw Error("UpdateSet not found with id" + payload.remoteUpdateSetSysId);
                }
            }

            self.assign(payload, {
                state: 'committing',
                progressId: progressId,
                step: 'deploymentComplete'
            });

            return self._sendLocation(202, payload); // job create, return 'accepted'

        } catch (e) {
            gs.error(e.message);
            return new sn_ws_err.BadRequestError(e.message);

        }
    },

    /**
     * Return complete message
     * 
     * @param {any} payload
     * @returns {any} payload
     */
    _targetDeploymentComplete: function (payload) {
        if (payload.collisionDetect)
            return payload;

        payload.state = (payload.deploy) ? 'committed' : 'delivered';
        if (payload.deploy) {
            var us = new GlideRecord('sys_update_set');
            if (us.get('remote_sys_id', payload.remoteUpdateSetSysId)) {
                payload.targetUpdateSetSysId = us.getValue('sys_id');
            }
        }
        return payload;
    },


    /**
     * Send redirect location (long polling)
     * 
     * @param {any} status
     * @param {any} payload
     * @param {any} host
     * @returns {any}
     */
    _sendLocation: function (status, payload, host) {
        var self = this;
        /*
        var queryParams = Object.keys(payload).map(function (key) {
            return key.concat('=', encodeURIComponent(payload[key]));
        });
        */
        var uri = (host || gs.getProperty('glide.servlet.uri')).toLowerCase().replace(/\/$/, "");

        self.response.setStatus(202);
        payload._status = status;
        self.response.setHeader("Location",
            uri.concat(self.getBaseURI(), '/deploy_step?__step=', payload.step, '&amp;__status=', status)
        );
        return self.response.setBody(payload);
    },

    /**
     * Target API. This API is called from the source env see {@link global.module:sys_script_include.CiCdDeploy#deployUpdateSet}.&lt;br&gt;
     * If required, it creates and configures a local update-set-source, pulls the Update-Set from the source env and returns preview status.&lt;br&gt;
     * 
     * This is mapped to POST: /api/devops/v1/cicd/pull
     * @returns {undefined}
     */
    pullUpdateSet: function () {
        var self = this,
            sourceSysId;//sourceEnvironment, sourceUrl, updateSetSysId, limitSet, deploy, collisionDetect;

        try {

            if (!self.body) {
                self.console.error('no request payload found');
                throw Error('pullUpdateSet: no request payload found');
            }
            [self.body.sourceEnvironment].forEach(function (param) {
                if (gs.nil(param))
                    throw Error('sourceEnvironment are mandatory');
            });

            if (!gs.getUser().getRoles().contains('admin'))
                throw Error('CD User must have admin grants. User: '.concat(gs.getUserName(), ' Roles', gs.getUser().getRoles().toString()));
            /*
                create a dynamic source definition
            */
            try {

                var sourceEnvironment = self.body.sourceEnvironment.toLowerCase();
                var sourceUrl = (self.body.sourceUrl || sourceEnvironment).trim();
                var gitDeployment = self.body.gitDeployment || false;
                var credentials;

                //updateSetSysId = self.body.updateSetSysId;
                //limitSet = self.body.limitSet;
                //deploy = self.body.deploy || false;
                //collisionDetect = self.body.collisionDetect || false;

                var source = new GlideRecord('sys_update_set_source'),
                    name = new GlideChecksum(sourceUrl).getMD5().substr(0, 40),
                    desc = 'CICD deployment source for '.concat(sourceUrl, '. DO NOT DELETE OR CHANGE!');

                var noSlashUrl = sourceUrl.replace(/\/$/, "");
                if (source.get('url', noSlashUrl) || source.get('url', noSlashUrl + '/')) {
                    sourceSysId = source.getValue('sys_id');
                    // in case the credentials changed, update
                    credentials = self.body.credentials || {};
                    if (credentials.password &amp;&amp; credentials.user) {
                        source.setValue('username', credentials.user);
                        source.setValue('password', new GlideEncrypter().decrypt(credentials.password));
                        source.setWorkflow(false);
                        source.update();
                    }
                } else {
                    credentials = self.body.credentials || {};

                    if (!credentials.password)
                        throw Error('credentials.password is mandatory');

                    if (!credentials.user)
                        throw Error('credentials.user is mandatory');

                    source.initialize();

                    source.setValue('url', sourceUrl);
                    source.setValue('username', credentials.user);
                    source.setValue('password', new GlideEncrypter().decrypt(credentials.password));
                    source.setValue('name', name);
                    source.setValue('short_description', desc);
                    source.setValue('type', (gitDeployment) ? 'GIT' : 'dev');
                    source.setValue('active', true);
                    source.setWorkflow(false);
                    sourceSysId = source.insert();
                }
                if (gs.nil(sourceSysId))
                    throw Error('Somethings wrong with the creation of sys_update_set_source. CD User must have admin grants. '.concat(gs.getUserName(), ' Roles', gs.getUser().getRoles().toString()));

                gs.info("[CICD] : pullUpdateSet() sys_update_set_source {0}", sourceSysId);

            } catch (e) {
                gs.error("[CICD] : Source creation failed {0}", e.message || e)
                // remove the record completely 
                self.teardownTarget(sourceSysId);

                // tell request to also remove the user
                var error = new sn_ws_err.ServiceError();
                error.setStatus(666);
                error.setMessage('Source Creation Failed');
                error.setDetail(e.message);
                return error;
            }

            var payload = {
                sourceSysId: sourceSysId,
                targetEnvironment: gs.getProperty('glide.servlet.uri').toLowerCase(),
            };

            return payload;

        } catch (e) {
            self.console.error(e.message);
            return new sn_ws_err.BadRequestError(e.message);
        }

    },


    /**
     * Remove user and role on source environment
     * 
     * @param {any} roleSysId
     * @param {any} userSysId
     * @returns {undefined}
     */
    teardownSource: function (roleSysId, userSysId) {

        var role = new GlideRecord('sys_user_has_role');
        if (!gs.nil(roleSysId) &amp;&amp; role.get(roleSysId)) {
            role.deleteRecord();
        }
        var user = new GlideRecord('sys_user');
        if (!gs.nil(userSysId) &amp;&amp; user.get(userSysId)) {
            user.deleteRecord();
        }
    },

    type: 'CiCdDeploy'
};
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-08-13 12:12:30&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;79e4545fdbbb134076d6b94ffe9619bf&lt;/sys_id&gt;&lt;sys_mod_count&gt;60&lt;/sys_mod_count&gt;&lt;sys_name&gt;CiCdDeploy&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_79e4545fdbbb134076d6b94ffe9619bf&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-09-02 08:25:03&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>115008024</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>27902d4cdbf77b80ee93b14ffe961959</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ec050000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CiCdDeploy</target_name>
<type>Script Include</type>
<update_domain/>
<update_guid>aa0dc2cf79673780d92607c28438fc39</update_guid>
<update_guid_history>aa0dc2cf79673780d92607c28438fc39:115008024,f5e3449eb6a3338026c90f8a96ce7551:1428071816,44ab5ab1b82bb78053af13a2b0742cbd:743227475,512f2d29986377803d9fcdc6552e7f8b:-1247823009,43429dad8627ff40013a45999fff2338:344834134,f37fa409c1eb3f40d6bd5786bab5aecb:-1919226690,1523337853e73f401b7f31acbb5c7fc6:2042816970,ad8ac3b4c6673f404766c605f4ca6900:-794128968,d2180334c3673f401f17c21149904836:2130536791,d81607b0db673f4021a74d539ae56a2f:434210000,796580c0e3277f4057b6224c646adb00:1608057800,4dcc6e5e060277c08009c8212030726e:-1351644015,fa18d530a30efb8042eb721b5ab36b54:577169901,ce4511784acafb80a8bba2643ae28920:974960596,f5c8c4b465c6fb80a88cb294133fb9ad:37507909,b9c80434c2c6fb8047e0ff01471eca01:-1364057997</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_script_include_c994922edbe1a700323efc600f9619d6</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;global.CiCdRun&lt;/api_name&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;CiCdRun&lt;/name&gt;&lt;script&gt;&lt;![CDATA[/* exported CiCdRun */
/* global CiCdApi */

/**
 * CDCD Trigger to execute run in CICD Server
 * 
 * @class 
 * @author Boris Moers
 * @requires global.module:sys_script_include.CiCdApi
 * @requires sn_ws.module:sys_script_include.RESTMessageV2
 * @memberof global.module:sys_script_include
 */
var CiCdRun = Class.create();

CiCdRun.prototype = /** @lends global.module:sys_script_include.CiCdRun.prototype */ {

    REQUIRES_REVIEW: 'conflict_review',

    PROTECTED_STATES: ['complete', 'build', 'build_in_progress', 'code_review_pending', 'deployment_in_progress', 'conflict_review_in_progress', 'conflict_review_passed', 'deployment_manual_interaction'],

    /**
     * Polyfills for Object.assign
     * 
     * @param {any} target
     * @param {any} arg
     * @returns {any} to
     */
    assign: function (target, arg) {
        if (target === null) {
            throw new TypeError('Cannot convert undefined or null to object');
        }
        var to = Object(target);
        for (var index = 1; index &lt; arguments.length; index++) {
            var nextSource = arguments[index];
            if (nextSource != null) {
                for (var nextKey in nextSource) {
                    if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                        to[nextKey] = nextSource[nextKey];
                    }
                }
            }
        }
        return to;
    },


    /**
     * Constructor
     * 
     * @param {Object} settings
     * @returns {undefined}
     */
    initialize: function (settings) {
        var self = this;

        //var logger = new GSLog("com.sre.cicd", "CiCdRun");
        self.console = {
            /**
             * Description
             * 
             * @returns {undefined}
             */
            log: function () {
                if (arguments.length) arguments[0] = '[CiCdRun] ' + arguments[0];
                gs.info.apply(null, arguments);
            },
            /**
             * Description
             * 
             * @returns {undefined}
             */
            warn: function () {
                if (arguments.length) arguments[0] = '[CiCdRun] ' + arguments[0];
                gs.warn.apply(null, arguments);
            },
            /**
             * Description
             * 
             * @returns {undefined}
             */
            error: function () {
                if (arguments.length) arguments[0] = '[CiCdRun] ' + arguments[0];
                gs.error.apply(null, arguments);
            },
            /**
             * Description
             * 
             * @returns {undefined}
             */
            debug: function () {
                if (arguments.length) arguments[0] = '[CiCdRun] ' + arguments[0];
                gs.debug.apply(null, arguments);
            },
        };

        var cicdServerMatch = gs.getProperty('cicd-integration.server.url', '').match(/((?:http[s]?:\/\/)[^\/]*)/i);
        var cicdServer = (cicdServerMatch) ? cicdServerMatch[1] : 'server-undefined';

        self.settings = self.assign({
            cicdServer: cicdServer,
            cicdEnabled: Boolean(gs.getProperty('cicd-integration.enabled', 'false') == 'true'),
            cicdOnUpdateSetEnabled: Boolean(gs.getProperty('cicd-integration.enabled.on-update-set', 'false') == 'true'),
            cicdOnScopedAppsEnabled: Boolean(gs.getProperty('cicd-integration.enabled.on-scoped-app', 'false') == 'true'),
            cicdBuildStateMessageEnabled: Boolean(gs.getProperty('cicd-integration.message.build-state', 'false') == 'true'),
            throughMidServer: Boolean(gs.getProperty('cicd-integration.server.through-mid', 'false') == 'true'),
            midServerName: gs.getProperty('cicd-integration.server.mid-server-name', self.getMidServer()),
            cicdServerRunURL: cicdServer.concat('/run'),
            cicdServerPreviewCompleteURL: cicdServer.concat('/preview-complete'),
            cicdServerDeploymentCompleteURL: cicdServer.concat('/deployment-complete'),
        }, JSON.parse(JSON.stringify(settings || {})));
    },


    /**
     * display warning message on sys_remote_update_set
     * 
     * @param {any} current
     * @returns {undefined}
     */
    sys_remote_update_set_Display: function (current) {
        var self = this;

        if (!self.settings.cicdEnabled)
            return;
        if (gs.action.getGlideURI().getMap().get('sysparm_view') != 'cicd_preview')
            return;

        if (GlidePreviewProblemHandler.hasUnresolvedProblems(current.sys_id)) {
            gs.addErrorMessage("&lt;p&gt;&lt;b&gt;[CICD]&lt;/b&gt; Please resolve the conflicts below.&lt;br&gt;'Skip' will ignore the record during future deployments. 'Accept' will force the record during future deployments.&lt;br&gt;If the update set contains unwanted changes, click on '[CICD] Cancel'.&lt;/p&gt;");
            current.setWorkflow(false);
        } else {
            gs.addInfoMessage("&lt;p&gt;&lt;b&gt;[CICD]&lt;/b&gt; To continue the pipeline, please confirm the preview problems now.&lt;br&gt;If the update set contains unwanted changes, click on '[CICD] Cancel'.&lt;/p&gt;");
            current.setWorkflow(false);
        }

    },

    /**
     * Display link to build state on sys_update_set
     * 
     * @param {any} current
     * @returns {undefined}
     */
    sys_update_set_Display: function (current) {
        var self = this;

        if (!self.settings.cicdEnabled)
            return;

        if (!self.settings.cicdBuildStateMessageEnabled)
            return;

        if (gs.nil(current))
            return;

        if (!gs.nil(current.installed_from))
            return;

        var url = self.settings.cicdServer.concat('/goto/us/').concat(current.getValue('sys_id'));

        switch (current.getValue('state')) {

            case 'conflict_review_in_progress':
                gs.addInfoMessage('CICD: Conflict review in &lt;a href="'.concat(url).concat('" target="_blank"&gt;progress&lt;/a&gt;'));
                break;

            case 'conflict_review_passed':
                gs.addInfoMessage('CICD: Conflict review &lt;a href="'.concat(url).concat('" target="_blank"&gt;passed&lt;/a&gt;'));
                break;

            case 'build_in_progress':
                gs.addInfoMessage('CICD: Build is in &lt;a href="'.concat(url).concat('" target="_blank"&gt;progress&lt;/a&gt;'));
                break;

            case 'code_review_pending':
                gs.addInfoMessage('CICD: Code review &lt;a href="'.concat(url).concat('" target="_blank"&gt;pending&lt;/a&gt;'));
                break;

            case 'code_review_rejected':
                gs.addErrorMessage('CICD: Code review &lt;a href="'.concat(url).concat('" target="_blank"&gt;rejected&lt;/a&gt;'));
                break;

            case 'deployment_in_progress':
                gs.addInfoMessage('CICD: Deployment in &lt;a href="'.concat(url).concat('" target="_blank"&gt;progress&lt;/a&gt;'));
                break;

            case 'deployment_manual_interaction':
                gs.addInfoMessage('CICD: Deployment needs manual &lt;a href="'.concat(url).concat('" target="_blank"&gt;interaction&lt;/a&gt;'));
                break;

            case 'build_failed':
                gs.addErrorMessage('CICD: Build &lt;a href="'.concat(url).concat('" target="_blank"&gt;failed&lt;/a&gt;'));
                break;

            case 'complete':
                gs.addInfoMessage('CICD: Build is &lt;a href="'.concat(url).concat('" target="_blank"&gt;complete&lt;/a&gt;'));
                break;

            default:

        }
    },



    /**
     * Async inform CICD server if sys_remote_update_set is completed
     * 
     * @param {any} current
     * @returns {undefined}
     */
    sys_remote_update_set_AsyncIU: function (current) {
        var self = this;

        if (!self.settings.cicdEnabled)
            return;

        if (!gs.isInteractive())
            return;

        if (current.state.changesTo('committed')) {
            var resolutions = self.getResolutions(current.getValue('sys_id'));

            self.deploymentComplete({
                isInteractive: gs.isInteractive(),
                remoteUpdateSetID: current.getValue('sys_id'),
                resolutions: resolutions
            })
        }
    },


    /**
     * Example implementation of a Business-Rule to trigger the CICD Pipeline
     * 
     * @param {GlideRecord} current
     * @param {GlideRecord} previous
     * @returns {undefined}
     */
    sys_update_set_Before_IU: function (current, previous) {
        var self = this;

        if (!self.settings.cicdEnabled)
            return;

        if (!self.settings.cicdOnUpdateSetEnabled)
            return;

        if (gs.nil(current))
            return;

        if (!gs.isInteractive())
            return;

        var state = current.getValue('state');
        var prevState = previous.getValue('state');

        // don't allow user to change the state during a CICD run
        // except to 'Do not transport' and 'ignore'
        if (current.state.changes() &amp;&amp; !current.state.changesTo('Do not transport') &amp;&amp; !current.state.changesTo('ignore') &amp;&amp; self.PROTECTED_STATES.indexOf(prevState) != -1) {
            gs.addErrorMessage('You can\'t manually change the state from \'' + prevState + '\' to \'' + state + '\'');
            current.state.setValue(prevState);
            return current.setAbortAction(true);
        }

        if (current.state.changesTo('complete')) {
            try {
                // CICD enabled, run 
                current.setValue('state', 'build');
                self.now({
                    updateSet: current.getValue('sys_id'),            // the update set to send to the pipeline
                    application: {
                        id: current.getValue('application'),          // the id of the scope (or any other container grouping the application)
                        name: current.getDisplayValue('application')  // the name of the application
                    },
                    git: {
                        repository: ((current.application.scope.toString() == 'global') ? current.getDisplayValue('application') : current.application.scope.toString()).toLowerCase().replace(/\s+/g, '_') // assuming the git repo shares the name with the scoped app
                    }
                });
            } catch (e) {
                self.console.error(e);
                gs.addErrorMessage(e);
            }
        }
    },



    /**
     * UI Action on sys_app to trigger the CICD Pipeline
     * 
     * @param {GlideRecord} current
     * @returns {undefined}
     */
    sys_appUiAction: function (current) {
        var self = this;

        if (!self.settings.cicdEnabled)
            return;

        if (!self.settings.cicdOnScopedAppsEnabled)
            return;

        if (gs.nil(current))
            return;

        if (!gs.isInteractive())
            return;

        var cicdApi = new CiCdApi();
        var scopedUpdateSet = cicdApi.publishToUpdateSet(current.getValue('sys_id'));
        gs.addInfoMessage('Application exported as &lt;a href="/sys_update_set.do?sys_id=' + scopedUpdateSet.updateSetSysId + '"&gt;update set&lt;/a&gt;. CICD Process started.')

        self.now({
            updateSet: scopedUpdateSet.updateSetSysId,
            application: {
                id: current.getValue('sys_id'), // the id of the application
                name: current.getValue('name')  // the name of the application
            },
            git: {
                repository: ((current.getValue('scope') == 'global') ? current.getValue('name') : current.getValue('scope')).toLowerCase().replace(/\s+/g, '_') // assuming the git repo shares the name with the scoped app
            }
        });

    },



    /**
     * Rule to display the cancel ui action
     * 
     * @param {any} current
     * @returns {LogicalExpression} 
     */
    sys_remote_updateDisplayCancelUiAction: function (current) {
        return (gs.getProperty('cicd-integration.enabled', 'false') == 'true' &amp;&amp; current.state == 'conflict_review' &amp;&amp; current.canWrite())
    },

    /**
     * UI Action on sys_remote_update to cancel CICD run
     * 
     * @param {GlideRecord} current
     * @param {any} action
     * @returns {undefined}
     */
    sys_remote_updateCancelUiAction: function (current, action) {
        var self = this;

        if (!self.settings.cicdEnabled)
            return;

        if (gs.nil(current))
            return;

        if (!gs.isInteractive())
            return;

        if (current.getValue('state') != self.REQUIRES_REVIEW)
            return gs.addErrorMessage('This update set is not in the conflict preview state');

        try {
            var result = self.preview({
                doCancel: true,
                remoteUpdateSetID: current.getValue('sys_id')
            });
            current.deleteRecord();
            action.setRedirectURL(self.settings.cicdServer.concat(result.url));
        } catch (e) {
            self.console.error(e);
            gs.addErrorMessage(e);
            action.setRedirectURL(current);
        }
    },


    /**
     * Rule to display the confirm ui action
     * 
     * @param {any} current
     * @returns {LogicalExpression} 
     */
    sys_remote_updateDisplayConfirmUiAction: function (current) {
        return (gs.getProperty('cicd-integration.enabled', 'false') == 'true' &amp;&amp; current.state == 'conflict_review' &amp;&amp; !GlidePreviewProblemHandler.hasUnresolvedProblems(current.sys_id) &amp;&amp; current.canWrite())
    },


    /**
     * UI Action on sys_remote_update to confirm collisions
     * 
     * @param {GlideRecord} current
     * @param {any} action
     * @returns {undefined}
     */
    sys_remote_updateConfirmUiAction: function (current, action) {
        var self = this;

        if (!self.settings.cicdEnabled)
            return;

        if (gs.nil(current))
            return;

        if (!gs.isInteractive())
            return;

        if (current.getValue('state') != self.REQUIRES_REVIEW)
            return gs.addErrorMessage('This update set is not in the conflict preview state');


        var resolutions = self.getResolutions(current.getValue('sys_id'));

        try {
            var result = self.preview({
                doCancel: false,
                remoteUpdateSetID: current.getValue('sys_id'),
                resolutions: resolutions
            });
            current.deleteRecord();
            action.setRedirectURL(self.settings.cicdServer.concat(result.url));
        } catch (e) {
            self.console.error(e);
            gs.addErrorMessage(e);
            action.setRedirectURL(current);
        }
    },


    /**
     * Get all resolutions of a remote_update_set
     * 
     * @param {string} remoteUpdateSetID the sysId of the remote_update_set
     * @returns {undefined}
     */
    getResolutions: function (remoteUpdateSetID) {
        var resolutions = {};
        var prb = new GlideRecord('sys_update_preview_problem');
        prb.addQuery('remote_update_set', remoteUpdateSetID);
        prb.query();
        while (prb._next()) {

            var updateName = prb.remote_update.getRefRecord().getValue('name');
            var file = new GlideRecord("sys_metadata");
            var sysId = null,
                className = null,
                updatedOn = 0;

            if (file.get("sys_update_name", updateName)) {
                sysId = file.getValue('sys_id');
                className = file.getValue('sys_class_name');
                updatedOn = new GlideDateTime(file.getValue('sys_updated_on')).getNumericValue();
            }

            resolutions[updateName] = {
                status: prb.getValue('status'), // skipped = 'Skip remote update'; ignored = 'Accept remote update',
                resolvedBy: (prb.getValue('status')) ? prb.getValue('sys_updated_by') : null,
                sysId: sysId,
                className: className,
                updatedOn: updatedOn,
                host: gs.getProperty('glide.servlet.uri'),
            }
        }
        return resolutions;
    },


    /**
     * Send preview results back to CICD pipeline.
     * 
     * @param {any} opts for options see below
     * @returns {undefined}
     */
    preview: function (opts) {

        var self = this;

        if (!self.settings.cicdEnabled)
            return;

        if (gs.nil(self.settings.cicdServerPreviewCompleteURL)) {
            throw '[preview] Endpoint not defined';
        }

        var user = gs.getUser();
        var options = self.assign({
            doCancel: true,
            remoteUpdateSet: null,
            user: {
                name: user.getName(),       // the person confirmed the collision
                fullName: user.getFullName(),   // full name of that person
                email: user.getEmail()          // email of same
            },
            resolutions: {}
        }, JSON.parse(JSON.stringify(opts || {})));


        if (!options.doCancel &amp;&amp; GlidePreviewProblemHandler.hasUnresolvedProblems(options.remoteUpdateSet)) {
            throw '[preview] Update set has unresolved problems';
        }

        self.console.log("[preview] sending data to target: {0}", self.settings.cicdServerPreviewCompleteURL);

        var request = new sn_ws.RESTMessageV2();
        if (self.settings.throughMidServer) {
            if (gs.nil(self.settings.midServerName))
                throw '[previewComplete] MID Server not defined';
            request.setMIDServer(self.settings.midServerName);
        }

        self.console.log('[preview] Settings {0}', JSON.stringify(self.settings));
        self.console.log('[preview] Options {0}', JSON.stringify(options));

        request.setEndpoint(self.settings.cicdServerPreviewCompleteURL);
        request.setRequestHeader("Accept", "application/json");
        request.setRequestHeader("Content-Type", "application/json");
        request.setHttpMethod('POST');

        request.setRequestBody(JSON.stringify(options));

        var response = request.execute(); // Async somehow does not perform
        if (!response.haveError()) {
            try {
                var responseText = response.getBody(),
                    responseJson = JSON.parse(responseText);
                if (responseJson) {
                    // TODO
                    // check response body for successful build start
                    self.console.log("[preview] successful - result is: {0}, text: {1}", responseJson, responseText);
                    return responseJson;
                }
            } catch (e) {
                self.console.error("[preview] JSON parsing failed. {0}", e);
                throw e;
            }

        } else {
            var statusCode = response.getStatusCode();
            self.console.error("[preview] request ended in error - StatusCode {0}, ResponseMessage: {1}, Endpoint: {2}, RequestBody: {3}", statusCode, response.getErrorMessage(), self.settings.cicdServerPreviewCompleteURL, options);
            throw new Error(response.getErrorMessage());
        }

    },


    /**
     * Send deployment completed results back to CICD pipeline.
     * 
     * @param {any} opts for options see below
     * @returns {undefined}
     */
    deploymentComplete: function (opts) {
        var self = this;

        if (!self.settings.cicdEnabled)
            return;

        var user = gs.getUser();
        var options = self.assign({
            remoteUpdateSet: null,
            host: gs.getProperty('glide.servlet.uri'),
            user: {
                name: user.getName(),
                fullName: user.getFullName(),
                email: user.getEmail()
            },
            resolutions: {}
        }, JSON.parse(JSON.stringify(opts || {})));


        var request = new sn_ws.RESTMessageV2();
        if (self.settings.throughMidServer) {
            if (gs.nil(self.settings.midServerName))
                throw '[previewComplete] MID Server not defined';
            request.setMIDServer(self.settings.midServerName);
        }

        self.console.log('[deploymentComplete] Settings {0}', JSON.stringify(self.settings));
        self.console.log('[deploymentComplete] Options {0}', JSON.stringify(options));

        request.setEndpoint(self.settings.cicdServerDeploymentCompleteURL);
        request.setRequestHeader("Accept", "application/json");
        request.setRequestHeader("Content-Type", "application/json");
        request.setHttpMethod('POST');

        request.setRequestBody(JSON.stringify(options));

        var response = request.execute(); // Async somehow does not perform
        if (!response.haveError()) {
            try {
                var responseText = response.getBody(),
                    responseJson = JSON.parse(responseText);
                if (responseJson) {
                    self.console.log("[deploymentComplete] successful - result is: {0}, text: {1}", responseJson, responseText);
                    return responseJson;
                }
            } catch (e) {
                self.console.error("[deploymentComplete] JSON parsing failed. {0}", e);
                throw e;
            }

        } else {
            var statusCode = response.getStatusCode();
            self.console.error("[deploymentComplete] request ended in error - StatusCode {0}, ResponseMessage: {1}, Endpoint: {2}, RequestBody: {3}", statusCode, response.getErrorMessage(), self.settings.cicdServerDeploymentCompleteURL, options);
            throw new Error(response.getErrorMessage());
        }

    },


    /**
     * Send an Update-Set to the CICD Pipeline.
     * 
     * @param {any} opts for options see below
     * @returns {undefined}
     */
    now: function (opts) {
        var self = this;

        if (!self.settings.cicdEnabled)
            return;

        var user = gs.getUser();

        var options = self.assign({
            updateSet: null,                    // the sys_id of the update set or an application object {application: 'sys_id'} to be extracted
            application: {
                id: null,                       // either the sys_id of an application (scope) or the id of a container grouping files
                name: 'undefined'               // the name of the application / container
            },
            requestor: {
                userName: user.getName(),       // the person requesting the CICD pipeline to run
                fullName: user.getFullName(),   // full name of that person
                email: user.getEmail()          // email of same
            },
            atf: {
                updateSetOnly: false            // [optional] set to true if only ATF test IN the update-set shall be executed. if false it runs all test of the application.
            },
            git: {
                repository: 'undefined',        // git repo. e.g. 'sn-cicd.git'
                remoteUrl: null,                // [optional] repo full url with out git repo appended. e.g. 'ssh://git@github.com/project/repo.git'
                url: null                       // [optional] repo full url with out git repo appended. e.g. 'https://github.com/project/repo'
            },
            source: {
                name: gs.getProperty('glide.servlet.uri') // the source system of the update set e.g. https://companydev.service-now.com
            },
            master: {
                name: null                      // the master system of the update set. this must be production-like e.g. https://companypreprod.service-now.com
            },
            target: {
                name: null                      // the target system to deploy the update set e.g. https://companytest.service-now.com
            }
        }, JSON.parse(JSON.stringify(opts || {})));

        if (gs.nil(self.settings.cicdServerRunURL)) {
            throw 'Endpoint not defined';
        }

        self.console.log("sending data to target: {0}", self.settings.cicdServerRunURL);

        var request = new sn_ws.RESTMessageV2();
        if (self.settings.throughMidServer) {
            if (gs.nil(self.settings.midServerName))
                throw 'MID Server not defined';
            request.setMIDServer(self.settings.midServerName);
        }

        self.console.log('Settings {0}', JSON.stringify(self.settings));
        self.console.log('Options {0}', JSON.stringify(options));

        request.setEndpoint(self.settings.cicdServerRunURL);
        request.setRequestHeader("Accept", "application/json");
        request.setRequestHeader("Content-Type", "application/json");
        request.setHttpMethod('POST');

        request.setRequestBody(JSON.stringify(options));

        var response = request.execute(); // Async somehow does not perform
        if (!response.haveError()) {
            try {
                var responseText = response.getBody(),
                    responseJson = JSON.parse(responseText);
                if (responseJson) {
                    // TODO
                    // check response body for successful build start
                    self.console.log("successful - result is: {0}, text: {1}", responseJson, responseText);
                    return responseJson;
                }
            } catch (e) {
                self.console.error("JSON parsing failed. {0}", e);
                throw e;
            }

        } else {
            var statusCode = response.getStatusCode();
            self.console.error("request ended in error - StatusCode {0}, ResponseMessage: {1}, Endpoint: {2}, RequestBody: {3}", statusCode, response.getErrorMessage(), self.settings.cicdServerRunURL, options);
            throw new Error(response.getErrorMessage());
        }

    },

    /**
     * Get one active mid server
     * 
     * @returns {any} name
     */
    getMidServer: function () {
        var name = null;
        var mid = new GlideRecord('ecc_agent');
        mid.addQuery('status', 'Up');
        mid.setLimit(1);
        mid.query();
        if (mid._next()) {
            name = mid.name.toString();
        }
        return name;
    },

    type: 'CiCdRun'
};
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-11-06 13:24:41&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;c994922edbe1a700323efc600f9619d6&lt;/sys_id&gt;&lt;sys_mod_count&gt;38&lt;/sys_mod_count&gt;&lt;sys_name&gt;CiCdRun&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_c994922edbe1a700323efc600f9619d6&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-09-05 07:44:19&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>959258349</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>2b90214cdbf77b80ee93b14ffe9619e7</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ed8a0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CiCdRun</target_name>
<type>Script Include</type>
<update_domain/>
<update_guid>5b706d0c6df77b80af38a3ee7984d4a5</update_guid>
<update_guid_history>5b706d0c6df77b80af38a3ee7984d4a5:959258349,2fe5449efba3338065e50f77aa6baac9:-843683994,adc38cde0e233380ffca1c911e987e58:-710146176,3bab5ab1a32bb7803449cda9d99597c3:1674244566,a21fa92d426377801fd8dfc928e87629:-1881978389,dc91996d5227ff4090d5802122ed5804:-650744238,18d015e57127ff4005dac826090390d6:-518485012,b69f012d9f27ff408ae9d64d67400e03:-1148982782,6f29fca5cde3ff40da273a26fd785a5c:-181647465,66f8386582e3ff406abe5d4cdbed139f:-672653044,e6d7b46583e3ff40cc65083c6c5f7461:1903432625,5c0738e1b4e3ff409560635fa7417dbc:-672653044,05863ce18fe3ff404ffbd95dad822d67:2108532257,1b61fc2d77a3ff407a1f8f3fc6eeabeb:-1024258537,4150f4e9ffa3ff40344f2a451d6c465e:529218909,391b4c5528ab7f401ae6216cc36e3eb4:-546041040,513a1f8934e77f40319a497f3f7aed88:907892968,f6765fc5bfe77f4033cca69b3ebc0775:-1804445097,919553c531e77f40b19328fb87a5fc49:-18714662,587ef8098aeb3f40a1e67ecef0808c64:230177980,847aac81c1eb3f4082ca868012149116:1381829369,48cc67f4dde73f40878db2d0899258ed:359391886,762a9b33d8537f40df040771c8620688:1167543126,ae29dbffba137f402215f662c94861e0:-1349673989,ae29dbffcb137f4047adf4405693badd:-1849667942</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_11095a7adbdaa7c076d6b94ffe96190c</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>&lt;b&gt;Secret Token&lt;/b&gt;&lt;br&gt;&#13;
&lt;small&gt;a random string&lt;/small&gt;&lt;br&gt;&#13;
The Secure Token. &lt;span color="red" style="color: red;"&gt;If no name and no token is specified the API is public!&lt;/span&gt;</description><ignore_cache>false</ignore_cache><is_private>false</is_private><name>cicd-integration.pull-request-proxy.secret</name><read_roles/><suffix/><sys_class_name>sys_properties</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-12-14 15:09:16</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>11095a7adbdaa7c076d6b94ffe96190c</sys_id><sys_mod_count>44</sys_mod_count><sys_name>cicd-integration.pull-request-proxy.secret</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_11095a7adbdaa7c076d6b94ffe96190c</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2019-01-09 16:50:03</sys_updated_on><type>string</type><value>5VCSj9SPRH3EbNHrBSTf</value><write_roles/></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=11095a7adbdaa7c076d6b94ffe96190c"/></record_update>]]></payload>
<payload_hash>-1330139281</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>2b902d4cdbf77b80ee93b14ffe96194b</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061e9280000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.pull-request-proxy.secret</target_name>
<type>System Property</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>DELETE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_operation_deb78ededb775f0076d6b94ffe961940</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ws_operation"&gt;&lt;sys_ws_operation action="DELETE"&gt;&lt;active&gt;false&lt;/active&gt;&lt;consumes&gt;application/json,application/xml,text/xml&lt;/consumes&gt;&lt;consumes_customized&gt;false&lt;/consumes_customized&gt;&lt;default_operation_uri&gt;/api/devops/cicd/deploy&lt;/default_operation_uri&gt;&lt;enforce_acl&gt;2ae86fe7db6fd300dfa9b94ffe9619bc&lt;/enforce_acl&gt;&lt;http_method&gt;GET&lt;/http_method&gt;&lt;name&gt;CD - Deploy Process Steps&lt;/name&gt;&lt;operation_script&gt;&lt;![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    return new CiCdDeploy(request, response).processUpdateSetDeploySteps();

})(request, response);]]&gt;&lt;/operation_script&gt;&lt;operation_uri&gt;/api/devops/v1/cicd/deploy&lt;/operation_uri&gt;&lt;produces&gt;application/json,application/xml,text/xml&lt;/produces&gt;&lt;produces_customized&gt;false&lt;/produces_customized&gt;&lt;relative_path&gt;/deploy&lt;/relative_path&gt;&lt;request_example/&gt;&lt;requires_acl_authorization&gt;true&lt;/requires_acl_authorization&gt;&lt;requires_authentication&gt;true&lt;/requires_authentication&gt;&lt;requires_snc_internal_role&gt;true&lt;/requires_snc_internal_role&gt;&lt;short_description/&gt;&lt;sys_class_name&gt;sys_ws_operation&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-08-10 17:59:46&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;deb78ededb775f0076d6b94ffe961940&lt;/sys_id&gt;&lt;sys_mod_count&gt;4&lt;/sys_mod_count&gt;&lt;sys_name&gt;CD - Deploy Process Steps&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ws_operation_deb78ededb775f0076d6b94ffe961940&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-08-30 14:40:36&lt;/sys_updated_on&gt;&lt;web_service_definition display_value="CICD Integration"&gt;81eccb6fdbebd300dfa9b94ffe96190e&lt;/web_service_definition&gt;&lt;web_service_version display_value="v1"&gt;0a3dcb2fdbebd300dfa9b94ffe9619c7&lt;/web_service_version&gt;&lt;/sys_ws_operation&gt;&lt;/record_update&gt;</payload>
<payload_hash>191887314</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>2b902d4cdbf77b80ee93b14ffe96194e</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ec220000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CD - Deploy Process Steps</target_name>
<type>Scripted REST Resource</type>
<update_domain/>
<update_guid>a556405243e333802404b344d29fc6ab</update_guid>
<update_guid_history>a556405243e333802404b344d29fc6ab:191887314,2e36449e62a33380bc7353c9acf5c672:-521495458,6a36449e93a33380b94d459799d01071:-1817974601</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_script_include_4ba066b2db1ea7c076d6b94ffe96195f</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;global.CiCdWebHook&lt;/api_name&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;CiCdWebHook&lt;/name&gt;&lt;script&gt;&lt;![CDATA[/**
 * Pull Request Proxy
 * 
 * @class 
 * @author Boris Moers [b.moers]
 * @requires sn_ws_err.module:sys_script_include.BadRequestError
 * @requires sn_ws.module:sys_script_include.RESTMessageV2
 * @memberof global.module:sys_script_include
 */
var CiCdWebHook = Class.create();
CiCdWebHook.prototype = /** @lends global.module:sys_script_include.CiCdWebHook.prototype */ {

    /**
     * Constructor
     * 
     * @param {any} request
     * @param {any} response
     * @returns {undefined}
     */
    initialize: function (request, response) {
        var self = this;

        self.console = {
            /**
             * Description
             * 
             * @returns {undefined}
             */
            log: function () {
                if (arguments.length) arguments[0] = '[' + self.type + '] ' + arguments[0];
                gs.info.apply(null, arguments);
            },
            /**
             * Description
             * 
             * @returns {undefined}
             */
            warn: function () {
                if (arguments.length) arguments[0] = '[' + self.type + '] ' + arguments[0];
                gs.warn.apply(null, arguments);
            },
            /**
             * Description
             * 
             * @returns {undefined}
             */
            error: function () {
                if (arguments.length) arguments[0] = '[' + self.type + '] ' + arguments[0];
                gs.error.apply(null, arguments);
            },
            /**
             * Description
             * 
             * @returns {undefined}
             */
            debug: function () {
                if (arguments.length) arguments[0] = '[' + self.type + '] ' + arguments[0];
                gs.debug.apply(null, arguments);
            },
        };

        self.request = request;
        self.response = response;

        self.proxyEnabled = Boolean(gs.getProperty('cicd-integration.pull-request-proxy.enabled', 'false') == 'true');

        var cicdServerMatch = gs.getProperty('cicd-integration.server.url', '').match(/((?:http[s]?:\/\/)[^\/]*)/i);
        var cicdServer = (cicdServerMatch) ? cicdServerMatch[1] : 'server-undefined';

        self.proxyURL = cicdServer.concat('/pull_request');
        self.secretName = gs.getProperty('cicd-integration.pull-request-proxy.header-secret-name', null);
        self.secretToken = gs.getProperty('cicd-integration.pull-request-proxy.secret', null);
        self.secretValidation = gs.getProperty('cicd-integration.pull-request-proxy.secret-validation', null);

        self.throughMidServer = Boolean(gs.getProperty('cicd-integration.server.through-mid', 'false') == 'true');
        self.midServerName = gs.getProperty('cicd-integration.server.mid-server-name', self.getMidServer());

        self.body = null;
        self.bodyString = null;
        try {
            // support for POST request
            var requestBody = request.body;
            self.bodyString = requestBody.dataString;
            if (requestBody &amp;&amp; requestBody.hasNext()) {
                var body = requestBody.nextEntry();
                if (body) {
                    self.body = body;
                }
            }
        } catch (ignore) { }
    },

    /**
     * Proxy function to send the request to
     * 
     * @returns {undefined}
     */
    proxy: function () {
        var self = this;

        if (!self.proxyEnabled) {
            return new sn_ws_err.BadRequestError('Unauthorized');
        }

        if (!self.proxyURL) {
            return new sn_ws_err.BadRequestError('Unauthorized');
        }

        if (self.secretName) {
            if (!self.secretToken) {
                self.console.error('No Secret-Token specified! Set \'cicd-integration.pull-request-proxy.secret\' to a random string.');
                return new sn_ws_err.BadRequestError('Unauthorized');
            }
            // check the secrets to match
            var secret = self.request.getHeader(self.secretName);
            if (!secret) {
                self.console.error('No Secret passed! Header {0} is empty.', self.secretName);
                return new sn_ws_err.BadRequestError('Unauthorized');
            }

            if ('hmac' == self.secretValidation) {
                if (!secret.startsWith('sha1='))
                    return new sn_ws_err.BadRequestError('Unauthorized');

                /**
                 * Description
                 * 
                 * @param {any} byteArray
                 * @returns {any} 
                 */
                function toHex(byteArray) {
                    return byteArray.map(function (b) {
                        return ('0' + (b &amp; 0xFF).toString(16)).slice(-2)
                    }).join('');
                }

                var base64 = SncAuthentication.encode(self.bodyString, self.secretToken, "HmacSHA1");
                var bytes = GlideStringUtil.base64DecodeAsBytes(base64);
                var hex = toHex(bytes);
                if (secret.split('sha1=')[1] != hex) {
                    self.console.warn('Proxy request made with invalid Token. Token not valid.');
                    return new sn_ws_err.BadRequestError('Unauthorized');
                }

            } else if ('match' == self.secretValidation) {
                if (self.secretToken != secret) {
                    self.console.warn('Proxy request made with invalid Token. Token does not match.');
                    return new sn_ws_err.BadRequestError('Unauthorized');
                }
            } else {
                return new sn_ws_err.BadRequestError('Unauthorized');
            }

        } else {
            self.console.warn('Proxy API is public! Request details - Headers: {0}, Body: {1}', JSON.stringify(self.request.headers), JSON.stringify(self.body));
        }

        var request = new sn_ws.RESTMessageV2();
        if (self.throughMidServer) {
            if (gs.nil(self.midServerName))
                throw new Error('MID Server not defined');
            request.setMIDServer(self.midServerName);
        }

        request.setEndpoint(self.proxyURL);
        request.setRequestHeader("Accept", "application/json");
        request.setRequestHeader("Content-Type", "application/json");
        request.setHttpMethod('POST');

        request.setRequestBody(self.bodyString);

        var response = request.execute(); // Async somehow does not perform
        if (!response.haveError()) {
            try {
                var responseText = response.getBody(),
                    responseJson = JSON.parse(responseText);
                if (responseJson) {
                    // TODO
                    // check response body for successful build start
                    self.console.log("successful - result is: {0}", responseText);
                    return responseJson;
                }
            } catch (e) {
                self.console.error("JSON parsing failed. {0}", e);
                throw e;
            }

        } else {
            var statusCode = response.getStatusCode();
            self.console.error("request ended in error - StatusCode {0}, ResponseMessage: {1}, Endpoint: {2}, ResponseBody: {3}", statusCode, response.getErrorMessage(), self.proxyURL, response.getBody());
            throw new Error(response.getErrorMessage());
        }
    },


    /**
     * Get one active mid server
     * 
     * @returns {any} name
     */
    getMidServer: function () {
        var name = null;
        var mid = new GlideRecord('ecc_agent');
        mid.addQuery('status', 'Up');
        mid.setLimit(1);
        mid.query();
        if (mid._next()) {
            name = mid.name.toString();
        }
        return name;
    },

    type: 'CiCdWebHook'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-12-14 15:43:52&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;4ba066b2db1ea7c076d6b94ffe96195f&lt;/sys_id&gt;&lt;sys_mod_count&gt;27&lt;/sys_mod_count&gt;&lt;sys_name&gt;CiCdWebHook&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_4ba066b2db1ea7c076d6b94ffe96195f&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-02-28 14:20:34&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>1484184328</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>2b902d4cdbf77b80ee93b14ffe961951</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ea6e0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CiCdWebHook</target_name>
<type>Script Include</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_role_e3fcfacbdb652b00323efc600f9619e3</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl_role"><sys_security_acl_role action="INSERT_OR_UPDATE"><sys_class_name>sys_security_acl_role</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-11-08 05:38:52</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>e3fcfacbdb652b00323efc600f9619e3</sys_id><sys_mod_count>0</sys_mod_count><sys_name>/api/devops/cicd/ci.cicd_integration_user</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_security_acl display_value="/api/devops/cicd/ci">1a7833bddbb31f0076d6b94ffe961994</sys_security_acl><sys_update_name>sys_security_acl_role_e3fcfacbdb652b00323efc600f9619e3</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-11-08 05:38:52</sys_updated_on><sys_user_role display_value="cicd_integration_user" name="cicd_integration_user">dd194b2bdbebd300dfa9b94ffe96194f</sys_user_role><transaction_id/></sys_security_acl_role></record_update>]]></payload>
<payload_hash>-88991152</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>2b902d4cdbf77b80ee93b14ffe961954</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ee900000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table>/api/devops/cicd/ci</table>
<target_name>/api/devops/cicd/ci.cicd_integration_user</target_name>
<type>Access Roles</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_map_e8bde335dbb31f0076d6b94ffe961948</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter_map"><sys_ws_query_parameter_map action="INSERT_OR_UPDATE"><sys_class_name>sys_ws_query_parameter_map</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-09 12:08:30</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>e8bde335dbb31f0076d6b94ffe961948</sys_id><sys_mod_count>0</sys_mod_count><sys_name>8d736e29dbb3db0076d6b94ffe961989</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_map_e8bde335dbb31f0076d6b94ffe961948</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-09 12:08:30</sys_updated_on><web_service_operation display_value="CI - Set UpdateSet Status">0dc4a3f9db731f0076d6b94ffe961989</web_service_operation><web_service_query_parameter display_value="sysparm_display_value">8d736e29dbb3db0076d6b94ffe961989</web_service_query_parameter></sys_ws_query_parameter_map></record_update>]]></payload>
<payload_hash>-559477398</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>2b902d4cdbf77b80ee93b14ffe961958</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ee970000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>8d736e29dbb3db0076d6b94ffe961989</target_name>
<type>Scripted REST Query Parameter Associatio</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_148a8389dba77f409775f6700f961907</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_ui_action"&gt;&lt;sys_ui_action action="INSERT_OR_UPDATE"&gt;&lt;action_name&gt;cicd_run_cancel&lt;/action_name&gt;&lt;active&gt;true&lt;/active&gt;&lt;client&gt;false&lt;/client&gt;&lt;client_script_v2/&gt;&lt;comments&gt;Cancel the pipeline if the update set contains undesired records.&lt;/comments&gt;&lt;condition&gt;new global.CiCdRun().sys_remote_updateDisplayCancelUiAction(current)&lt;/condition&gt;&lt;form_action&gt;true&lt;/form_action&gt;&lt;form_button&gt;true&lt;/form_button&gt;&lt;form_button_v2&gt;false&lt;/form_button_v2&gt;&lt;form_context_menu&gt;false&lt;/form_context_menu&gt;&lt;form_link&gt;false&lt;/form_link&gt;&lt;form_menu_button_v2&gt;false&lt;/form_menu_button_v2&gt;&lt;form_style/&gt;&lt;hint/&gt;&lt;isolate_script&gt;false&lt;/isolate_script&gt;&lt;list_action&gt;false&lt;/list_action&gt;&lt;list_banner_button&gt;false&lt;/list_banner_button&gt;&lt;list_button&gt;false&lt;/list_button&gt;&lt;list_choice&gt;false&lt;/list_choice&gt;&lt;list_context_menu&gt;false&lt;/list_context_menu&gt;&lt;list_link&gt;false&lt;/list_link&gt;&lt;list_save_with_form_button&gt;false&lt;/list_save_with_form_button&gt;&lt;list_style/&gt;&lt;name&gt;Cancel Run [CICD]&lt;/name&gt;&lt;onclick/&gt;&lt;order&gt;0&lt;/order&gt;&lt;script&gt;&lt;![CDATA[new global.CiCdRun().sys_remote_updateCancelUiAction(current, action);
]]&gt;&lt;/script&gt;&lt;show_insert&gt;false&lt;/show_insert&gt;&lt;show_multiple_update&gt;false&lt;/show_multiple_update&gt;&lt;show_query&gt;false&lt;/show_query&gt;&lt;show_update&gt;true&lt;/show_update&gt;&lt;sys_class_name&gt;sys_ui_action&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-08-27 07:45:44&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_id&gt;148a8389dba77f409775f6700f961907&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_name&gt;Cancel Run [CICD]&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_action_148a8389dba77f409775f6700f961907&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-08-27 08:55:06&lt;/sys_updated_on&gt;&lt;table&gt;sys_remote_update_set&lt;/table&gt;&lt;ui11_compatible&gt;true&lt;/ui11_compatible&gt;&lt;ui16_compatible&gt;false&lt;/ui16_compatible&gt;&lt;/sys_ui_action&gt;&lt;/record_update&gt;</payload>
<payload_hash>244319469</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>2f90214cdbf77b80ee93b14ffe9619e4</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061e9750000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table>sys_remote_update_set</table>
<target_name>Cancel Run [CICD]</target_name>
<type>UI Action</type>
<update_domain>global</update_domain>
<update_guid>1c6ad3c953e77f40850b077704e916b4</update_guid>
<update_guid_history>1c6ad3c953e77f40850b077704e916b4:244319469,108a83897ba77f40106af3972483b909:-1024615469</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_category_m2m_7996a94ddbaaefc076d6b94ffe9619c3</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties_category_m2m"><sys_properties_category_m2m action="INSERT_OR_UPDATE"><category display_value="CICD Integration">8d1de113dbb86380432cfc600f9619f6</category><order>540</order><property display_value="cicd-integration.pull-request-proxy.secret-validation" name="cicd-integration.pull-request-proxy.secret-validation">bcc52589dbaaefc076d6b94ffe961993</property><sys_class_name>sys_properties_category_m2m</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-12-21 11:15:15</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>7996a94ddbaaefc076d6b94ffe9619c3</sys_id><sys_mod_count>1</sys_mod_count><sys_name>cicd-integration.pull-request-proxy.secret-validation.CICD Integration</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_category_m2m_7996a94ddbaaefc076d6b94ffe9619c3</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-12-21 11:15:49</sys_updated_on></sys_properties_category_m2m></record_update>]]></payload>
<payload_hash>1051658115</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>2f90214cdbf77b80ee93b14ffe9619e6</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ebd50000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.pull-request-proxy.secret-validation.CICD Integration</target_name>
<type>Category Property</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_role_d7c15763db2fd300dfa9b94ffe9619bb</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl_role"><sys_security_acl_role action="INSERT_OR_UPDATE"><sys_class_name>sys_security_acl_role</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-02 10:21:02</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>d7c15763db2fd300dfa9b94ffe9619bb</sys_id><sys_mod_count>0</sys_mod_count><sys_name>/api/devops/cicd/atf.atf_test_admin</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_security_acl display_value="/api/devops/cicd/atf">9041d7a3db2fd300dfa9b94ffe961910</sys_security_acl><sys_update_name>sys_security_acl_role_d7c15763db2fd300dfa9b94ffe9619bb</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-02 10:21:02</sys_updated_on><sys_user_role display_value="atf_test_admin" name="atf_test_admin">30eb7e98372413003ddac98754990e07</sys_user_role><transaction_id/></sys_security_acl_role></record_update>]]></payload>
<payload_hash>379943616</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>2f90214cdbf77b80ee93b14ffe9619e9</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ede20000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table>/api/devops/cicd/atf</table>
<target_name>/api/devops/cicd/atf.atf_test_admin</target_name>
<type>Access Roles</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_script_include_16e746c6dbcfef00ee93b14ffe96194c</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;global.CiCdSource&lt;/api_name&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;CiCdSource&lt;/name&gt;&lt;script&gt;&lt;![CDATA[/* exported CiCdSource */
/* global gs, sn_ws, sn_ws_err, Class, GlideEncrypter, GlideSecureRandomUtil, GlideUpdateSetWorker, GlideDateTime, GlideRecord, GlideProperties, JSON */

/**
 * CDCD Trigger to execute run in CICD Server
 * 
 * @class 
 * @author Boris Moers
 * @requires sn_ws.module:sys_script_include.RESTMessageV2
 * @memberof global.module:sys_script_include
 */
var CiCdSource = Class.create();

CiCdSource.prototype = /** @lends global.module:sys_script_include.CiCdSource.prototype */ {

    /**
     * Polyfill for Object.assign
     * 
     * @param {any} target
     * @param {any} arg
     * @returns {any} to
     */
    assign: function (target, arg) {
        if (target === null) {
            throw new TypeError('Cannot convert undefined or null to object');
        }
        var to = Object(target);
        for (var index = 1; index &lt; arguments.length; index++) {
            var nextSource = arguments[index];
            if (nextSource != null) {
                for (var nextKey in nextSource) {
                    if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                        to[nextKey] = nextSource[nextKey];
                    }
                }
            }
        }
        return to;
    },


    /**
     * Constructor
     * 
     * @param {Object} settings
     * @returns {undefined}
     */
    initialize: function (settings) {
        var self = this;

        self.console = {
            log: function () {
                if (arguments.length) arguments[0] = '[' + self.type + '] ' + arguments[0];
                gs.info.apply(null, arguments);
            },
            warn: function () {
                if (arguments.length) arguments[0] = '[' + self.type + '] ' + arguments[0];
                gs.warn.apply(null, arguments);
            },
            error: function () {
                if (arguments.length) arguments[0] = '[' + self.type + '] ' + arguments[0];
                gs.error.apply(null, arguments);
            },
            debug: function () {
                if (arguments.length) arguments[0] = '[' + self.type + '] ' + arguments[0];
                gs.debug.apply(null, arguments);
            },
        };

        var cicdServerMatch = gs.getProperty('cicd-integration.server.url', '').match(/((?:http[s]?:\/\/)[^\/]*)/i);
        var cicdServer = (cicdServerMatch) ? cicdServerMatch[1] : 'server-undefined';

        self.settings = self.assign({
            cicdEnabled: Boolean(gs.getProperty('cicd-integration.enabled', 'false') == 'true'),
            throughMidServer: Boolean(gs.getProperty('cicd-integration.server.through-mid', 'false') == 'true'),
            midServerName: gs.getProperty('cicd-integration.server.mid-server-name', self.getMidServer()),
            cicdServerExportURL: cicdServer.concat('/source')
        }, JSON.parse(JSON.stringify(settings || {})));
    },


    /**
     * proxy request to CICD server to get UpdateSet details
     * @param {*} commitId 
     */
    _getUpdateSet: function (commitId) {
        var self = this;

        var request = new sn_ws.RESTMessageV2();
        if (self.settings.throughMidServer) {
            if (gs.nil(self.settings.midServerName))
                throw 'MID Server not defined';
            request.setMIDServer(self.settings.midServerName);
        }

        request.setEndpoint(self.settings.cicdServerExportURL.concat('/update_set/', commitId));
        request.setRequestHeader("Accept", "application/json");
        request.setRequestHeader("Content-Type", "application/json");
        request.setHttpMethod('GET');

        //self.console.log('Settings {0}', JSON.stringify(self.settings));
        //self.console.log('CommitId {0}', commitId);
        //self.console.log("URL: {0}", request.getEndpoint());

        var response = request.execute(); // Async somehow does not perform
        if (!response.haveError()) {
            try {
                var responseJson = JSON.parse(response.getBody());
                //self.console.log("successful - result is: {0}", JSON.stringify(responseJson));
                return responseJson;

            } catch (e) {
                self.console.error("JSON parsing failed. Text: {0}, Error:", response.getBody(), e);
                throw e;
            }
        } else {
            var statusCode = response.getStatusCode();
            self.console.error("request ended in error - StatusCode {0}, ResponseMessage: {1}, Endpoint: {2}, RequestBody: {3}", statusCode, response.getErrorMessage(), request.getEndpoint(), response.getBody());
            throw new Error(response.getErrorMessage());
        }
    },


    /**
     * Proxy for hub.do. Call local host with same param and credentials.
     * /api/devops/cicd/source/hub.do
     * 
     * @param {*} request 
     * @param {*} response 
     */
    getHubStatus: function (request, response) {
        if ('hub.do' == request.pathParams.page) {
            gs.info('[CICD] export : hub.do status');
            var rest = new sn_ws.RESTMessageV2();
            rest.setEndpoint(gs.getProperty('glide.servlet.uri').concat(request.pathParams.page, '?', request.queryString));
            rest.setRequestHeader('Authorization', request.getHeader('Authorization'));
            rest.setHttpMethod('GET');
            rest.setRequestHeader("Accept", "application/json");
            rest.setRequestHeader("Content-Type", "application/json");

            var resp = rest.execute();
            response.setStatus(resp.getStatusCode());
            response.setContentType('application/json');
            return response.getStreamWriter().writeString(resp.getBody());
        }
        return;
    },

    /**
     * UpdateSet SOAP Web Service Endpoint
     * /api/devops/cicd/source/sys_update_set
     * 
     * @param {*} requestXml 
     * @param {*} response 
     */
    updateSetSoapWebService: function (requestXml, response) {
        var self = this;
        try {
            var payload = gs.xmlToJSON(requestXml);
            var body = payload['SOAP-ENV:Envelope']['SOAP-ENV:Body'];
            var funcName = Object.keys(body)[0];

            //self.console.log('soapWebService ' + funcName + " --- XML " + requestXml);

            var query = body[funcName]['__encoded_query'];
            var commitId = null;
            var count = 0;
            if (query) {
                var match = query.match(/^sys_idIN(.*)$/i);
                if (match &amp;&amp; match[1]) {
                    commitId = match[1];
                    count = 1;
                }
            }

            var resp = new XMLDocument("&lt;" + funcName + "Response/&gt;");

            if ('getKeys' == funcName) {

                resp.createElement("count", count);
                resp.createElement("sys_id", commitId);

            } else if ('getRecords' == funcName) {

                resp.createElement("count", count);
                var result = resp.createElement("getRecordsResult");
                resp.setCurrent(result);

                var head = self.assign({
                    application: null,
                    application_name: null,
                    application_scope: null,
                    application_version: null,
                    
                    base_update_set: null,
                    completed_by: null,
                    completed_on: null,
                    description: null,
                    installed_from: null,
                    install_date: null,
                    is_default: null,
                    merged_to: null,
                    name: null,
                    origin_sys_id: null,
                    parent: null,
                    release_date: null,
                    remote_sys_id: null,
                    state: null,
                    sys_created_by: null,
                    sys_created_on: null,
                    sys_id: null,
                    sys_mod_count: null,
                    sys_updated_by: null,
                    sys_updated_on: null
                }, self._getUpdateSet(commitId))
                //self.console.log('getUpdateSet {0}', JSON.stringify(head));

                // create the XML payload
                Object.keys(head).forEach(function (name) {
                    if (head[name])
                        resp.createElement(name, head[name]);
                    if (!name.startsWith('dv_') &amp;&amp; !head['dv_' + name])
                        resp.createElement('dv_' + name, head[name]);
                });

            }

            //self.console.log('getUpdateSet XML ' + resp.toIndentedString());
            response.soapResponseElement = resp.getDocumentElement();
            return;

        } catch (e) {
            self.console.error('updateSetSoapWebService ' + e);
            response.e = e;
        }

    },

    /**
     * guess what: split an array into chunks
     */
    _chunkArray: function (myArray, chunk_size) {
        var index = 0, arrayLength = myArray.length, tempArray = [];
        for (index = 0; index &lt; arrayLength; index += chunk_size) {
            tempArray.push(myArray.slice(index, index + chunk_size));
        }
        return tempArray;
    },

    /**
     * temp preference store. 
     * as service now does not use the same session in the remote updateset client, the sys_id information must be stored elsewhere.
     */
    _preference: {
        get: function (name) {
            if (!name)
                return;

            var gr = new GlideRecord('sys_user_preference');
            gr.addQuery('user', gs.getUserID());
            gr.addQuery('name', name);
            gr._query();
            if (gr._next()) {
                return gr.getValue('value');
            }
            return;
        },
        set: function (name, value) {
            if (!name)
                return;

            var gr = new GlideRecord('sys_user_preference');
            gr.addQuery('user', gs.getUserID());
            gr.addQuery('name', name);
            gr._query();
            if (gr._next()) {
                gr.setValue('value', value);
                return gr.update();
            } else {
                gr.initialize();
                gr.setValue('user', gs.getUserID());
                gr.setValue('name', name);
                gr.setValue('type', 'string');
                gr.setValue('value', value);
                return gr.insert();
            }
            return;
        },
        del: function (name) {
            if (!name)
                return;

            var gr = new GlideRecord('sys_user_preference');
            gr.addQuery('user', gs.getUserID());
            gr.addQuery('name', name);
            gr._query();
            if (gr._next()) {
                return gr.deleteRecord();
            }
            return;
        }
    },

    /**
     * UpdateSet XML SOAP Web Service Endpoint
     * /api/devops/cicd/source/sys_update_xml
     * 
     * @param {*} requestXml 
     * @param {*} response 
     */
    updateSetXmlSoapWebService: function (requestXml, response) {
        var self = this;
        try {
            var payload = gs.xmlToJSON(requestXml);
            var body = payload['SOAP-ENV:Envelope']['SOAP-ENV:Body'];

            var funcName = Object.keys(body)[0];


            if ('getKeys' == funcName) {
                var commitId = body['getKeys']['update_set'];
                var aggregate = self._getUpdateSetXmlCount(commitId);
                /*
                    as the update-set sysId (commitId) is not sent to the XML api we 
                    have to keep it. unfortunately the client is not session aware, so put it into user prop..
                */
                self._chunkArray(aggregate.sys_id.split(','), 250).forEach(function (page, index) {
                    var md5 = new GlideChecksum(page.join(',')).getMD5();
                    self._preference.set(md5, commitId);
                    //self.console.log('SAVE TO SESSION:  - md5: ' + md5 + ' sysId: ' + commitId);
                });

                var resp = new XMLDocument("&lt;" + funcName + "Response/&gt;");
                resp.createElement("count", aggregate.count);
                resp.createElement("sys_id", aggregate.sys_id);
                response.soapResponseElement = resp.getDocumentElement();
                return;

            } else if ('getRecords' == funcName) {

                var body = body['getRecords'];
                var query = body['__encoded_query'];
                var xmlSysIds = null;
                if (query) {
                    var match = query.match(/^sys_idIN(.*)$/i);
                    if (match &amp;&amp; match[1]) {
                        xmlSysIds = match[1];
                    }
                }
                if (!xmlSysIds)
                    throw "No sys_id found in query";

                /*
                    get the commitId form the user prefs and delete it later.
                */
                var md5 = new GlideChecksum(xmlSysIds).getMD5();
                var commitId = self._preference.get(md5);

                self._preference.del(md5);

                //self.console.log("GET FROM SESSION. md5 " + md5 + ", sysid: " + commitId);
                //self.console.log("update-set sysId " + commitId);
                //self.console.log('XML QUERY ' + JSON.stringify(body));

                var resp = new XMLDocument("&lt;" + funcName + "Response&gt;" + self._getUpdateSetXml(commitId, xmlSysIds) + "&lt;/" + funcName + "Response&gt;");
                response.soapResponseElement = resp.getDocumentElement();
                return;
            }

        } catch (e) {
            self.console.error('updateSetXmlSoapWebService ' + e);
            response.e = e;
        }
    },

    /**
     * Connect to CICD Server and get the aggregate information about the update-set-xml records
     *  
     * @param {} commitId
     */
    _getUpdateSetXmlCount: function (commitId) {
        var self = this;

        var request = new sn_ws.RESTMessageV2();
        if (self.settings.throughMidServer) {
            if (gs.nil(self.settings.midServerName))
                throw 'MID Server not defined';
            request.setMIDServer(self.settings.midServerName);
        }

        //self.console.log('Settings {0}', JSON.stringify(self.settings));
        //self.console.log('commitId {0}', commitId);

        request.setEndpoint(self.settings.cicdServerExportURL.concat('/xml_count/', commitId));
        request.setRequestHeader("Accept", "application/json");
        request.setRequestHeader("Content-Type", "application/json");
        request.setHttpMethod('GET');


        var response = request.execute(); // Async somehow does not perform
        if (!response.haveError()) {
            try {
                var responseJson = JSON.parse(response.getBody());
                //self.console.log("successful - result is: {0}", JSON.stringify(responseJson));
                return responseJson;

            } catch (e) {
                self.console.error("JSON parsing failed. Text: {0}, Error:", response.getBody(), e);
                throw e;
            }
        } else {
            var statusCode = response.getStatusCode();
            self.console.error("request ended in error - StatusCode {0}, ResponseMessage: {1}, Endpoint: {2}, RequestBody: {3}", statusCode, response.getErrorMessage(), request.getEndpoint(), response.getBody());
            throw new Error(response.getErrorMessage());
        }
    },

    /**
     * Connect to CICD Server and get the update-set-xml records
     *  
     * @param {} sysId 
    */
    _getUpdateSetXml: function (commitId, xmlSysIds) {
        var self = this;

        var request = new sn_ws.RESTMessageV2();
        if (self.settings.throughMidServer) {
            if (gs.nil(self.settings.midServerName))
                throw 'MID Server not defined';
            request.setMIDServer(self.settings.midServerName);
        }

        //self.console.log('Settings {0}', JSON.stringify(self.settings));
        //self.console.log('commitId {0}', commitId);

        request.setEndpoint(self.settings.cicdServerExportURL.concat('/xml/'));
        request.setRequestHeader("Accept", "application/json");
        request.setRequestHeader("Content-Type", "application/json");
        request.setHttpMethod('POST');

        var body = {
            commitId: commitId,
            xmlSysIds: xmlSysIds
        };
        request.setRequestBody(JSON.stringify(body));

        var response = request.execute(); // Async somehow does not perform
        if (!response.haveError()) {
            try {
                var responseXML = response.getBody();
                //self.console.log("successful - result is: {0}", responseXML);
                return responseXML;

            } catch (e) {
                self.console.error("JSON parsing failed. Text: {0}, Error:", response.getBody(), e);
                throw e;
            }
        } else {
            var statusCode = response.getStatusCode();
            self.console.error("request ended in error - StatusCode {0}, ResponseMessage: {1}, Endpoint: {2}, RequestBody: {3}", statusCode, response.getErrorMessage(), request.getEndpoint(), JSON.stringify(body));
            throw new Error(response.getErrorMessage());
        }
    },


    /**
     * Get one active mid server
     * 
     * @returns {any} name
     */
    getMidServer: function () {
        var name = null;
        var mid = new GlideRecord('ecc_agent');
        mid.addQuery('status', 'Up');
        mid.setLimit(1);
        mid.query();
        if (mid._next()) {
            name = mid.name.toString();
        }
        return name;
    },

    type: 'CiCdSource'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-01-18 12:50:13&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;16e746c6dbcfef00ee93b14ffe96194c&lt;/sys_id&gt;&lt;sys_mod_count&gt;75&lt;/sys_mod_count&gt;&lt;sys_name&gt;CiCdSource&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_16e746c6dbcfef00ee93b14ffe96194c&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-06-12 09:19:35&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1400695949</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>2f902d4cdbf77b80ee93b14ffe96194a</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061e9a20000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CiCdSource</target_name>
<type>Script Include</type>
<update_domain/>
<update_guid>7527807437c6fb8004eac7e8847ae9a3</update_guid>
<update_guid_history>7527807437c6fb8004eac7e8847ae9a3:-1400695949,7927ccb81086fb808cc0ba10be95b187:-372456842</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ui_script_696cfd3937035a0044d3f25b34990e30</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ui_script"&gt;&lt;sys_ui_script action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;description&gt;Automatically comment source code&lt;/description&gt;&lt;global&gt;true&lt;/global&gt;&lt;name&gt;SnSmartComments&lt;/name&gt;&lt;script&gt;&lt;![CDATA[/**
 * Automatically comment JS code
 * 	Based on 
 * 	http://smartcomments.github.io/
 * 
 * @class 
 * @param {string} fieldName the name of the script field
 * @author Boris Moers
 */
function SnSmartComments(author, applicationScope, objectType) {
	author = author || '&lt;me&gt;';
	applicationScope = applicationScope || 'global';
	objectType = objectType || 'undefined';

	var smartcomments =  (function (){
		
		var esprima = (function () {
			var exports = {};
			(function (root, factory) {
				'use strict';

				// Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,
				// Rhino, and plain browser loading.
				if (typeof define === 'function' &amp;&amp; define.amd) {
					define(['exports'], factory);
				} else if (typeof exports !== 'undefined') {
					factory(exports);
				} else {
					factory((root.esprima = {}));
				}
			}(this, function (exports) {
				'use strict';

				var Token,
					TokenName,
					FnExprTokens,
					Syntax,
					PropertyKind,
					Messages,
					Regex,
					SyntaxTreeDelegate,
					source,
					strict,
					index,
					lineNumber,
					lineStart,
					length,
					delegate,
					lookahead,
					state,
					extra;

				Token = {
					BooleanLiteral: 1,
					EOF: 2,
					Identifier: 3,
					Keyword: 4,
					NullLiteral: 5,
					NumericLiteral: 6,
					Punctuator: 7,
					StringLiteral: 8,
					RegularExpression: 9
				};

				TokenName = {};
				TokenName[Token.BooleanLiteral] = 'Boolean';
				TokenName[Token.EOF] = '&lt;end&gt;';
				TokenName[Token.Identifier] = 'Identifier';
				TokenName[Token.Keyword] = 'Keyword';
				TokenName[Token.NullLiteral] = 'Null';
				TokenName[Token.NumericLiteral] = 'Numeric';
				TokenName[Token.Punctuator] = 'Punctuator';
				TokenName[Token.StringLiteral] = 'String';
				TokenName[Token.RegularExpression] = 'RegularExpression';

				// A function following one of those tokens is an expression.
				FnExprTokens = ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
					'return', 'case', 'delete', 'throw', 'void',
					// assignment operators
					'=', '+=', '-=', '*=', '/=', '%=', '&lt;&lt;=', '&gt;&gt;=', '&gt;&gt;&gt;=',
					'&amp;=', '|=', '^=', ',',
					// binary/unary operators
					'+', '-', '*', '/', '%', '++', '--', '&lt;&lt;', '&gt;&gt;', '&gt;&gt;&gt;', '&amp;',
					'|', '^', '!', '~', '&amp;&amp;', '||', '?', ':', '===', '==', '&gt;=',
					'&lt;=', '&lt;', '&gt;', '!=', '!=='];

				Syntax = {
					AssignmentExpression: 'AssignmentExpression',
					ArrayExpression: 'ArrayExpression',
					BlockStatement: 'BlockStatement',
					BinaryExpression: 'BinaryExpression',
					BreakStatement: 'BreakStatement',
					CallExpression: 'CallExpression',
					CatchClause: 'CatchClause',
					ConditionalExpression: 'ConditionalExpression',
					ContinueStatement: 'ContinueStatement',
					DoWhileStatement: 'DoWhileStatement',
					DebuggerStatement: 'DebuggerStatement',
					EmptyStatement: 'EmptyStatement',
					ExpressionStatement: 'ExpressionStatement',
					ForStatement: 'ForStatement',
					ForInStatement: 'ForInStatement',
					FunctionDeclaration: 'FunctionDeclaration',
					FunctionExpression: 'FunctionExpression',
					Identifier: 'Identifier',
					IfStatement: 'IfStatement',
					Literal: 'Literal',
					LabeledStatement: 'LabeledStatement',
					LogicalExpression: 'LogicalExpression',
					MemberExpression: 'MemberExpression',
					NewExpression: 'NewExpression',
					ObjectExpression: 'ObjectExpression',
					Program: 'Program',
					Property: 'Property',
					ReturnStatement: 'ReturnStatement',
					SequenceExpression: 'SequenceExpression',
					SwitchStatement: 'SwitchStatement',
					SwitchCase: 'SwitchCase',
					ThisExpression: 'ThisExpression',
					ThrowStatement: 'ThrowStatement',
					TryStatement: 'TryStatement',
					UnaryExpression: 'UnaryExpression',
					UpdateExpression: 'UpdateExpression',
					VariableDeclaration: 'VariableDeclaration',
					VariableDeclarator: 'VariableDeclarator',
					WhileStatement: 'WhileStatement',
					WithStatement: 'WithStatement'
				};

				PropertyKind = {
					Data: 1,
					Get: 2,
					Set: 4
				};

				// Error messages should be identical to V8.
				Messages = {
					UnexpectedToken: 'Unexpected token %0',
					UnexpectedNumber: 'Unexpected number',
					UnexpectedString: 'Unexpected string',
					UnexpectedIdentifier: 'Unexpected identifier',
					UnexpectedReserved: 'Unexpected reserved word',
					UnexpectedEOS: 'Unexpected end of input',
					NewlineAfterThrow: 'Illegal newline after throw',
					InvalidRegExp: 'Invalid regular expression',
					UnterminatedRegExp: 'Invalid regular expression: missing /',
					InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
					InvalidLHSInForIn: 'Invalid left-hand side in for-in',
					MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
					NoCatchOrFinally: 'Missing catch or finally after try',
					UnknownLabel: 'Undefined label \'%0\'',
					Redeclaration: '%0 \'%1\' has already been declared',
					IllegalContinue: 'Illegal continue statement',
					IllegalBreak: 'Illegal break statement',
					IllegalReturn: 'Illegal return statement',
					StrictModeWith: 'Strict mode code may not include a with statement',
					StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
					StrictVarName: 'Variable name may not be eval or arguments in strict mode',
					StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
					StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
					StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
					StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
					StrictDelete: 'Delete of an unqualified identifier in strict mode.',
					StrictDuplicateProperty: 'Duplicate data property in object literal not allowed in strict mode',
					AccessorDataProperty: 'Object literal may not have data and accessor property with the same name',
					AccessorGetSet: 'Object literal may not have multiple get/set accessors with the same name',
					StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
					StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
					StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
					StrictReservedWord: 'Use of future reserved word in strict mode'
				};

				// See also tools/generate-unicode-regex.py.
				Regex = {
					NonAsciiIdentifierStart: new RegExp('[\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0\u08a2-\u08ac\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097f\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d\u0c58\u0c59\u0c60\u0c61\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d60\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191c\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19c1-\u19c7\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2e2f\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua697\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa80-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]'),
					NonAsciiIdentifierPart: new RegExp('[\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0300-\u0374\u0376\u0377\u037a-\u037d\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u0483-\u0487\u048a-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u05d0-\u05ea\u05f0-\u05f2\u0610-\u061a\u0620-\u0669\u066e-\u06d3\u06d5-\u06dc\u06df-\u06e8\u06ea-\u06fc\u06ff\u0710-\u074a\u074d-\u07b1\u07c0-\u07f5\u07fa\u0800-\u082d\u0840-\u085b\u08a0\u08a2-\u08ac\u08e4-\u08fe\u0900-\u0963\u0966-\u096f\u0971-\u0977\u0979-\u097f\u0981-\u0983\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bc-\u09c4\u09c7\u09c8\u09cb-\u09ce\u09d7\u09dc\u09dd\u09df-\u09e3\u09e6-\u09f1\u0a01-\u0a03\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a59-\u0a5c\u0a5e\u0a66-\u0a75\u0a81-\u0a83\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abc-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ad0\u0ae0-\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3c-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b5c\u0b5d\u0b5f-\u0b63\u0b66-\u0b6f\u0b71\u0b82\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd0\u0bd7\u0be6-\u0bef\u0c01-\u0c03\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c33\u0c35-\u0c39\u0c3d-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c58\u0c59\u0c60-\u0c63\u0c66-\u0c6f\u0c82\u0c83\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbc-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0cde\u0ce0-\u0ce3\u0ce6-\u0cef\u0cf1\u0cf2\u0d02\u0d03\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d-\u0d44\u0d46-\u0d48\u0d4a-\u0d4e\u0d57\u0d60-\u0d63\u0d66-\u0d6f\u0d7a-\u0d7f\u0d82\u0d83\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0df2\u0df3\u0e01-\u0e3a\u0e40-\u0e4e\u0e50-\u0e59\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb9\u0ebb-\u0ebd\u0ec0-\u0ec4\u0ec6\u0ec8-\u0ecd\u0ed0-\u0ed9\u0edc-\u0edf\u0f00\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e-\u0f47\u0f49-\u0f6c\u0f71-\u0f84\u0f86-\u0f97\u0f99-\u0fbc\u0fc6\u1000-\u1049\u1050-\u109d\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u135d-\u135f\u1380-\u138f\u13a0-\u13f4\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f0\u1700-\u170c\u170e-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176c\u176e-\u1770\u1772\u1773\u1780-\u17d3\u17d7\u17dc\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u1820-\u1877\u1880-\u18aa\u18b0-\u18f5\u1900-\u191c\u1920-\u192b\u1930-\u193b\u1946-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u19d0-\u19d9\u1a00-\u1a1b\u1a20-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1aa7\u1b00-\u1b4b\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1bf3\u1c00-\u1c37\u1c40-\u1c49\u1c4d-\u1c7d\u1cd0-\u1cd2\u1cd4-\u1cf6\u1d00-\u1de6\u1dfc-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u200c\u200d\u203f\u2040\u2054\u2071\u207f\u2090-\u209c\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2102\u2107\u210a-\u2113\u2115\u2119-\u211d\u2124\u2126\u2128\u212a-\u212d\u212f-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d7f-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u2de0-\u2dff\u2e2f\u3005-\u3007\u3021-\u302f\u3031-\u3035\u3038-\u303c\u3041-\u3096\u3099\u309a\u309d-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fcc\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua62b\ua640-\ua66f\ua674-\ua67d\ua67f-\ua697\ua69f-\ua6f1\ua717-\ua71f\ua722-\ua788\ua78b-\ua78e\ua790-\ua793\ua7a0-\ua7aa\ua7f8-\ua827\ua840-\ua873\ua880-\ua8c4\ua8d0-\ua8d9\ua8e0-\ua8f7\ua8fb\ua900-\ua92d\ua930-\ua953\ua960-\ua97c\ua980-\ua9c0\ua9cf-\ua9d9\uaa00-\uaa36\uaa40-\uaa4d\uaa50-\uaa59\uaa60-\uaa76\uaa7a\uaa7b\uaa80-\uaac2\uaadb-\uaadd\uaae0-\uaaef\uaaf2-\uaaf6\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uabc0-\uabea\uabec\uabed\uabf0-\uabf9\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe00-\ufe0f\ufe20-\ufe26\ufe33\ufe34\ufe4d-\ufe4f\ufe70-\ufe74\ufe76-\ufefc\uff10-\uff19\uff21-\uff3a\uff3f\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc]')
				};

				// Ensure the condition is true, otherwise throw an error.
				// This is only to have a better contract semantic, i.e. another safety net
				// to catch a logic error. The condition shall be fulfilled in normal case.
				// Do NOT use this to enforce a certain condition on any user input.

				function assert(condition, message) {
					if (!condition) {
						throw new Error('ASSERT: ' + message);
					}
				}

				function isDecimalDigit(ch) {
					return (ch &gt;= 48 &amp;&amp; ch &lt;= 57);   // 0..9
				}

				function isHexDigit(ch) {
					return '0123456789abcdefABCDEF'.indexOf(ch) &gt;= 0;
				}

				function isOctalDigit(ch) {
					return '01234567'.indexOf(ch) &gt;= 0;
				}


				// 7.2 White Space

				function isWhiteSpace(ch) {
					return (ch === 32) ||  // space
						(ch === 9) ||      // tab
						(ch === 0xB) ||
						(ch === 0xC) ||
						(ch === 0xA0) ||
						(ch &gt;= 0x1680 &amp;&amp; '\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\uFEFF'.indexOf(String.fromCharCode(ch)) &gt; 0);
				}

				// 7.3 Line Terminators

				function isLineTerminator(ch) {
					return (ch === 10) || (ch === 13) || (ch === 0x2028) || (ch === 0x2029);
				}

				// 7.6 Identifier Names and Identifiers

				function isIdentifierStart(ch) {
					return (ch === 36) || (ch === 95) ||  // $ (dollar) and _ (underscore)
						(ch &gt;= 65 &amp;&amp; ch &lt;= 90) ||         // A..Z
						(ch &gt;= 97 &amp;&amp; ch &lt;= 122) ||        // a..z
						(ch === 92) ||                    // \ (backslash)
						((ch &gt;= 0x80) &amp;&amp; Regex.NonAsciiIdentifierStart.test(String.fromCharCode(ch)));
				}

				function isIdentifierPart(ch) {
					return (ch === 36) || (ch === 95) ||  // $ (dollar) and _ (underscore)
						(ch &gt;= 65 &amp;&amp; ch &lt;= 90) ||         // A..Z
						(ch &gt;= 97 &amp;&amp; ch &lt;= 122) ||        // a..z
						(ch &gt;= 48 &amp;&amp; ch &lt;= 57) ||         // 0..9
						(ch === 92) ||                    // \ (backslash)
						((ch &gt;= 0x80) &amp;&amp; Regex.NonAsciiIdentifierPart.test(String.fromCharCode(ch)));
				}

				// 7.6.1.2 Future Reserved Words

				function isFutureReservedWord(id) {
					switch (id) {
						case 'class':
						case 'enum':
						case 'export':
						case 'extends':
						case 'import':
						case 'super':
							return true;
						default:
							return false;
					}
				}

				function isStrictModeReservedWord(id) {
					switch (id) {
						case 'implements':
						case 'interface':
						case 'package':
						case 'private':
						case 'protected':
						case 'public':
						case 'static':
						case 'yield':
						case 'let':
							return true;
						default:
							return false;
					}
				}

				function isRestrictedWord(id) {
					return id === 'eval' || id === 'arguments';
				}

				// 7.6.1.1 Keywords

				function isKeyword(id) {
					if (strict &amp;&amp; isStrictModeReservedWord(id)) {
						return true;
					}

					// 'const' is specialized as Keyword in V8.
					// 'yield' and 'let' are for compatiblity with SpiderMonkey and ES.next.
					// Some others are from future reserved words.

					switch (id.length) {
						case 2:
							return (id === 'if') || (id === 'in') || (id === 'do');
						case 3:
							return (id === 'var') || (id === 'for') || (id === 'new') ||
								(id === 'try') || (id === 'let');
						case 4:
							return (id === 'this') || (id === 'else') || (id === 'case') ||
								(id === 'void') || (id === 'with') || (id === 'enum');
						case 5:
							return (id === 'while') || (id === 'break') || (id === 'catch') ||
								(id === 'throw') || (id === 'const') || (id === 'yield') ||
								(id === 'class') || (id === 'super');
						case 6:
							return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
								(id === 'switch') || (id === 'export') || (id === 'import');
						case 7:
							return (id === 'default') || (id === 'finally') || (id === 'extends');
						case 8:
							return (id === 'function') || (id === 'continue') || (id === 'debugger');
						case 10:
							return (id === 'instanceof');
						default:
							return false;
					}
				}

				// 7.4 Comments

				function addComment(type, value, start, end, loc) {
					var comment;

					assert(typeof start === 'number', 'Comment must have valid position');

					// Because the way the actual token is scanned, often the comments
					// (if any) are skipped twice during the lexical analysis.
					// Thus, we need to skip adding a comment if the comment array already
					// handled it.
					if (state.lastCommentStart &gt;= start) {
						return;
					}
					state.lastCommentStart = start;

					comment = {
						type: type,
						value: value
					};
					if (extra.range) {
						comment.range = [start, end];
					}
					if (extra.loc) {
						comment.loc = loc;
					}
					extra.comments.push(comment);
				}

				function skipSingleLineComment() {
					var start, loc, ch, comment;

					start = index - 2;
					loc = {
						start: {
							line: lineNumber,
							column: index - lineStart - 2
						}
					};

					while (index &lt; length) {
						ch = source.charCodeAt(index);
						++index;
						if (isLineTerminator(ch)) {
							if (extra.comments) {
								comment = source.slice(start + 2, index - 1);
								loc.end = {
									line: lineNumber,
									column: index - lineStart - 1
								};
								addComment('Line', comment, start, index - 1, loc);
							}
							if (ch === 13 &amp;&amp; source.charCodeAt(index) === 10) {
								++index;
							}
							++lineNumber;
							lineStart = index;
							return;
						}
					}

					if (extra.comments) {
						comment = source.slice(start + 2, index);
						loc.end = {
							line: lineNumber,
							column: index - lineStart
						};
						addComment('Line', comment, start, index, loc);
					}
				}

				function skipMultiLineComment() {
					var start, loc, ch, comment;

					if (extra.comments) {
						start = index - 2;
						loc = {
							start: {
								line: lineNumber,
								column: index - lineStart - 2
							}
						};
					}

					while (index &lt; length) {
						ch = source.charCodeAt(index);
						if (isLineTerminator(ch)) {
							if (ch === 13 &amp;&amp; source.charCodeAt(index + 1) === 10) {
								++index;
							}
							++lineNumber;
							++index;
							lineStart = index;
							if (index &gt;= length) {
								throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
							}
						} else if (ch === 42) {
							// Block comment ends with '*/' (char #42, char #47).
							if (source.charCodeAt(index + 1) === 47) {
								++index;
								++index;
								if (extra.comments) {
									comment = source.slice(start + 2, index - 2);
									loc.end = {
										line: lineNumber,
										column: index - lineStart
									};
									addComment('Block', comment, start, index, loc);
								}
								return;
							}
							++index;
						} else {
							++index;
						}
					}

					throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
				}

				function skipComment() {
					var ch;

					while (index &lt; length) {
						ch = source.charCodeAt(index);

						if (isWhiteSpace(ch)) {
							++index;
						} else if (isLineTerminator(ch)) {
							++index;
							if (ch === 13 &amp;&amp; source.charCodeAt(index) === 10) {
								++index;
							}
							++lineNumber;
							lineStart = index;
						} else if (ch === 47) { // 47 is '/'
							ch = source.charCodeAt(index + 1);
							if (ch === 47) {
								++index;
								++index;
								skipSingleLineComment();
							} else if (ch === 42) {  // 42 is '*'
								++index;
								++index;
								skipMultiLineComment();
							} else {
								break;
							}
						} else if (ch === 60) { // 60 is '&lt;'
							if (source.slice(index + 1, index + 4) === '!--') {
								++index; // `&lt;`
								++index; // `!`
								++index; // `-`
								++index; // `-`
								skipSingleLineComment();
							} else {
								break;
							}
						} else {
							break;
						}
					}
				}

				function scanHexEscape(prefix) {
					var i, len, ch, code = 0;

					len = (prefix === 'u') ? 4 : 2;
					for (i = 0; i &lt; len; ++i) {
						if (index &lt; length &amp;&amp; isHexDigit(source[index])) {
							ch = source[index++];
							code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
						} else {
							return '';
						}
					}
					return String.fromCharCode(code);
				}

				function getEscapedIdentifier() {
					var ch, id;

					ch = source.charCodeAt(index++);
					id = String.fromCharCode(ch);

					// '\u' (char #92, char #117) denotes an escaped character.
					if (ch === 92) {
						if (source.charCodeAt(index) !== 117) {
							throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
						}
						++index;
						ch = scanHexEscape('u');
						if (!ch || ch === '\\' || !isIdentifierStart(ch.charCodeAt(0))) {
							throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
						}
						id = ch;
					}

					while (index &lt; length) {
						ch = source.charCodeAt(index);
						if (!isIdentifierPart(ch)) {
							break;
						}
						++index;
						id += String.fromCharCode(ch);

						// '\u' (char #92, char #117) denotes an escaped character.
						if (ch === 92) {
							id = id.substr(0, id.length - 1);
							if (source.charCodeAt(index) !== 117) {
								throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
							}
							++index;
							ch = scanHexEscape('u');
							if (!ch || ch === '\\' || !isIdentifierPart(ch.charCodeAt(0))) {
								throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
							}
							id += ch;
						}
					}

					return id;
				}

				function getIdentifier() {
					var start, ch;

					start = index++;
					while (index &lt; length) {
						ch = source.charCodeAt(index);
						if (ch === 92) {
							// Blackslash (char #92) marks Unicode escape sequence.
							index = start;
							return getEscapedIdentifier();
						}
						if (isIdentifierPart(ch)) {
							++index;
						} else {
							break;
						}
					}

					return source.slice(start, index);
				}

				function scanIdentifier() {
					var start, id, type;

					start = index;

					// Backslash (char #92) starts an escaped character.
					id = (source.charCodeAt(index) === 92) ? getEscapedIdentifier() : getIdentifier();

					// There is no keyword or literal with only one character.
					// Thus, it must be an identifier.
					if (id.length === 1) {
						type = Token.Identifier;
					} else if (isKeyword(id)) {
						type = Token.Keyword;
					} else if (id === 'null') {
						type = Token.NullLiteral;
					} else if (id === 'true' || id === 'false') {
						type = Token.BooleanLiteral;
					} else {
						type = Token.Identifier;
					}

					return {
						type: type,
						value: id,
						lineNumber: lineNumber,
						lineStart: lineStart,
						range: [start, index]
					};
				}


				// 7.7 Punctuators

				function scanPunctuator() {
					var start = index,
						code = source.charCodeAt(index),
						code2,
						ch1 = source[index],
						ch2,
						ch3,
						ch4;

					switch (code) {

						// Check for most common single-character punctuators.
						case 46:   // . dot
						case 40:   // ( open bracket
						case 41:   // ) close bracket
						case 59:   // ; semicolon
						case 44:   // , comma
						case 123:  // { open curly brace
						case 125:  // } close curly brace
						case 91:   // [
						case 93:   // ]
						case 58:   // :
						case 63:   // ?
						case 126:  // ~
							++index;
							if (extra.tokenize) {
								if (code === 40) {
									extra.openParenToken = extra.tokens.length;
								} else if (code === 123) {
									extra.openCurlyToken = extra.tokens.length;
								}
							}
							return {
								type: Token.Punctuator,
								value: String.fromCharCode(code),
								lineNumber: lineNumber,
								lineStart: lineStart,
								range: [start, index]
							};

						default:
							code2 = source.charCodeAt(index + 1);

							// '=' (char #61) marks an assignment or comparison operator.
							if (code2 === 61) {
								switch (code) {
									case 37:  // %
									case 38:  // &amp;
									case 42:  // *:
									case 43:  // +
									case 45:  // -
									case 47:  // /
									case 60:  // &lt;
									case 62:  // &gt;
									case 94:  // ^
									case 124: // |
										index += 2;
										return {
											type: Token.Punctuator,
											value: String.fromCharCode(code) + String.fromCharCode(code2),
											lineNumber: lineNumber,
											lineStart: lineStart,
											range: [start, index]
										};

									case 33: // !
									case 61: // =
										index += 2;

										// !== and ===
										if (source.charCodeAt(index) === 61) {
											++index;
										}
										return {
											type: Token.Punctuator,
											value: source.slice(start, index),
											lineNumber: lineNumber,
											lineStart: lineStart,
											range: [start, index]
										};
									default:
										break;
								}
							}
							break;
					}

					// Peek more characters.

					ch2 = source[index + 1];
					ch3 = source[index + 2];
					ch4 = source[index + 3];

					// 4-character punctuator: &gt;&gt;&gt;=

					if (ch1 === '&gt;' &amp;&amp; ch2 === '&gt;' &amp;&amp; ch3 === '&gt;') {
						if (ch4 === '=') {
							index += 4;
							return {
								type: Token.Punctuator,
								value: '&gt;&gt;&gt;=',
								lineNumber: lineNumber,
								lineStart: lineStart,
								range: [start, index]
							};
						}
					}

					// 3-character punctuators: === !== &gt;&gt;&gt; &lt;&lt;= &gt;&gt;=

					if (ch1 === '&gt;' &amp;&amp; ch2 === '&gt;' &amp;&amp; ch3 === '&gt;') {
						index += 3;
						return {
							type: Token.Punctuator,
							value: '&gt;&gt;&gt;',
							lineNumber: lineNumber,
							lineStart: lineStart,
							range: [start, index]
						};
					}

					if (ch1 === '&lt;' &amp;&amp; ch2 === '&lt;' &amp;&amp; ch3 === '=') {
						index += 3;
						return {
							type: Token.Punctuator,
							value: '&lt;&lt;=',
							lineNumber: lineNumber,
							lineStart: lineStart,
							range: [start, index]
						};
					}

					if (ch1 === '&gt;' &amp;&amp; ch2 === '&gt;' &amp;&amp; ch3 === '=') {
						index += 3;
						return {
							type: Token.Punctuator,
							value: '&gt;&gt;=',
							lineNumber: lineNumber,
							lineStart: lineStart,
							range: [start, index]
						};
					}

					// Other 2-character punctuators: ++ -- &lt;&lt; &gt;&gt; &amp;&amp; ||

					if (ch1 === ch2 &amp;&amp; ('+-&lt;&gt;&amp;|'.indexOf(ch1) &gt;= 0)) {
						index += 2;
						return {
							type: Token.Punctuator,
							value: ch1 + ch2,
							lineNumber: lineNumber,
							lineStart: lineStart,
							range: [start, index]
						};
					}

					if ('&lt;&gt;=!+-*%&amp;|^/'.indexOf(ch1) &gt;= 0) {
						++index;
						return {
							type: Token.Punctuator,
							value: ch1,
							lineNumber: lineNumber,
							lineStart: lineStart,
							range: [start, index]
						};
					}

					throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
				}

				// 7.8.3 Numeric Literals

				function scanHexLiteral(start) {
					var number = '';

					while (index &lt; length) {
						if (!isHexDigit(source[index])) {
							break;
						}
						number += source[index++];
					}

					if (number.length === 0) {
						throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
					}

					if (isIdentifierStart(source.charCodeAt(index))) {
						throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
					}

					return {
						type: Token.NumericLiteral,
						value: parseInt('0x' + number, 16),
						lineNumber: lineNumber,
						lineStart: lineStart,
						range: [start, index]
					};
				}

				function scanOctalLiteral(start) {
					var number = '0' + source[index++];
					while (index &lt; length) {
						if (!isOctalDigit(source[index])) {
							break;
						}
						number += source[index++];
					}

					if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {
						throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
					}

					return {
						type: Token.NumericLiteral,
						value: parseInt(number, 8),
						octal: true,
						lineNumber: lineNumber,
						lineStart: lineStart,
						range: [start, index]
					};
				}

				function scanNumericLiteral() {
					var number, start, ch;

					ch = source[index];
					assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),
						'Numeric literal must start with a decimal digit or a decimal point');

					start = index;
					number = '';
					if (ch !== '.') {
						number = source[index++];
						ch = source[index];

						// Hex number starts with '0x'.
						// Octal number starts with '0'.
						if (number === '0') {
							if (ch === 'x' || ch === 'X') {
								++index;
								return scanHexLiteral(start);
							}
							if (isOctalDigit(ch)) {
								return scanOctalLiteral(start);
							}

							// decimal number starts with '0' such as '09' is illegal.
							if (ch &amp;&amp; isDecimalDigit(ch.charCodeAt(0))) {
								throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
							}
						}

						while (isDecimalDigit(source.charCodeAt(index))) {
							number += source[index++];
						}
						ch = source[index];
					}

					if (ch === '.') {
						number += source[index++];
						while (isDecimalDigit(source.charCodeAt(index))) {
							number += source[index++];
						}
						ch = source[index];
					}

					if (ch === 'e' || ch === 'E') {
						number += source[index++];

						ch = source[index];
						if (ch === '+' || ch === '-') {
							number += source[index++];
						}
						if (isDecimalDigit(source.charCodeAt(index))) {
							while (isDecimalDigit(source.charCodeAt(index))) {
								number += source[index++];
							}
						} else {
							throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
						}
					}

					if (isIdentifierStart(source.charCodeAt(index))) {
						throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
					}

					return {
						type: Token.NumericLiteral,
						value: parseFloat(number),
						lineNumber: lineNumber,
						lineStart: lineStart,
						range: [start, index]
					};
				}

				// 7.8.4 String Literals

				function scanStringLiteral() {
					var str = '', quote, start, ch, code, unescaped, restore, octal = false;

					quote = source[index];
					assert((quote === '\'' || quote === '"'),
						'String literal must starts with a quote');

					start = index;
					++index;

					while (index &lt; length) {
						ch = source[index++];

						if (ch === quote) {
							quote = '';
							break;
						} else if (ch === '\\') {
							ch = source[index++];
							if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
								switch (ch) {
									case 'n':
										str += '\n';
										break;
									case 'r':
										str += '\r';
										break;
									case 't':
										str += '\t';
										break;
									case 'u':
									case 'x':
										restore = index;
										unescaped = scanHexEscape(ch);
										if (unescaped) {
											str += unescaped;
										} else {
											index = restore;
											str += ch;
										}
										break;
									case 'b':
										str += '\b';
										break;
									case 'f':
										str += '\f';
										break;
									case 'v':
										str += '\x0B';
										break;

									default:
										if (isOctalDigit(ch)) {
											code = '01234567'.indexOf(ch);

											// \0 is not octal escape sequence
											if (code !== 0) {
												octal = true;
											}

											if (index &lt; length &amp;&amp; isOctalDigit(source[index])) {
												octal = true;
												code = code * 8 + '01234567'.indexOf(source[index++]);

												// 3 digits are only allowed when string starts
												// with 0, 1, 2, 3
												if ('0123'.indexOf(ch) &gt;= 0 &amp;&amp;
													index &lt; length &amp;&amp;
													isOctalDigit(source[index])) {
													code = code * 8 + '01234567'.indexOf(source[index++]);
												}
											}
											str += String.fromCharCode(code);
										} else {
											str += ch;
										}
										break;
								}
							} else {
								++lineNumber;
								if (ch === '\r' &amp;&amp; source[index] === '\n') {
									++index;
								}
							}
						} else if (isLineTerminator(ch.charCodeAt(0))) {
							break;
						} else {
							str += ch;
						}
					}

					if (quote !== '') {
						throwError({}, Messages.UnexpectedToken, 'ILLEGAL');
					}

					return {
						type: Token.StringLiteral,
						value: str,
						octal: octal,
						lineNumber: lineNumber,
						lineStart: lineStart,
						range: [start, index]
					};
				}

				function scanRegExp() {
					var str, ch, start, pattern, flags, value, classMarker = false, restore, terminated = false;

					lookahead = null;
					skipComment();

					start = index;
					ch = source[index];
					assert(ch === '/', 'Regular expression literal must start with a slash');
					str = source[index++];

					while (index &lt; length) {
						ch = source[index++];
						str += ch;
						if (ch === '\\') {
							ch = source[index++];
							// ECMA-262 7.8.5
							if (isLineTerminator(ch.charCodeAt(0))) {
								throwError({}, Messages.UnterminatedRegExp);
							}
							str += ch;
						} else if (classMarker) {
							if (ch === ']') {
								classMarker = false;
							}
						} else {
							if (ch === '/') {
								terminated = true;
								break;
							} else if (ch === '[') {
								classMarker = true;
							} else if (isLineTerminator(ch.charCodeAt(0))) {
								throwError({}, Messages.UnterminatedRegExp);
							}
						}
					}

					if (!terminated) {
						throwError({}, Messages.UnterminatedRegExp);
					}

					// Exclude leading and trailing slash.
					pattern = str.substr(1, str.length - 2);

					flags = '';
					while (index &lt; length) {
						ch = source[index];
						if (!isIdentifierPart(ch.charCodeAt(0))) {
							break;
						}

						++index;
						if (ch === '\\' &amp;&amp; index &lt; length) {
							ch = source[index];
							if (ch === 'u') {
								++index;
								restore = index;
								ch = scanHexEscape('u');
								if (ch) {
									flags += ch;
									for (str += '\\u'; restore &lt; index; ++restore) {
										str += source[restore];
									}
								} else {
									index = restore;
									flags += 'u';
									str += '\\u';
								}
							} else {
								str += '\\';
							}
						} else {
							flags += ch;
							str += ch;
						}
					}

					try {
						value = new RegExp(pattern, flags);
					} catch (e) {
						throwError({}, Messages.InvalidRegExp);
					}

					peek();


					if (extra.tokenize) {
						return {
							type: Token.RegularExpression,
							value: value,
							lineNumber: lineNumber,
							lineStart: lineStart,
							range: [start, index]
						};
					}
					return {
						literal: str,
						value: value,
						range: [start, index]
					};
				}

				function collectRegex() {
					var pos, loc, regex, token;

					skipComment();

					pos = index;
					loc = {
						start: {
							line: lineNumber,
							column: index - lineStart
						}
					};

					regex = scanRegExp();
					loc.end = {
						line: lineNumber,
						column: index - lineStart
					};

					if (!extra.tokenize) {
						// Pop the previous token, which is likely '/' or '/='
						if (extra.tokens.length &gt; 0) {
							token = extra.tokens[extra.tokens.length - 1];
							if (token.range[0] === pos &amp;&amp; token.type === 'Punctuator') {
								if (token.value === '/' || token.value === '/=') {
									extra.tokens.pop();
								}
							}
						}

						extra.tokens.push({
							type: 'RegularExpression',
							value: regex.literal,
							range: [pos, index],
							loc: loc
						});
					}

					return regex;
				}

				function isIdentifierName(token) {
					return token.type === Token.Identifier ||
						token.type === Token.Keyword ||
						token.type === Token.BooleanLiteral ||
						token.type === Token.NullLiteral;
				}

				function advanceSlash() {
					var prevToken,
						checkToken;
					// Using the following algorithm:
					// https://github.com/mozilla/sweet.js/wiki/design
					prevToken = extra.tokens[extra.tokens.length - 1];
					if (!prevToken) {
						// Nothing before that: it cannot be a division.
						return collectRegex();
					}
					if (prevToken.type === 'Punctuator') {
						if (prevToken.value === ')') {
							checkToken = extra.tokens[extra.openParenToken - 1];
							if (checkToken &amp;&amp;
								checkToken.type === 'Keyword' &amp;&amp;
								(checkToken.value === 'if' ||
									checkToken.value === 'while' ||
									checkToken.value === 'for' ||
									checkToken.value === 'with')) {
								return collectRegex();
							}
							return scanPunctuator();
						}
						if (prevToken.value === '}') {
							// Dividing a function by anything makes little sense,
							// but we have to check for that.
							if (extra.tokens[extra.openCurlyToken - 3] &amp;&amp;
								extra.tokens[extra.openCurlyToken - 3].type === 'Keyword') {
								// Anonymous function.
								checkToken = extra.tokens[extra.openCurlyToken - 4];
								if (!checkToken) {
									return scanPunctuator();
								}
							} else if (extra.tokens[extra.openCurlyToken - 4] &amp;&amp;
								extra.tokens[extra.openCurlyToken - 4].type === 'Keyword') {
								// Named function.
								checkToken = extra.tokens[extra.openCurlyToken - 5];
								if (!checkToken) {
									return collectRegex();
								}
							} else {
								return scanPunctuator();
							}
							// checkToken determines whether the function is
							// a declaration or an expression.
							if (FnExprTokens.indexOf(checkToken.value) &gt;= 0) {
								// It is an expression.
								return scanPunctuator();
							}
							// It is a declaration.
							return collectRegex();
						}
						return collectRegex();
					}
					if (prevToken.type === 'Keyword') {
						return collectRegex();
					}
					return scanPunctuator();
				}

				function advance() {
					var ch;

					skipComment();

					if (index &gt;= length) {
						return {
							type: Token.EOF,
							lineNumber: lineNumber,
							lineStart: lineStart,
							range: [index, index]
						};
					}

					ch = source.charCodeAt(index);

					// Very common: ( and ) and ;
					if (ch === 40 || ch === 41 || ch === 58) {
						return scanPunctuator();
					}

					// String literal starts with single quote (#39) or double quote (#34).
					if (ch === 39 || ch === 34) {
						return scanStringLiteral();
					}

					if (isIdentifierStart(ch)) {
						return scanIdentifier();
					}

					// Dot (.) char #46 can also start a floating-point number, hence the need
					// to check the next character.
					if (ch === 46) {
						if (isDecimalDigit(source.charCodeAt(index + 1))) {
							return scanNumericLiteral();
						}
						return scanPunctuator();
					}

					if (isDecimalDigit(ch)) {
						return scanNumericLiteral();
					}

					// Slash (/) char #47 can also start a regex.
					if (extra.tokenize &amp;&amp; ch === 47) {
						return advanceSlash();
					}

					return scanPunctuator();
				}

				function collectToken() {
					var start, loc, token, range, value;

					skipComment();
					start = index;
					loc = {
						start: {
							line: lineNumber,
							column: index - lineStart
						}
					};

					token = advance();
					loc.end = {
						line: lineNumber,
						column: index - lineStart
					};

					if (token.type !== Token.EOF) {
						range = [token.range[0], token.range[1]];
						value = source.slice(token.range[0], token.range[1]);
						extra.tokens.push({
							type: TokenName[token.type],
							value: value,
							range: range,
							loc: loc
						});
					}

					return token;
				}

				function lex() {
					var token;

					token = lookahead;
					index = token.range[1];
					lineNumber = token.lineNumber;
					lineStart = token.lineStart;

					lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();

					index = token.range[1];
					lineNumber = token.lineNumber;
					lineStart = token.lineStart;

					return token;
				}

				function peek() {
					var pos, line, start;

					pos = index;
					line = lineNumber;
					start = lineStart;
					lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();
					index = pos;
					lineNumber = line;
					lineStart = start;
				}

				SyntaxTreeDelegate = {

					name: 'SyntaxTree',

					markStart: function () {
						if (extra.loc) {
							state.markerStack.push(index - lineStart);
							state.markerStack.push(lineNumber);
						}
						if (extra.range) {
							state.markerStack.push(index);
						}
					},

					markEnd: function (node) {
						if (extra.range) {
							node.range = [state.markerStack.pop(), index];
						}
						if (extra.loc) {
							node.loc = {
								start: {
									line: state.markerStack.pop(),
									column: state.markerStack.pop()
								},
								end: {
									line: lineNumber,
									column: index - lineStart
								}
							};
							this.postProcess(node);
						}
						return node;
					},

					markEndIf: function (node) {
						if (node.range || node.loc) {
							if (extra.loc) {
								state.markerStack.pop();
								state.markerStack.pop();
							}
							if (extra.range) {
								state.markerStack.pop();
							}
						} else {
							this.markEnd(node);
						}
						return node;
					},

					postProcess: function (node) {
						if (extra.source) {
							node.loc.source = extra.source;
						}
						return node;
					},

					createArrayExpression: function (elements) {
						return {
							type: Syntax.ArrayExpression,
							elements: elements
						};
					},

					createAssignmentExpression: function (operator, left, right) {
						return {
							type: Syntax.AssignmentExpression,
							operator: operator,
							left: left,
							right: right
						};
					},

					createBinaryExpression: function (operator, left, right) {
						var type = (operator === '||' || operator === '&amp;&amp;') ? Syntax.LogicalExpression :
							Syntax.BinaryExpression;
						return {
							type: type,
							operator: operator,
							left: left,
							right: right
						};
					},

					createBlockStatement: function (body) {
						return {
							type: Syntax.BlockStatement,
							body: body
						};
					},

					createBreakStatement: function (label) {
						return {
							type: Syntax.BreakStatement,
							label: label
						};
					},

					createCallExpression: function (callee, args) {
						return {
							type: Syntax.CallExpression,
							callee: callee,
							'arguments': args
						};
					},

					createCatchClause: function (param, body) {
						return {
							type: Syntax.CatchClause,
							param: param,
							body: body
						};
					},

					createConditionalExpression: function (test, consequent, alternate) {
						return {
							type: Syntax.ConditionalExpression,
							test: test,
							consequent: consequent,
							alternate: alternate
						};
					},

					createContinueStatement: function (label) {
						return {
							type: Syntax.ContinueStatement,
							label: label
						};
					},

					createDebuggerStatement: function () {
						return {
							type: Syntax.DebuggerStatement
						};
					},

					createDoWhileStatement: function (body, test) {
						return {
							type: Syntax.DoWhileStatement,
							body: body,
							test: test
						};
					},

					createEmptyStatement: function () {
						return {
							type: Syntax.EmptyStatement
						};
					},

					createExpressionStatement: function (expression) {
						return {
							type: Syntax.ExpressionStatement,
							expression: expression
						};
					},

					createForStatement: function (init, test, update, body) {
						return {
							type: Syntax.ForStatement,
							init: init,
							test: test,
							update: update,
							body: body
						};
					},

					createForInStatement: function (left, right, body) {
						return {
							type: Syntax.ForInStatement,
							left: left,
							right: right,
							body: body,
							each: false
						};
					},

					createFunctionDeclaration: function (id, params, defaults, body) {
						return {
							type: Syntax.FunctionDeclaration,
							id: id,
							params: params,
							defaults: defaults,
							body: body,
							rest: null,
							generator: false,
							expression: false
						};
					},

					createFunctionExpression: function (id, params, defaults, body) {
						return {
							type: Syntax.FunctionExpression,
							id: id,
							params: params,
							defaults: defaults,
							body: body,
							rest: null,
							generator: false,
							expression: false
						};
					},

					createIdentifier: function (name) {
						return {
							type: Syntax.Identifier,
							name: name
						};
					},

					createIfStatement: function (test, consequent, alternate) {
						return {
							type: Syntax.IfStatement,
							test: test,
							consequent: consequent,
							alternate: alternate
						};
					},

					createLabeledStatement: function (label, body) {
						return {
							type: Syntax.LabeledStatement,
							label: label,
							body: body
						};
					},

					createLiteral: function (token) {
						return {
							type: Syntax.Literal,
							value: token.value,
							raw: source.slice(token.range[0], token.range[1])
						};
					},

					createMemberExpression: function (accessor, object, property) {
						return {
							type: Syntax.MemberExpression,
							computed: accessor === '[',
							object: object,
							property: property
						};
					},

					createNewExpression: function (callee, args) {
						return {
							type: Syntax.NewExpression,
							callee: callee,
							'arguments': args
						};
					},

					createObjectExpression: function (properties) {
						return {
							type: Syntax.ObjectExpression,
							properties: properties
						};
					},

					createPostfixExpression: function (operator, argument) {
						return {
							type: Syntax.UpdateExpression,
							operator: operator,
							argument: argument,
							prefix: false
						};
					},

					createProgram: function (body) {
						return {
							type: Syntax.Program,
							body: body
						};
					},

					createProperty: function (kind, key, value) {
						return {
							type: Syntax.Property,
							key: key,
							value: value,
							kind: kind
						};
					},

					createReturnStatement: function (argument) {
						return {
							type: Syntax.ReturnStatement,
							argument: argument
						};
					},

					createSequenceExpression: function (expressions) {
						return {
							type: Syntax.SequenceExpression,
							expressions: expressions
						};
					},

					createSwitchCase: function (test, consequent) {
						return {
							type: Syntax.SwitchCase,
							test: test,
							consequent: consequent
						};
					},

					createSwitchStatement: function (discriminant, cases) {
						return {
							type: Syntax.SwitchStatement,
							discriminant: discriminant,
							cases: cases
						};
					},

					createThisExpression: function () {
						return {
							type: Syntax.ThisExpression
						};
					},

					createThrowStatement: function (argument) {
						return {
							type: Syntax.ThrowStatement,
							argument: argument
						};
					},

					createTryStatement: function (block, guardedHandlers, handlers, finalizer) {
						return {
							type: Syntax.TryStatement,
							block: block,
							guardedHandlers: guardedHandlers,
							handlers: handlers,
							finalizer: finalizer
						};
					},

					createUnaryExpression: function (operator, argument) {
						if (operator === '++' || operator === '--') {
							return {
								type: Syntax.UpdateExpression,
								operator: operator,
								argument: argument,
								prefix: true
							};
						}
						return {
							type: Syntax.UnaryExpression,
							operator: operator,
							argument: argument,
							prefix: true
						};
					},

					createVariableDeclaration: function (declarations, kind) {
						return {
							type: Syntax.VariableDeclaration,
							declarations: declarations,
							kind: kind
						};
					},

					createVariableDeclarator: function (id, init) {
						return {
							type: Syntax.VariableDeclarator,
							id: id,
							init: init
						};
					},

					createWhileStatement: function (test, body) {
						return {
							type: Syntax.WhileStatement,
							test: test,
							body: body
						};
					},

					createWithStatement: function (object, body) {
						return {
							type: Syntax.WithStatement,
							object: object,
							body: body
						};
					}
				};

				// Return true if there is a line terminator before the next token.

				function peekLineTerminator() {
					var pos, line, start, found;

					pos = index;
					line = lineNumber;
					start = lineStart;
					skipComment();
					found = lineNumber !== line;
					index = pos;
					lineNumber = line;
					lineStart = start;

					return found;
				}

				// Throw an exception

				function throwError(token, messageFormat) {
					var error,
						args = Array.prototype.slice.call(arguments, 2),
						msg = messageFormat.replace(
							/%(\d)/g,
							function (whole, index) {
								assert(index &lt; args.length, 'Message reference must be in range');
								return args[index];
							}
						);

					if (typeof token.lineNumber === 'number') {
						error = new Error('Line ' + token.lineNumber + ': ' + msg);
						error.index = token.range[0];
						error.lineNumber = token.lineNumber;
						error.column = token.range[0] - lineStart + 1;
					} else {
						error = new Error('Line ' + lineNumber + ': ' + msg);
						error.index = index;
						error.lineNumber = lineNumber;
						error.column = index - lineStart + 1;
					}

					error.description = msg;
					throw error;
				}

				function throwErrorTolerant() {
					try {
						throwError.apply(null, arguments);
					} catch (e) {
						if (extra.errors) {
							extra.errors.push(e);
						} else {
							throw e;
						}
					}
				}


				// Throw an exception because of the token.

				function throwUnexpected(token) {
					if (token.type === Token.EOF) {
						throwError(token, Messages.UnexpectedEOS);
					}

					if (token.type === Token.NumericLiteral) {
						throwError(token, Messages.UnexpectedNumber);
					}

					if (token.type === Token.StringLiteral) {
						throwError(token, Messages.UnexpectedString);
					}

					if (token.type === Token.Identifier) {
						throwError(token, Messages.UnexpectedIdentifier);
					}

					if (token.type === Token.Keyword) {
						if (isFutureReservedWord(token.value)) {
							throwError(token, Messages.UnexpectedReserved);
						} else if (strict &amp;&amp; isStrictModeReservedWord(token.value)) {
							throwErrorTolerant(token, Messages.StrictReservedWord);
							return;
						}
						throwError(token, Messages.UnexpectedToken, token.value);
					}

					// BooleanLiteral, NullLiteral, or Punctuator.
					throwError(token, Messages.UnexpectedToken, token.value);
				}

				// Expect the next token to match the specified punctuator.
				// If not, an exception will be thrown.

				function expect(value) {
					var token = lex();
					if (token.type !== Token.Punctuator || token.value !== value) {
						throwUnexpected(token);
					}
				}

				// Expect the next token to match the specified keyword.
				// If not, an exception will be thrown.

				function expectKeyword(keyword) {
					var token = lex();
					if (token.type !== Token.Keyword || token.value !== keyword) {
						throwUnexpected(token);
					}
				}

				// Return true if the next token matches the specified punctuator.

				function match(value) {
					return lookahead.type === Token.Punctuator &amp;&amp; lookahead.value === value;
				}

				// Return true if the next token matches the specified keyword

				function matchKeyword(keyword) {
					return lookahead.type === Token.Keyword &amp;&amp; lookahead.value === keyword;
				}

				// Return true if the next token is an assignment operator

				function matchAssign() {
					var op;

					if (lookahead.type !== Token.Punctuator) {
						return false;
					}
					op = lookahead.value;
					return op === '=' ||
						op === '*=' ||
						op === '/=' ||
						op === '%=' ||
						op === '+=' ||
						op === '-=' ||
						op === '&lt;&lt;=' ||
						op === '&gt;&gt;=' ||
						op === '&gt;&gt;&gt;=' ||
						op === '&amp;=' ||
						op === '^=' ||
						op === '|=';
				}

				function consumeSemicolon() {
					var line;

					// Catch the very common case first: immediately a semicolon (char #59).
					if (source.charCodeAt(index) === 59) {
						lex();
						return;
					}

					line = lineNumber;
					skipComment();
					if (lineNumber !== line) {
						return;
					}

					if (match(';')) {
						lex();
						return;
					}

					if (lookahead.type !== Token.EOF &amp;&amp; !match('}')) {
						throwUnexpected(lookahead);
					}
				}

				// Return true if provided expression is LeftHandSideExpression

				function isLeftHandSide(expr) {
					return expr.type === Syntax.Identifier || expr.type === Syntax.MemberExpression;
				}

				// 11.1.4 Array Initialiser

				function parseArrayInitialiser() {
					var elements = [];

					expect('[');

					while (!match(']')) {
						if (match(',')) {
							lex();
							elements.push(null);
						} else {
							elements.push(parseAssignmentExpression());

							if (!match(']')) {
								expect(',');
							}
						}
					}

					expect(']');

					return delegate.createArrayExpression(elements);
				}

				// 11.1.5 Object Initialiser

				function parsePropertyFunction(param, first) {
					var previousStrict, body;

					previousStrict = strict;
					skipComment();
					delegate.markStart();
					body = parseFunctionSourceElements();
					if (first &amp;&amp; strict &amp;&amp; isRestrictedWord(param[0].name)) {
						throwErrorTolerant(first, Messages.StrictParamName);
					}
					strict = previousStrict;
					return delegate.markEnd(delegate.createFunctionExpression(null, param, [], body));
				}

				function parseObjectPropertyKey() {
					var token;

					skipComment();
					delegate.markStart();
					token = lex();

					// Note: This function is called only from parseObjectProperty(), where
					// EOF and Punctuator tokens are already filtered out.

					if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {
						if (strict &amp;&amp; token.octal) {
							throwErrorTolerant(token, Messages.StrictOctalLiteral);
						}
						return delegate.markEnd(delegate.createLiteral(token));
					}

					return delegate.markEnd(delegate.createIdentifier(token.value));
				}

				function parseObjectProperty() {
					var token, key, id, value, param;

					token = lookahead;
					skipComment();
					delegate.markStart();

					if (token.type === Token.Identifier) {

						id = parseObjectPropertyKey();

						// Property Assignment: Getter and Setter.

						if (token.value === 'get' &amp;&amp; !match(':')) {
							key = parseObjectPropertyKey();
							expect('(');
							expect(')');
							value = parsePropertyFunction([]);
							return delegate.markEnd(delegate.createProperty('get', key, value));
						}
						if (token.value === 'set' &amp;&amp; !match(':')) {
							key = parseObjectPropertyKey();
							expect('(');
							token = lookahead;
							if (token.type !== Token.Identifier) {
								expect(')');
								throwErrorTolerant(token, Messages.UnexpectedToken, token.value);
								value = parsePropertyFunction([]);
							} else {
								param = [parseVariableIdentifier()];
								expect(')');
								value = parsePropertyFunction(param, token);
							}
							return delegate.markEnd(delegate.createProperty('set', key, value));
						}
						expect(':');
						value = parseAssignmentExpression();
						return delegate.markEnd(delegate.createProperty('init', id, value));
					}
					if (token.type === Token.EOF || token.type === Token.Punctuator) {
						throwUnexpected(token);
					} else {
						key = parseObjectPropertyKey();
						expect(':');
						value = parseAssignmentExpression();
						return delegate.markEnd(delegate.createProperty('init', key, value));
					}
				}

				function parseObjectInitialiser() {
					var properties = [], property, name, key, kind, map = {}, toString = String;

					expect('{');

					while (!match('}')) {
						property = parseObjectProperty();

						if (property.key.type === Syntax.Identifier) {
							name = property.key.name;
						} else {
							name = toString(property.key.value);
						}
						kind = (property.kind === 'init') ? PropertyKind.Data : (property.kind === 'get') ? PropertyKind.Get : PropertyKind.Set;

						key = '$' + name;
						if (Object.prototype.hasOwnProperty.call(map, key)) {
							if (map[key] === PropertyKind.Data) {
								if (strict &amp;&amp; kind === PropertyKind.Data) {
									throwErrorTolerant({}, Messages.StrictDuplicateProperty);
								} else if (kind !== PropertyKind.Data) {
									throwErrorTolerant({}, Messages.AccessorDataProperty);
								}
							} else {
								if (kind === PropertyKind.Data) {
									throwErrorTolerant({}, Messages.AccessorDataProperty);
								} else if (map[key] &amp; kind) {
									throwErrorTolerant({}, Messages.AccessorGetSet);
								}
							}
							map[key] |= kind;
						} else {
							map[key] = kind;
						}

						properties.push(property);

						if (!match('}')) {
							expect(',');
						}
					}

					expect('}');

					return delegate.createObjectExpression(properties);
				}

				// 11.1.6 The Grouping Operator

				function parseGroupExpression() {
					var expr;

					expect('(');

					expr = parseExpression();

					expect(')');

					return expr;
				}


				// 11.1 Primary Expressions

				function parsePrimaryExpression() {
					var type, token, expr;

					if (match('(')) {
						return parseGroupExpression();
					}

					type = lookahead.type;
					delegate.markStart();

					if (type === Token.Identifier) {
						expr = delegate.createIdentifier(lex().value);
					} else if (type === Token.StringLiteral || type === Token.NumericLiteral) {
						if (strict &amp;&amp; lookahead.octal) {
							throwErrorTolerant(lookahead, Messages.StrictOctalLiteral);
						}
						expr = delegate.createLiteral(lex());
					} else if (type === Token.Keyword) {
						if (matchKeyword('this')) {
							lex();
							expr = delegate.createThisExpression();
						} else if (matchKeyword('function')) {
							expr = parseFunctionExpression();
						}
					} else if (type === Token.BooleanLiteral) {
						token = lex();
						token.value = (token.value === 'true');
						expr = delegate.createLiteral(token);
					} else if (type === Token.NullLiteral) {
						token = lex();
						token.value = null;
						expr = delegate.createLiteral(token);
					} else if (match('[')) {
						expr = parseArrayInitialiser();
					} else if (match('{')) {
						expr = parseObjectInitialiser();
					} else if (match('/') || match('/=')) {
						if (typeof extra.tokens !== 'undefined') {
							expr = delegate.createLiteral(collectRegex());
						} else {
							expr = delegate.createLiteral(scanRegExp());
						}
					}

					if (expr) {
						return delegate.markEnd(expr);
					}

					throwUnexpected(lex());
				}

				// 11.2 Left-Hand-Side Expressions

				function parseArguments() {
					var args = [];

					expect('(');

					if (!match(')')) {
						while (index &lt; length) {
							args.push(parseAssignmentExpression());
							if (match(')')) {
								break;
							}
							expect(',');
						}
					}

					expect(')');

					return args;
				}

				function parseNonComputedProperty() {
					var token;

					delegate.markStart();
					token = lex();

					if (!isIdentifierName(token)) {
						throwUnexpected(token);
					}

					return delegate.markEnd(delegate.createIdentifier(token.value));
				}

				function parseNonComputedMember() {
					expect('.');

					return parseNonComputedProperty();
				}

				function parseComputedMember() {
					var expr;

					expect('[');

					expr = parseExpression();

					expect(']');

					return expr;
				}

				function parseNewExpression() {
					var callee, args;

					delegate.markStart();
					expectKeyword('new');
					callee = parseLeftHandSideExpression();
					args = match('(') ? parseArguments() : [];

					return delegate.markEnd(delegate.createNewExpression(callee, args));
				}

				function parseLeftHandSideExpressionAllowCall() {
					var marker, previousAllowIn, expr, args, property;

					marker = createLocationMarker();

					previousAllowIn = state.allowIn;
					state.allowIn = true;
					expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();
					state.allowIn = previousAllowIn;

					while (match('.') || match('[') || match('(')) {
						if (match('(')) {
							args = parseArguments();
							expr = delegate.createCallExpression(expr, args);
						} else if (match('[')) {
							property = parseComputedMember();
							expr = delegate.createMemberExpression('[', expr, property);
						} else {
							property = parseNonComputedMember();
							expr = delegate.createMemberExpression('.', expr, property);
						}
						if (marker) {
							marker.end();
							marker.apply(expr);
						}
					}

					return expr;
				}

				function parseLeftHandSideExpression() {
					var marker, previousAllowIn, expr, property;

					marker = createLocationMarker();

					previousAllowIn = state.allowIn;
					expr = matchKeyword('new') ? parseNewExpression() : parsePrimaryExpression();
					state.allowIn = previousAllowIn;

					while (match('.') || match('[')) {
						if (match('[')) {
							property = parseComputedMember();
							expr = delegate.createMemberExpression('[', expr, property);
						} else {
							property = parseNonComputedMember();
							expr = delegate.createMemberExpression('.', expr, property);
						}
						if (marker) {
							marker.end();
							marker.apply(expr);
						}
					}

					return expr;
				}

				// 11.3 Postfix Expressions

				function parsePostfixExpression() {
					var expr, token;

					delegate.markStart();
					expr = parseLeftHandSideExpressionAllowCall();

					if (lookahead.type === Token.Punctuator) {
						if ((match('++') || match('--')) &amp;&amp; !peekLineTerminator()) {
							// 11.3.1, 11.3.2
							if (strict &amp;&amp; expr.type === Syntax.Identifier &amp;&amp; isRestrictedWord(expr.name)) {
								throwErrorTolerant({}, Messages.StrictLHSPostfix);
							}

							if (!isLeftHandSide(expr)) {
								throwErrorTolerant({}, Messages.InvalidLHSInAssignment);
							}

							token = lex();
							expr = delegate.createPostfixExpression(token.value, expr);
						}
					}

					return delegate.markEndIf(expr);
				}

				// 11.4 Unary Operators

				function parseUnaryExpression() {
					var token, expr;

					delegate.markStart();

					if (lookahead.type !== Token.Punctuator &amp;&amp; lookahead.type !== Token.Keyword) {
						expr = parsePostfixExpression();
					} else if (match('++') || match('--')) {
						token = lex();
						expr = parseUnaryExpression();
						// 11.4.4, 11.4.5
						if (strict &amp;&amp; expr.type === Syntax.Identifier &amp;&amp; isRestrictedWord(expr.name)) {
							throwErrorTolerant({}, Messages.StrictLHSPrefix);
						}

						if (!isLeftHandSide(expr)) {
							throwErrorTolerant({}, Messages.InvalidLHSInAssignment);
						}

						expr = delegate.createUnaryExpression(token.value, expr);
					} else if (match('+') || match('-') || match('~') || match('!')) {
						token = lex();
						expr = parseUnaryExpression();
						expr = delegate.createUnaryExpression(token.value, expr);
					} else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
						token = lex();
						expr = parseUnaryExpression();
						expr = delegate.createUnaryExpression(token.value, expr);
						if (strict &amp;&amp; expr.operator === 'delete' &amp;&amp; expr.argument.type === Syntax.Identifier) {
							throwErrorTolerant({}, Messages.StrictDelete);
						}
					} else {
						expr = parsePostfixExpression();
					}

					return delegate.markEndIf(expr);
				}

				function binaryPrecedence(token, allowIn) {
					var prec = 0;

					if (token.type !== Token.Punctuator &amp;&amp; token.type !== Token.Keyword) {
						return 0;
					}

					switch (token.value) {
						case '||':
							prec = 1;
							break;

						case '&amp;&amp;':
							prec = 2;
							break;

						case '|':
							prec = 3;
							break;

						case '^':
							prec = 4;
							break;

						case '&amp;':
							prec = 5;
							break;

						case '==':
						case '!=':
						case '===':
						case '!==':
							prec = 6;
							break;

						case '&lt;':
						case '&gt;':
						case '&lt;=':
						case '&gt;=':
						case 'instanceof':
							prec = 7;
							break;

						case 'in':
							prec = allowIn ? 7 : 0;
							break;

						case '&lt;&lt;':
						case '&gt;&gt;':
						case '&gt;&gt;&gt;':
							prec = 8;
							break;

						case '+':
						case '-':
							prec = 9;
							break;

						case '*':
						case '/':
						case '%':
							prec = 11;
							break;

						default:
							break;
					}

					return prec;
				}

				// 11.5 Multiplicative Operators
				// 11.6 Additive Operators
				// 11.7 Bitwise Shift Operators
				// 11.8 Relational Operators
				// 11.9 Equality Operators
				// 11.10 Binary Bitwise Operators
				// 11.11 Binary Logical Operators

				function parseBinaryExpression() {
					var marker, markers, expr, token, prec, stack, right, operator, left, i;

					marker = createLocationMarker();
					left = parseUnaryExpression();

					token = lookahead;
					prec = binaryPrecedence(token, state.allowIn);
					if (prec === 0) {
						return left;
					}
					token.prec = prec;
					lex();

					markers = [marker, createLocationMarker()];
					right = parseUnaryExpression();

					stack = [left, token, right];

					while ((prec = binaryPrecedence(lookahead, state.allowIn)) &gt; 0) {

						// Reduce: make a binary expression from the three topmost entries.
						while ((stack.length &gt; 2) &amp;&amp; (prec &lt;= stack[stack.length - 2].prec)) {
							right = stack.pop();
							operator = stack.pop().value;
							left = stack.pop();
							expr = delegate.createBinaryExpression(operator, left, right);
							markers.pop();
							marker = markers.pop();
							if (marker) {
								marker.end();
								marker.apply(expr);
							}
							stack.push(expr);
							markers.push(marker);
						}

						// Shift.
						token = lex();
						token.prec = prec;
						stack.push(token);
						markers.push(createLocationMarker());
						expr = parseUnaryExpression();
						stack.push(expr);
					}

					// Final reduce to clean-up the stack.
					i = stack.length - 1;
					expr = stack[i];
					markers.pop();
					while (i &gt; 1) {
						expr = delegate.createBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
						i -= 2;
						marker = markers.pop();
						if (marker) {
							marker.end();
							marker.apply(expr);
						}
					}

					return expr;
				}


				// 11.12 Conditional Operator

				function parseConditionalExpression() {
					var expr, previousAllowIn, consequent, alternate;

					delegate.markStart();
					expr = parseBinaryExpression();

					if (match('?')) {
						lex();
						previousAllowIn = state.allowIn;
						state.allowIn = true;
						consequent = parseAssignmentExpression();
						state.allowIn = previousAllowIn;
						expect(':');
						alternate = parseAssignmentExpression();

						expr = delegate.markEnd(delegate.createConditionalExpression(expr, consequent, alternate));
					} else {
						delegate.markEnd({});
					}

					return expr;
				}

				// 11.13 Assignment Operators

				function parseAssignmentExpression() {
					var token, left, right, node;

					token = lookahead;
					delegate.markStart();
					node = left = parseConditionalExpression();

					if (matchAssign()) {
						// LeftHandSideExpression
						if (!isLeftHandSide(left)) {
							throwErrorTolerant({}, Messages.InvalidLHSInAssignment);
						}

						// 11.13.1
						if (strict &amp;&amp; left.type === Syntax.Identifier &amp;&amp; isRestrictedWord(left.name)) {
							throwErrorTolerant(token, Messages.StrictLHSAssignment);
						}

						token = lex();
						right = parseAssignmentExpression();
						node = delegate.createAssignmentExpression(token.value, left, right);
					}

					return delegate.markEndIf(node);
				}

				// 11.14 Comma Operator

				function parseExpression() {
					var expr;

					delegate.markStart();
					expr = parseAssignmentExpression();

					if (match(',')) {
						expr = delegate.createSequenceExpression([expr]);

						while (index &lt; length) {
							if (!match(',')) {
								break;
							}
							lex();
							expr.expressions.push(parseAssignmentExpression());
						}
					}

					return delegate.markEndIf(expr);
				}

				// 12.1 Block

				function parseStatementList() {
					var list = [],
						statement;

					while (index &lt; length) {
						if (match('}')) {
							break;
						}
						statement = parseSourceElement();
						if (typeof statement === 'undefined') {
							break;
						}
						list.push(statement);
					}

					return list;
				}

				function parseBlock() {
					var block;

					skipComment();
					delegate.markStart();
					expect('{');

					block = parseStatementList();

					expect('}');

					return delegate.markEnd(delegate.createBlockStatement(block));
				}

				// 12.2 Variable Statement

				function parseVariableIdentifier() {
					var token;

					skipComment();
					delegate.markStart();
					token = lex();

					if (token.type !== Token.Identifier) {
						throwUnexpected(token);
					}

					return delegate.markEnd(delegate.createIdentifier(token.value));
				}

				function parseVariableDeclaration(kind) {
					var init = null, id;

					skipComment();
					delegate.markStart();
					id = parseVariableIdentifier();

					// 12.2.1
					if (strict &amp;&amp; isRestrictedWord(id.name)) {
						throwErrorTolerant({}, Messages.StrictVarName);
					}

					if (kind === 'const') {
						expect('=');
						init = parseAssignmentExpression();
					} else if (match('=')) {
						lex();
						init = parseAssignmentExpression();
					}

					return delegate.markEnd(delegate.createVariableDeclarator(id, init));
				}

				function parseVariableDeclarationList(kind) {
					var list = [];

					do {
						list.push(parseVariableDeclaration(kind));
						if (!match(',')) {
							break;
						}
						lex();
					} while (index &lt; length);

					return list;
				}

				function parseVariableStatement() {
					var declarations;

					expectKeyword('var');

					declarations = parseVariableDeclarationList();

					consumeSemicolon();

					return delegate.createVariableDeclaration(declarations, 'var');
				}

				// kind may be `const` or `let`
				// Both are experimental and not in the specification yet.
				// see http://wiki.ecmascript.org/doku.php?id=harmony:const
				// and http://wiki.ecmascript.org/doku.php?id=harmony:let
				function parseConstLetDeclaration(kind) {
					var declarations;

					skipComment();
					delegate.markStart();

					expectKeyword(kind);

					declarations = parseVariableDeclarationList(kind);

					consumeSemicolon();

					return delegate.markEnd(delegate.createVariableDeclaration(declarations, kind));
				}

				// 12.3 Empty Statement

				function parseEmptyStatement() {
					expect(';');
					return delegate.createEmptyStatement();
				}

				// 12.4 Expression Statement

				function parseExpressionStatement() {
					var expr = parseExpression();
					consumeSemicolon();
					return delegate.createExpressionStatement(expr);
				}

				// 12.5 If statement

				function parseIfStatement() {
					var test, consequent, alternate;

					expectKeyword('if');

					expect('(');

					test = parseExpression();

					expect(')');

					consequent = parseStatement();

					if (matchKeyword('else')) {
						lex();
						alternate = parseStatement();
					} else {
						alternate = null;
					}

					return delegate.createIfStatement(test, consequent, alternate);
				}

				// 12.6 Iteration Statements

				function parseDoWhileStatement() {
					var body, test, oldInIteration;

					expectKeyword('do');

					oldInIteration = state.inIteration;
					state.inIteration = true;

					body = parseStatement();

					state.inIteration = oldInIteration;

					expectKeyword('while');

					expect('(');

					test = parseExpression();

					expect(')');

					if (match(';')) {
						lex();
					}

					return delegate.createDoWhileStatement(body, test);
				}

				function parseWhileStatement() {
					var test, body, oldInIteration;

					expectKeyword('while');

					expect('(');

					test = parseExpression();

					expect(')');

					oldInIteration = state.inIteration;
					state.inIteration = true;

					body = parseStatement();

					state.inIteration = oldInIteration;

					return delegate.createWhileStatement(test, body);
				}

				function parseForVariableDeclaration() {
					var token, declarations;

					delegate.markStart();
					token = lex();
					declarations = parseVariableDeclarationList();

					return delegate.markEnd(delegate.createVariableDeclaration(declarations, token.value));
				}

				function parseForStatement() {
					var init, test, update, left, right, body, oldInIteration;

					init = test = update = null;

					expectKeyword('for');

					expect('(');

					if (match(';')) {
						lex();
					} else {
						if (matchKeyword('var') || matchKeyword('let')) {
							state.allowIn = false;
							init = parseForVariableDeclaration();
							state.allowIn = true;

							if (init.declarations.length === 1 &amp;&amp; matchKeyword('in')) {
								lex();
								left = init;
								right = parseExpression();
								init = null;
							}
						} else {
							state.allowIn = false;
							init = parseExpression();
							state.allowIn = true;

							if (matchKeyword('in')) {
								// LeftHandSideExpression
								if (!isLeftHandSide(init)) {
									throwErrorTolerant({}, Messages.InvalidLHSInForIn);
								}

								lex();
								left = init;
								right = parseExpression();
								init = null;
							}
						}

						if (typeof left === 'undefined') {
							expect(';');
						}
					}

					if (typeof left === 'undefined') {

						if (!match(';')) {
							test = parseExpression();
						}
						expect(';');

						if (!match(')')) {
							update = parseExpression();
						}
					}

					expect(')');

					oldInIteration = state.inIteration;
					state.inIteration = true;

					body = parseStatement();

					state.inIteration = oldInIteration;

					return (typeof left === 'undefined') ?
						delegate.createForStatement(init, test, update, body) :
						delegate.createForInStatement(left, right, body);
				}

				// 12.7 The continue statement

				function parseContinueStatement() {
					var label = null, key;

					expectKeyword('continue');

					// Optimize the most common form: 'continue;'.
					if (source.charCodeAt(index) === 59) {
						lex();

						if (!state.inIteration) {
							throwError({}, Messages.IllegalContinue);
						}

						return delegate.createContinueStatement(null);
					}

					if (peekLineTerminator()) {
						if (!state.inIteration) {
							throwError({}, Messages.IllegalContinue);
						}

						return delegate.createContinueStatement(null);
					}

					if (lookahead.type === Token.Identifier) {
						label = parseVariableIdentifier();

						key = '$' + label.name;
						if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
							throwError({}, Messages.UnknownLabel, label.name);
						}
					}

					consumeSemicolon();

					if (label === null &amp;&amp; !state.inIteration) {
						throwError({}, Messages.IllegalContinue);
					}

					return delegate.createContinueStatement(label);
				}

				// 12.8 The break statement

				function parseBreakStatement() {
					var label = null, key;

					expectKeyword('break');

					// Catch the very common case first: immediately a semicolon (char #59).
					if (source.charCodeAt(index) === 59) {
						lex();

						if (!(state.inIteration || state.inSwitch)) {
							throwError({}, Messages.IllegalBreak);
						}

						return delegate.createBreakStatement(null);
					}

					if (peekLineTerminator()) {
						if (!(state.inIteration || state.inSwitch)) {
							throwError({}, Messages.IllegalBreak);
						}

						return delegate.createBreakStatement(null);
					}

					if (lookahead.type === Token.Identifier) {
						label = parseVariableIdentifier();

						key = '$' + label.name;
						if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
							throwError({}, Messages.UnknownLabel, label.name);
						}
					}

					consumeSemicolon();

					if (label === null &amp;&amp; !(state.inIteration || state.inSwitch)) {
						throwError({}, Messages.IllegalBreak);
					}

					return delegate.createBreakStatement(label);
				}

				// 12.9 The return statement

				function parseReturnStatement() {
					var argument = null;

					expectKeyword('return');

					if (!state.inFunctionBody) {
						throwErrorTolerant({}, Messages.IllegalReturn);
					}

					// 'return' followed by a space and an identifier is very common.
					if (source.charCodeAt(index) === 32) {
						if (isIdentifierStart(source.charCodeAt(index + 1))) {
							argument = parseExpression();
							consumeSemicolon();
							return delegate.createReturnStatement(argument);
						}
					}

					if (peekLineTerminator()) {
						return delegate.createReturnStatement(null);
					}

					if (!match(';')) {
						if (!match('}') &amp;&amp; lookahead.type !== Token.EOF) {
							argument = parseExpression();
						}
					}

					consumeSemicolon();

					return delegate.createReturnStatement(argument);
				}

				// 12.10 The with statement

				function parseWithStatement() {
					var object, body;

					if (strict) {
						throwErrorTolerant({}, Messages.StrictModeWith);
					}

					expectKeyword('with');

					expect('(');

					object = parseExpression();

					expect(')');

					body = parseStatement();

					return delegate.createWithStatement(object, body);
				}

				// 12.10 The swith statement

				function parseSwitchCase() {
					var test,
						consequent = [],
						statement;

					skipComment();
					delegate.markStart();
					if (matchKeyword('default')) {
						lex();
						test = null;
					} else {
						expectKeyword('case');
						test = parseExpression();
					}
					expect(':');

					while (index &lt; length) {
						if (match('}') || matchKeyword('default') || matchKeyword('case')) {
							break;
						}
						statement = parseStatement();
						consequent.push(statement);
					}

					return delegate.markEnd(delegate.createSwitchCase(test, consequent));
				}

				function parseSwitchStatement() {
					var discriminant, cases, clause, oldInSwitch, defaultFound;

					expectKeyword('switch');

					expect('(');

					discriminant = parseExpression();

					expect(')');

					expect('{');

					cases = [];

					if (match('}')) {
						lex();
						return delegate.createSwitchStatement(discriminant, cases);
					}

					oldInSwitch = state.inSwitch;
					state.inSwitch = true;
					defaultFound = false;

					while (index &lt; length) {
						if (match('}')) {
							break;
						}
						clause = parseSwitchCase();
						if (clause.test === null) {
							if (defaultFound) {
								throwError({}, Messages.MultipleDefaultsInSwitch);
							}
							defaultFound = true;
						}
						cases.push(clause);
					}

					state.inSwitch = oldInSwitch;

					expect('}');

					return delegate.createSwitchStatement(discriminant, cases);
				}

				// 12.13 The throw statement

				function parseThrowStatement() {
					var argument;

					expectKeyword('throw');

					if (peekLineTerminator()) {
						throwError({}, Messages.NewlineAfterThrow);
					}

					argument = parseExpression();

					consumeSemicolon();

					return delegate.createThrowStatement(argument);
				}

				// 12.14 The try statement

				function parseCatchClause() {
					var param, body;

					skipComment();
					delegate.markStart();
					expectKeyword('catch');

					expect('(');
					if (match(')')) {
						throwUnexpected(lookahead);
					}

					param = parseVariableIdentifier();
					// 12.14.1
					if (strict &amp;&amp; isRestrictedWord(param.name)) {
						throwErrorTolerant({}, Messages.StrictCatchVariable);
					}

					expect(')');
					body = parseBlock();
					return delegate.markEnd(delegate.createCatchClause(param, body));
				}

				function parseTryStatement() {
					var block, handlers = [], finalizer = null;

					expectKeyword('try');

					block = parseBlock();

					if (matchKeyword('catch')) {
						handlers.push(parseCatchClause());
					}

					if (matchKeyword('finally')) {
						lex();
						finalizer = parseBlock();
					}

					if (handlers.length === 0 &amp;&amp; !finalizer) {
						throwError({}, Messages.NoCatchOrFinally);
					}

					return delegate.createTryStatement(block, [], handlers, finalizer);
				}

				// 12.15 The debugger statement

				function parseDebuggerStatement() {
					expectKeyword('debugger');

					consumeSemicolon();

					return delegate.createDebuggerStatement();
				}

				// 12 Statements

				function parseStatement() {
					var type = lookahead.type,
						expr,
						labeledBody,
						key;

					if (type === Token.EOF) {
						throwUnexpected(lookahead);
					}

					skipComment();
					delegate.markStart();

					if (type === Token.Punctuator) {
						switch (lookahead.value) {
							case ';':
								return delegate.markEnd(parseEmptyStatement());
							case '{':
								return delegate.markEnd(parseBlock());
							case '(':
								return delegate.markEnd(parseExpressionStatement());
							default:
								break;
						}
					}

					if (type === Token.Keyword) {
						switch (lookahead.value) {
							case 'break':
								return delegate.markEnd(parseBreakStatement());
							case 'continue':
								return delegate.markEnd(parseContinueStatement());
							case 'debugger':
								return delegate.markEnd(parseDebuggerStatement());
							case 'do':
								return delegate.markEnd(parseDoWhileStatement());
							case 'for':
								return delegate.markEnd(parseForStatement());
							case 'function':
								return delegate.markEnd(parseFunctionDeclaration());
							case 'if':
								return delegate.markEnd(parseIfStatement());
							case 'return':
								return delegate.markEnd(parseReturnStatement());
							case 'switch':
								return delegate.markEnd(parseSwitchStatement());
							case 'throw':
								return delegate.markEnd(parseThrowStatement());
							case 'try':
								return delegate.markEnd(parseTryStatement());
							case 'var':
								return delegate.markEnd(parseVariableStatement());
							case 'while':
								return delegate.markEnd(parseWhileStatement());
							case 'with':
								return delegate.markEnd(parseWithStatement());
							default:
								break;
						}
					}

					expr = parseExpression();

					// 12.12 Labelled Statements
					if ((expr.type === Syntax.Identifier) &amp;&amp; match(':')) {
						lex();

						key = '$' + expr.name;
						if (Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
							throwError({}, Messages.Redeclaration, 'Label', expr.name);
						}

						state.labelSet[key] = true;
						labeledBody = parseStatement();
						delete state.labelSet[key];
						return delegate.markEnd(delegate.createLabeledStatement(expr, labeledBody));
					}

					consumeSemicolon();

					return delegate.markEnd(delegate.createExpressionStatement(expr));
				}

				// 13 Function Definition

				function parseFunctionSourceElements() {
					var sourceElement, sourceElements = [], token, directive, firstRestricted,
						oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody;

					skipComment();
					delegate.markStart();
					expect('{');

					while (index &lt; length) {
						if (lookahead.type !== Token.StringLiteral) {
							break;
						}
						token = lookahead;

						sourceElement = parseSourceElement();
						sourceElements.push(sourceElement);
						if (sourceElement.expression.type !== Syntax.Literal) {
							// this is not directive
							break;
						}
						directive = source.slice(token.range[0] + 1, token.range[1] - 1);
						if (directive === 'use strict') {
							strict = true;
							if (firstRestricted) {
								throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);
							}
						} else {
							if (!firstRestricted &amp;&amp; token.octal) {
								firstRestricted = token;
							}
						}
					}

					oldLabelSet = state.labelSet;
					oldInIteration = state.inIteration;
					oldInSwitch = state.inSwitch;
					oldInFunctionBody = state.inFunctionBody;

					state.labelSet = {};
					state.inIteration = false;
					state.inSwitch = false;
					state.inFunctionBody = true;

					while (index &lt; length) {
						if (match('}')) {
							break;
						}
						sourceElement = parseSourceElement();
						if (typeof sourceElement === 'undefined') {
							break;
						}
						sourceElements.push(sourceElement);
					}

					expect('}');

					state.labelSet = oldLabelSet;
					state.inIteration = oldInIteration;
					state.inSwitch = oldInSwitch;
					state.inFunctionBody = oldInFunctionBody;

					return delegate.markEnd(delegate.createBlockStatement(sourceElements));
				}

				function parseParams(firstRestricted) {
					var param, params = [], token, stricted, paramSet, key, message;
					expect('(');

					if (!match(')')) {
						paramSet = {};
						while (index &lt; length) {
							token = lookahead;
							param = parseVariableIdentifier();
							key = '$' + token.value;
							if (strict) {
								if (isRestrictedWord(token.value)) {
									stricted = token;
									message = Messages.StrictParamName;
								}
								if (Object.prototype.hasOwnProperty.call(paramSet, key)) {
									stricted = token;
									message = Messages.StrictParamDupe;
								}
							} else if (!firstRestricted) {
								if (isRestrictedWord(token.value)) {
									firstRestricted = token;
									message = Messages.StrictParamName;
								} else if (isStrictModeReservedWord(token.value)) {
									firstRestricted = token;
									message = Messages.StrictReservedWord;
								} else if (Object.prototype.hasOwnProperty.call(paramSet, key)) {
									firstRestricted = token;
									message = Messages.StrictParamDupe;
								}
							}
							params.push(param);
							paramSet[key] = true;
							if (match(')')) {
								break;
							}
							expect(',');
						}
					}

					expect(')');

					return {
						params: params,
						stricted: stricted,
						firstRestricted: firstRestricted,
						message: message
					};
				}

				function parseFunctionDeclaration() {
					var id, params = [], body, token, stricted, tmp, firstRestricted, message, previousStrict;

					skipComment();
					delegate.markStart();

					expectKeyword('function');
					token = lookahead;
					id = parseVariableIdentifier();
					if (strict) {
						if (isRestrictedWord(token.value)) {
							throwErrorTolerant(token, Messages.StrictFunctionName);
						}
					} else {
						if (isRestrictedWord(token.value)) {
							firstRestricted = token;
							message = Messages.StrictFunctionName;
						} else if (isStrictModeReservedWord(token.value)) {
							firstRestricted = token;
							message = Messages.StrictReservedWord;
						}
					}

					tmp = parseParams(firstRestricted);
					params = tmp.params;
					stricted = tmp.stricted;
					firstRestricted = tmp.firstRestricted;
					if (tmp.message) {
						message = tmp.message;
					}

					previousStrict = strict;
					body = parseFunctionSourceElements();
					if (strict &amp;&amp; firstRestricted) {
						throwError(firstRestricted, message);
					}
					if (strict &amp;&amp; stricted) {
						throwErrorTolerant(stricted, message);
					}
					strict = previousStrict;

					return delegate.markEnd(delegate.createFunctionDeclaration(id, params, [], body));
				}

				function parseFunctionExpression() {
					var token, id = null, stricted, firstRestricted, message, tmp, params = [], body, previousStrict;

					delegate.markStart();
					expectKeyword('function');

					if (!match('(')) {
						token = lookahead;
						id = parseVariableIdentifier();
						if (strict) {
							if (isRestrictedWord(token.value)) {
								throwErrorTolerant(token, Messages.StrictFunctionName);
							}
						} else {
							if (isRestrictedWord(token.value)) {
								firstRestricted = token;
								message = Messages.StrictFunctionName;
							} else if (isStrictModeReservedWord(token.value)) {
								firstRestricted = token;
								message = Messages.StrictReservedWord;
							}
						}
					}

					tmp = parseParams(firstRestricted);
					params = tmp.params;
					stricted = tmp.stricted;
					firstRestricted = tmp.firstRestricted;
					if (tmp.message) {
						message = tmp.message;
					}

					previousStrict = strict;
					body = parseFunctionSourceElements();
					if (strict &amp;&amp; firstRestricted) {
						throwError(firstRestricted, message);
					}
					if (strict &amp;&amp; stricted) {
						throwErrorTolerant(stricted, message);
					}
					strict = previousStrict;

					return delegate.markEnd(delegate.createFunctionExpression(id, params, [], body));
				}

				// 14 Program

				function parseSourceElement() {
					if (lookahead.type === Token.Keyword) {
						switch (lookahead.value) {
							case 'const':
							case 'let':
								return parseConstLetDeclaration(lookahead.value);
							case 'function':
								return parseFunctionDeclaration();
							default:
								return parseStatement();
						}
					}

					if (lookahead.type !== Token.EOF) {
						return parseStatement();
					}
				}

				function parseSourceElements() {
					var sourceElement, sourceElements = [], token, directive, firstRestricted;

					while (index &lt; length) {
						token = lookahead;
						if (token.type !== Token.StringLiteral) {
							break;
						}

						sourceElement = parseSourceElement();
						sourceElements.push(sourceElement);
						if (sourceElement.expression.type !== Syntax.Literal) {
							// this is not directive
							break;
						}
						directive = source.slice(token.range[0] + 1, token.range[1] - 1);
						if (directive === 'use strict') {
							strict = true;
							if (firstRestricted) {
								throwErrorTolerant(firstRestricted, Messages.StrictOctalLiteral);
							}
						} else {
							if (!firstRestricted &amp;&amp; token.octal) {
								firstRestricted = token;
							}
						}
					}

					while (index &lt; length) {
						sourceElement = parseSourceElement();
						if (typeof sourceElement === 'undefined') {
							break;
						}
						sourceElements.push(sourceElement);
					}
					return sourceElements;
				}

				function parseProgram() {
					var body;

					skipComment();
					delegate.markStart();
					strict = false;
					peek();
					body = parseSourceElements();
					return delegate.markEnd(delegate.createProgram(body));
				}

				function filterTokenLocation() {
					var i, entry, token, tokens = [];

					for (i = 0; i &lt; extra.tokens.length; ++i) {
						entry = extra.tokens[i];
						token = {
							type: entry.type,
							value: entry.value
						};
						if (extra.range) {
							token.range = entry.range;
						}
						if (extra.loc) {
							token.loc = entry.loc;
						}
						tokens.push(token);
					}

					extra.tokens = tokens;
				}

				function LocationMarker() {
					this.marker = [index, lineNumber, index - lineStart, 0, 0, 0];
				}

				LocationMarker.prototype = {
					constructor: LocationMarker,

					end: function () {
						this.marker[3] = index;
						this.marker[4] = lineNumber;
						this.marker[5] = index - lineStart;
					},

					apply: function (node) {
						if (extra.range) {
							node.range = [this.marker[0], this.marker[3]];
						}
						if (extra.loc) {
							node.loc = {
								start: {
									line: this.marker[1],
									column: this.marker[2]
								},
								end: {
									line: this.marker[4],
									column: this.marker[5]
								}
							};
						}
						node = delegate.postProcess(node);
					}
				};

				function createLocationMarker() {
					if (!extra.loc &amp;&amp; !extra.range) {
						return null;
					}

					skipComment();

					return new LocationMarker();
				}

				function tokenize(code, options) {
					var toString,
						token,
						tokens;

					toString = String;
					if (typeof code !== 'string' &amp;&amp; !(code instanceof String)) {
						code = toString(code);
					}

					delegate = SyntaxTreeDelegate;
					source = code;
					index = 0;
					lineNumber = (source.length &gt; 0) ? 1 : 0;
					lineStart = 0;
					length = source.length;
					lookahead = null;
					state = {
						allowIn: true,
						labelSet: {},
						inFunctionBody: false,
						inIteration: false,
						inSwitch: false,
						lastCommentStart: -1,
					};

					extra = {};

					// Options matching.
					options = options || {};

					// Of course we collect tokens here.
					options.tokens = true;
					extra.tokens = [];
					extra.tokenize = true;
					// The following two fields are necessary to compute the Regex tokens.
					extra.openParenToken = -1;
					extra.openCurlyToken = -1;

					extra.range = (typeof options.range === 'boolean') &amp;&amp; options.range;
					extra.loc = (typeof options.loc === 'boolean') &amp;&amp; options.loc;

					if (typeof options.comment === 'boolean' &amp;&amp; options.comment) {
						extra.comments = [];
					}
					if (typeof options.tolerant === 'boolean' &amp;&amp; options.tolerant) {
						extra.errors = [];
					}

					if (length &gt; 0) {
						if (typeof source[0] === 'undefined') {
							// Try first to convert to a string. This is good as fast path
							// for old IE which understands string indexing for string
							// literals only and not for string object.
							if (code instanceof String) {
								source = code.valueOf();
							}
						}
					}

					try {
						peek();
						if (lookahead.type === Token.EOF) {
							return extra.tokens;
						}

						token = lex();
						while (lookahead.type !== Token.EOF) {
							try {
								token = lex();
							} catch (lexError) {
								token = lookahead;
								if (extra.errors) {
									extra.errors.push(lexError);
									// We have to break on the first error
									// to avoid infinite loops.
									break;
								} else {
									throw lexError;
								}
							}
						}

						filterTokenLocation();
						tokens = extra.tokens;
						if (typeof extra.comments !== 'undefined') {
							tokens.comments = extra.comments;
						}
						if (typeof extra.errors !== 'undefined') {
							tokens.errors = extra.errors;
						}
					} catch (e) {
						throw e;
					} finally {
						extra = {};
					}
					return tokens;
				}

				function parse(code, options) {
					var program, toString;

					toString = String;
					if (typeof code !== 'string' &amp;&amp; !(code instanceof String)) {
						code = toString(code);
					}

					delegate = SyntaxTreeDelegate;
					source = code;
					index = 0;
					lineNumber = (source.length &gt; 0) ? 1 : 0;
					lineStart = 0;
					length = source.length;
					lookahead = null;
					state = {
						allowIn: true,
						labelSet: {},
						inFunctionBody: false,
						inIteration: false,
						inSwitch: false,
						lastCommentStart: -1,
						markerStack: []
					};

					extra = {};
					if (typeof options !== 'undefined') {
						extra.range = (typeof options.range === 'boolean') &amp;&amp; options.range;
						extra.loc = (typeof options.loc === 'boolean') &amp;&amp; options.loc;

						if (extra.loc &amp;&amp; options.source !== null &amp;&amp; options.source !== undefined) {
							extra.source = toString(options.source);
						}

						if (typeof options.tokens === 'boolean' &amp;&amp; options.tokens) {
							extra.tokens = [];
						}
						if (typeof options.comment === 'boolean' &amp;&amp; options.comment) {
							extra.comments = [];
						}
						if (typeof options.tolerant === 'boolean' &amp;&amp; options.tolerant) {
							extra.errors = [];
						}
					}

					if (length &gt; 0) {
						if (typeof source[0] === 'undefined') {
							// Try first to convert to a string. This is good as fast path
							// for old IE which understands string indexing for string
							// literals only and not for string object.
							if (code instanceof String) {
								source = code.valueOf();
							}
						}
					}

					try {
						program = parseProgram();
						if (typeof extra.comments !== 'undefined') {
							program.comments = extra.comments;
						}
						if (typeof extra.tokens !== 'undefined') {
							filterTokenLocation();
							program.tokens = extra.tokens;
						}
						if (typeof extra.errors !== 'undefined') {
							program.errors = extra.errors;
						}
					} catch (e) {
						throw e;
					} finally {
						extra = {};
					}

					return program;
				}

				// Sync with package.json and component.json.
				exports.version = '1.1.0-dev';

				exports.tokenize = tokenize;

				exports.parse = parse;

				// Deep copy.
				exports.Syntax = (function () {
					var name, types = {};

					if (typeof Object.create === 'function') {
						types = Object.create(null);
					}

					for (name in Syntax) {
						if (Syntax.hasOwnProperty(name)) {
							types[name] = Syntax[name];
						}
					}

					if (typeof Object.freeze === 'function') {
						Object.freeze(types);
					}

					return types;
				}());

			}));
			return exports;
		})();

		var eswalker = (function (exports) {
			'use strict';

			var Syntax = {
				AssignmentExpression: 'AssignmentExpression',
				ArrayExpression: 'ArrayExpression',
				BlockStatement: 'BlockStatement',
				BinaryExpression: 'BinaryExpression',
				BreakStatement: 'BreakStatement',
				CallExpression: 'CallExpression',
				CatchClause: 'CatchClause',
				ConditionalExpression: 'ConditionalExpression',
				ContinueStatement: 'ContinueStatement',
				DoWhileStatement: 'DoWhileStatement',
				DebuggerStatement: 'DebuggerStatement',
				EmptyStatement: 'EmptyStatement',
				ExpressionStatement: 'ExpressionStatement',
				ForStatement: 'ForStatement',
				ForInStatement: 'ForInStatement',
				FunctionDeclaration: 'FunctionDeclaration',
				FunctionExpression: 'FunctionExpression',
				Identifier: 'Identifier',
				IfStatement: 'IfStatement',
				Literal: 'Literal',
				LabeledStatement: 'LabeledStatement',
				LogicalExpression: 'LogicalExpression',
				MemberExpression: 'MemberExpression',
				NewExpression: 'NewExpression',
				ObjectExpression: 'ObjectExpression',
				Program: 'Program',
				Property: 'Property',
				ReturnStatement: 'ReturnStatement',
				SequenceExpression: 'SequenceExpression',
				SwitchStatement: 'SwitchStatement',
				SwitchCase: 'SwitchCase',
				ThisExpression: 'ThisExpression',
				ThrowStatement: 'ThrowStatement',
				TryStatement: 'TryStatement',
				UnaryExpression: 'UnaryExpression',
				UpdateExpression: 'UpdateExpression',
				VariableDeclaration: 'VariableDeclaration',
				VariableDeclarator: 'VariableDeclarator',
				WhileStatement: 'WhileStatement',
				WithStatement: 'WithStatement'
			};

			var Walker = (function WalkerClosure() {

				function Walker() {
					this.walkBreakStatement = null;
					this.walkContinueStatement = null;
					this.walkDebuggerStatement = null;
					this.walkEmptyStatement = null;
					this.walkIdentifier = null;
					this.walkLiteral = null;
					this.walkThisExpression = null;

					this.enterAssignmentExpression = null;
					this.enterArrayExpression = null;
					this.enterBinaryExpression = null;
					this.enterBlockStatement = null;
					this.enterCallExpression = null;
					this.enterCatchClause = null;
					this.enterConditionalExpression = null;
					this.enterDoWhileStatement = null;
					this.enterExpressionStatement = null;
					this.enterForStatement = null;
					this.enterForInStatement = null;
					this.enterFunctionDeclaration = null;
					this.enterFunctionExpression = null;
					this.enterIfStatement = null;
					this.enterLabeledStatement = null;
					this.enterLogicalExpression = null;
					this.enterMemberExpression = null;
					this.enterNewExpression = null;
					this.enterObjectExpression = null;
					this.enterProgram = null;
					this.enterProperty = null;
					this.enterReturnStatement = null;
					this.enterSequenceExpression = null;
					this.enterSwitchStatement = null;
					this.enterSwitchCase = null;
					this.enterThrowStatement = null;
					this.enterTryStatement = null;
					this.enterUnaryExpression = null;
					this.enterUpdateExpression = null;
					this.enterVariableDeclaration = null;
					this.enterVariableDeclarator = null;
					this.enterWithStatement = null;
					this.enterWhileStatement = null;

					// Arrays
					this.enterCatchClauses = null;
					this.enterExpressions = null;
					this.enterParams = null;
					this.enterProperties = null;
					this.enterStatements = null;
					this.enterSwitchCases = null;
					this.enterVariables = null;

					this.exitAssignmentExpression = null;
					this.exitArrayExpression = null;
					this.exitBlockStatement = null;
					this.exitBinaryExpression = null;
					this.exitCallExpression = null;
					this.exitCatchClause = null;
					this.exitConditionalExpression = null;
					this.exitDoWhileStatement = null;
					this.exitExpressionStatement = null;
					this.exitForStatement = null;
					this.exitForInStatement = null;
					this.exitFunctionDeclaration = null;
					this.exitFunctionExpression = null;
					this.exitIfStatement = null;
					this.exitLabeledStatement = null;
					this.exitLogicalExpression = null;
					this.exitMemberExpression = null;
					this.exitNewExpression = null;
					this.exitObjectExpression = null;
					this.exitProgram = null;
					this.exitProperty = null;
					this.exitReturnStatement = null;
					this.exitSequenceExpression = null;
					this.exitSwitchStatement = null;
					this.exitSwitchCase = null;
					this.exitThrowStatement = null;
					this.exitTryStatement = null;
					this.exitUnaryExpression = null;
					this.exitUpdateExpression = null;
					this.exitVariableDeclaration = null;
					this.exitVariableDeclarator = null;
					this.exitWithStatement = null;
					this.exitWhileStatement = null;

					// Arrays
					this.exitCatchClauses = null;
					this.exitExpressions = null;
					this.exitParams = null;
					this.exitProperties = null;
					this.exitStatements = null;
					this.exitSwitchCases = null;
					this.exitVariables = null;
				}

				Walker.prototype = {

					walkStatementArray: function Walker_walkStatementArray(
						nodes, parent, fieldName) {
						var i;

						if (arguments.length &lt; 3) {
							throw "Invalid number of arguments.";
						}

						if (this.enterStatements) {
							this.enterStatements(nodes, parent, fieldName);
						}

						for (i = 0; i &lt; nodes.length; i++) {
							nodes[i] =
								this.walkElement(nodes[i], parent, fieldName, nodes,
									i);
						}

						return (this.exitStatements) ?
							this.exitStatements(nodes, parent, fieldName) : nodes;
					},

					walkExpressionArray: function Walker_walkExpressionArray(
						nodes, parent, fieldName) {
						var i;

						if (arguments.length &lt; 3) {
							throw "Invalid number of arguments.";
						}

						if (this.enterExpressions) {
							this.enterExpressions(nodes, parent,
								fieldName);
						}

						for (i = 0; i &lt; nodes.length; i++) {
							if (typeof nodes[i] !== 'undefined') {
								nodes[i] =
									this.walkElement(nodes[i], parent, fieldName,
										nodes, i);
							}
						}

						return (this.exitExpressions) ?
							this.exitExpressions(nodes, parent, fieldName) : nodes;
					},

					walkParamArray: function Walker_walkParamArray(
						nodes, parent, fieldName) {
						var i;

						if (arguments.length &lt; 3) {
							throw "Invalid number of arguments.";
						}

						if (this.enterParams) {
							this.enterParams(nodes, parent, fieldName);
						}

						for (i = 0; i &lt; nodes.length; i++) {
							nodes[i] =
								this.walkElement(nodes[i], parent, fieldName, nodes,
									i);
						}

						return (this.exitParams) ?
							this.exitParams(nodes, parent, fieldName) :
							nodes;
					},

					walkPropertyArray: function Walker_walkPropertyArray(
						nodes, parent, fieldName) {
						var i;

						if (arguments.length &lt; 3) {
							throw "Invalid number of arguments.";
						}

						if (this.enterProperties) {
							this.enterProperties(nodes, parent,
								fieldName);
						}

						for (i = 0; i &lt; nodes.length; i++) {
							nodes[i] =
								this.walkElement(nodes[i], parent, fieldName, nodes,
									i);
						}

						return (this.exitProperties) ?
							this.exitProperties(nodes, parent, fieldName) : nodes;
					},

					walkVariableArray: function Walker_walkVariableArray(
						nodes, parent, fieldName) {
						var i;

						if (arguments.length &lt; 3) {
							throw "Invalid number of arguments.";
						}

						if (this.enterVariables) {
							this.enterVariables(nodes, parent,
								fieldName);
						}

						for (i = 0; i &lt; nodes.length; i++) {
							nodes[i] =
								this.walkElement(nodes[i], parent, fieldName, nodes,
									i);
						}

						return (this.exitVariables) ?
							this.exitVariables(nodes, parent, fieldName) : nodes;
					},

					walkCatchArray: function Walker_walkCatchArray(
						nodes, parent, fieldName) {
						var i;

						if (arguments.length &lt; 3) {
							throw "Invalid number of arguments.";
						}

						if (this.enterCatchClauses) {
							this.enterCatchClauses(nodes,
								parent,
								fieldName);
						}

						for (i = 0; i &lt; nodes.length; i++) {
							nodes[i] =
								this.walkElement(nodes[i], parent, fieldName, nodes,
									i);
						}

						return (this.exitCatchClauses) ?
							this.exitCatchClauses(nodes, parent, fieldName) : nodes;
					},

					walkCaseArray: function Walker_walkCaseArray(
						nodes, parent, fieldName) {
						var i;

						if (arguments.length &lt; 3) {
							throw "Invalid number of arguments.";
						}

						if (this.enterSwitchCases) {
							this.enterSwitchCases(nodes, parent,
								fieldName);
						}

						for (i = 0; i &lt; nodes.length; i++) {
							nodes[i] =
								this.walkElement(nodes[i], parent, fieldName, nodes,
									i);
						}

						return (this.exitSwitchCases) ?
							this.exitSwitchCases(nodes, parent, fieldName) : nodes;
					},

					walkElement: function Walker_walkElement(
						node, parent, fieldName, siblings, index) {

						var implemented = false;

						if (arguments.length &lt; 3) {
							throw "Invalid number of arguments.";
						}

						switch (node.type) {
							case Syntax.AssignmentExpression:
								if (this.enterAssignmentExpression) {
									this.enterAssignmentExpression.apply(this,
										arguments);
								}
								node.left = this.walkElement(node.left, node, 'left');
								node.right =
									this.walkElement(node.right, node, 'right');
								node = (this.exitAssignmentExpression) ?
									this.exitAssignmentExpression.apply(this,
										arguments) : node;
								implemented = true;
								break;
							case Syntax.ArrayExpression:
								if (this.enterArrayExpression) {
									this.enterArrayExpression.apply(this,
										arguments);
								}
								node.elements =
									this.walkExpressionArray(node.elements, node,
										'elements');
								node = (this.exitArrayExpression) ?
									this.exitArrayExpression.apply(this,
										arguments) :
									node;
								implemented = true;
								break;
							case Syntax.BlockStatement:
								if (this.enterBlockStatement) {
									this.enterBlockStatement.apply(this,
										arguments);
								}
								node.body =
									this.walkStatementArray(node.body, node,
										'body');
								node = (this.exitBlockStatement) ?
									this.exitBlockStatement.apply(this, arguments) :
									node;
								implemented = true;
								break;
							case Syntax.BinaryExpression:
								if (this.enterBinaryExpression) {
									this.enterBinaryExpression.apply(this,
										arguments);
								}
								node.left = this.walkElement(node.left, node, 'left');
								node.right =
									this.walkElement(node.right, node, 'right');
								node = (this.exitBinaryExpression) ?
									this.exitBinaryExpression.apply(this,
										arguments) :
									node;
								implemented = true;
								break;
							case Syntax.BreakStatement:
								node = (this.walkBreakStatement) ?
									this.walkBreakStatement.apply(this, arguments) :
									node;
								implemented = true;
								break;
							case Syntax.CallExpression:
								if (this.enterCallExpression) {
									this.enterCallExpression.apply(this,
										arguments);
								}
								node.callee =
									this.walkElement(node.callee, node, 'callee');
								node['arguments'] =
									this.walkExpressionArray(node['arguments'], node,
										'arguments');
								node = (this.exitCallExpression) ?
									this.exitCallExpression.apply(this, arguments) :
									node;
								implemented = true;
								break;
							case Syntax.CatchClause:
								if (this.enterCatchClause) {
									this.enterCatchClause.apply(this,
										arguments);
								}
								node.param =
									this.walkElement(node.param, node, 'param');
								node.body = this.walkElement(node.body, node, 'body');
								node = (this.exitCatchClause) ?
									this.exitCatchClause.apply(this, arguments) :
									node;
								implemented = true;
								break;
							case Syntax.ConditionalExpression:
								if (this.enterConditionalExpression) {
									this.enterConditionalExpression.apply(this,
										arguments);
								}
								node.test = this.walkElement(node.test, node, 'test');
								node.consequent = this.walkElement(node.consequent, node, 'consequent');
								node.alternate = this.walkElement(node.alternate, node, 'alternate');
								node = (this.exitConditionalExpression) ?
									this.exitConditionalExpression.apply(this,
										arguments) : node;
								implemented = true;
								break;
							case Syntax.ContinueStatement:
								node = (this.walkContinueStatement) ?
									this.walkContinueStatement.apply(this,
										arguments) :
									node;
								implemented = true;
								break;
							case Syntax.DoWhileStatement:
								if (this.enterDoWhileStatement) {
									this.enterDoWhileStatement.apply(this, arguments);
								}
								node.body = this.walkElement(node.body, node, 'body');
								node.test = this.walkElement(node.test, node, 'test');
								node = (this.exitDoWhileStatement) ?
									this.exitDoWhileStatement.apply(this,
										arguments) :
									node;
								implemented = true;
								break;
							case Syntax.DebuggerStatement:
								node = (this.walkDebuggerStatement) ?
									this.walkDebuggerStatement.apply(this,
										arguments) :
									node;
								implemented = true;
								break;
							case Syntax.EmptyStatement:
								node = (this.walkEmptyStatement) ?
									this.walkEmptyStatement.apply(this, arguments) :
									node;
								implemented = true;
								break;
							case Syntax.ExpressionStatement:
								if (this.enterExpressionStatement) {
									this.enterExpressionStatement.apply(this,
										arguments);
								}
								node.expression =
									this.walkElement(node.expression, node,
										'expression');
								node = (this.exitExpressionStatement) ?
									this.exitExpressionStatement.apply(this,
										arguments) : node;
								implemented = true;
								break;
							case Syntax.ForStatement:
								if (this.enterForStatement) {
									this.enterForStatement.apply(this, arguments);
								}
								if (node.init) {
									node.init =
										this.walkElement(node.init, node, 'init');
								}
								if (node.test) {
									node.test =
										this.walkElement(node.test, node, 'test');
								}
								if (node.update) {
									node.update =
										this.walkElement(node.update, node, 'update');
								}
								node.body = this.walkElement(node.body, node, 'body');
								node = (this.exitForStatement) ?
									this.exitForStatement.apply(this, arguments) :
									node;
								implemented = true;
								break;
							case Syntax.ForInStatement:
								if (this.enterForInStatement) {
									this.enterForInStatement.apply(this, arguments);
								}
								node.left = this.walkElement(node.left, node, 'left');
								node.right =
									this.walkElement(node.right, node, 'right');
								node.body = this.walkElement(node.body, node, 'body');
								node = (this.exitForInStatement) ?
									this.exitForInStatement.apply(this, arguments) :
									node;
								implemented = true;
								break;
							case Syntax.FunctionDeclaration:
								if (this.enterFunctionDeclaration) {
									this.enterFunctionDeclaration.apply(this,
										arguments);
								}
								node.params =
									this.walkParamArray(node.params, node,
										'params');
								node.body = this.walkElement(node.body, node, 'body');
								node = (this.exitFunctionDeclaration) ?
									this.exitFunctionDeclaration.apply(this,
										arguments) : node;
								implemented = true;
								break;
							case Syntax.FunctionExpression:
								if (this.enterFunctionExpression) {
									this.enterFunctionExpression.apply(this, arguments);
								}
								node.params =
									this.walkParamArray(node.params, node,
										'params');
								node.body = this.walkElement(node.body, node, 'body');
								node = (this.exitFunctionExpression) ?
									this.exitFunctionExpression.apply(this,
										arguments) :
									node;
								implemented = true;
								break;
							case Syntax.Identifier:
								node =
									(this.walkIdentifier) ?
										this.walkIdentifier.apply(this,
											arguments) :
										node;
								implemented = true;
								break;
							case Syntax.IfStatement:
								if (this.enterIfStatement) {
									this.enterIfStatement.apply(this, arguments);
								}
								node.test = this.walkElement(node.test, node, 'test');
								node.consequent =
									this.walkElement(node.consequent, node,
										'consequent');
								if (node.alternate) {
									node.alternate =
										this.walkElement(node.alternate, node,
											'alternate');
								}
								node = (this.exitIfStatement) ?
									this.exitIfStatement.apply(this, arguments) :
									node;
								implemented = true;
								break;
							case Syntax.Literal:
								node =
									(this.walkLiteral) ?
										this.walkLiteral.apply(this,
											arguments) : node;
								implemented = true;
								break;
							case Syntax.LabeledStatement:
								if (this.enterLabeledStatement) {
									this.enterLabeledStatement.apply(this, arguments);
								}
								node.body = this.walkElement(node.body, node, 'body');
								node = (this.exitLabeledStatement) ?
									this.exitLabeledStatement.apply(this,
										arguments) :
									node;
								implemented = true;
								break;
							case Syntax.LogicalExpression:
								if (this.enterLogicalExpression) {
									this.enterLogicalExpression.apply(this, arguments);
								}
								node.left = this.walkElement(node.left, node, 'left');
								node.right =
									this.walkElement(node.right, node, 'right');
								node = (this.exitLogicalExpression) ?
									this.exitLogicalExpression.apply(this,
										arguments) :
									node;
								implemented = true;
								break;
							case Syntax.MemberExpression:
								if (this.enterMemberExpression) {
									this.enterMemberExpression.apply(this, arguments);
								}
								node.object =
									this.walkElement(node.object, node, 'object');
								node.property =
									this.walkElement(node.property, node,
										'property');
								node = (this.exitMemberExpression) ?
									this.exitMemberExpression.apply(this,
										arguments) :
									node;
								implemented = true;
								break;
							case Syntax.NewExpression:
								if (this.enterNewExpression) {
									this.enterNewExpression.apply(this,
										arguments);
								}
								node.callee =
									this.walkElement(node.callee, node, 'callee');
								node['arguments'] =
									this.walkExpressionArray(node['arguments'], node,
										'arguments');
								node = (this.exitNewExpression) ?
									this.exitNewExpression.apply(this, arguments) :
									node;
								implemented = true;
								break;
							case Syntax.ObjectExpression:
								if (this.enterObjectExpression) {
									this.enterObjectExpression.apply(this, arguments);
								}
								node.properties =
									this.walkPropertyArray(node.properties, node,
										'properties');
								node = (this.exitObjectExpression) ?
									this.exitObjectExpression.apply(this,
										arguments) :
									node;
								implemented = true;
								break;
							case Syntax.Program:
								if (this.enterProgram) {
									this.enterProgram.apply(this,
										arguments);
								}
								node.body =
									this.walkStatementArray(node.body, node,
										'body');
								node =
									(this.exitProgram) ?
										this.exitProgram.apply(this,
											arguments) : node;
								implemented = true;
								break;
							case Syntax.Property:
								if (this.enterProperty) {
									this.enterProperty.apply(this,
										arguments);
								}
								node.value =
									this.walkElement(node.value, node, 'value');
								node =
									(this.exitProperty) ?
										this.exitProperty.apply(this,
											arguments) :
										node;
								implemented = true;
								break;
							case Syntax.ReturnStatement:
								if (this.enterReturnStatement) {
									this.enterReturnStatement.apply(this,
										arguments);
								}
								if (node.argument) {
									node.argument =
										this.walkElement(node.argument, node,
											'argument');
								}

								node = (this.exitReturnStatement) ?
									this.exitReturnStatement.apply(this,
										arguments) :
									node;
								implemented = true;
								break;
							case Syntax.SequenceExpression:
								if (this.enterSequenceExpression) {
									this.enterSequenceExpression.apply(this,
										arguments);
								}
								node.expressions =
									this.walkExpressionArray(node.expressions, node,
										'expressions');
								node = (this.exitSequenceExpression) ?
									this.exitSequenceExpression.apply(this,
										arguments) :
									node;
								implemented = true;
								break;
							case Syntax.SwitchStatement:
								if (this.enterSwitchStatement) {
									this.enterSwitchStatement.apply(this,
										arguments);
								}
								node.discriminant =
									this.walkElement(node.discriminant, node,
										'discriminant');
								if (node.cases) {
									node.cases =
										this.walkCaseArray(node.cases, node,
											'cases');
								}
								node = (this.exitSwitchStatement) ?
									this.exitSwitchStatement.apply(this,
										arguments) :
									node;
								implemented = true;
								break;
							case Syntax.SwitchCase:
								if (this.enterSwitchCase) {
									this.enterSwitchCase.apply(this,
										arguments);
								}
								if (node.test) {
									node.test =
										this.walkElement(node.test, node, 'test');
								}
								node.consequent =
									this.walkStatementArray(node.consequent, node,
										'consequent');
								node =
									(this.exitSwitchCase) ?
										this.exitSwitchCase.apply(this,
											arguments) :
										node;
								implemented = true;
								break;
							case Syntax.ThisExpression:
								node = (this.walkThisExpression) ?
									this.walkThisExpression.apply(this, arguments) :
									node;
								implemented = true;
								break;
							case Syntax.ThrowStatement:
								if (this.enterThrowStatement) {
									this.enterThrowStatement.apply(this,
										arguments);
								}
								node.argument =
									this.walkElement(node.argument, node,
										'argument');
								node = (this.exitThrowStatement) ?
									this.exitThrowStatement.apply(this, arguments) :
									node;
								implemented = true;
								break;
							case Syntax.TryStatement:
								if (this.enterTryStatement) {
									this.enterTryStatement.apply(this,
										arguments);
								}
								node.block =
									this.walkElement(node.block, node, 'block');
								node.handlers =
									this.walkCatchArray(node.handlers, node,
										'handlers');
								if (node.finalizer) {
									node.finalizer =
										this.walkElement(node.finalizer, node,
											'finalizer');
								}
								node = (this.exitTryStatement) ?
									this.exitTryStatement.apply(this, arguments) :
									node;
								implemented = true;
								break;
							case Syntax.UnaryExpression:
								if (this.enterUnaryExpression) {
									this.enterUnaryExpression.apply(this,
										arguments);
								}
								node.argument =
									this.walkElement(node.argument, node,
										'argument');
								node = (this.exitUnaryExpression) ?
									this.exitUnaryExpression.apply(this,
										arguments) :
									node;
								implemented = true;
								break;
							case Syntax.UpdateExpression:
								if (this.enterUpdateExpression) {
									this.enterUpdateExpression.apply(this,
										arguments);
								}
								node.argument =
									this.walkElement(node.argument, node,
										'argument');
								node = (this.exitUpdateExpression) ?
									this.exitUpdateExpression.apply(this,
										arguments) :
									node;
								implemented = true;
								break;
							case Syntax.VariableDeclaration:
								if (this.enterVariableDeclaration) {
									this.enterVariableDeclaration.apply(this,
										arguments);
								}
								node.declarations =
									this.walkVariableArray(node.declarations, node,
										'declarations');
								node = (this.exitVariableDeclaration) ?
									this.exitVariableDeclaration.apply(this,
										arguments) : node;
								implemented = true;
								break;
							case Syntax.VariableDeclarator:
								if (this.enterVariableDeclarator) {
									this.enterVariableDeclarator.apply(this,
										arguments);
								}
								node.id = this.walkElement(node.id, node, 'id');
								if (node.init) {
									node.init =
										this.walkElement(node.init, node, 'init');
								}
								node = (this.exitVariableDeclarator) ?
									this.exitVariableDeclarator.apply(this,
										arguments) :
									node;
								implemented = true;
								break;
							case Syntax.WithStatement:
								if (this.enterWithStatement) {
									this.enterWithStatement.apply(this,
										arguments);
								}
								node.object =
									this.walkElement(node.object, node, 'object');
								node.body = this.walkElement(node.body, node, 'body');
								node = (this.exitWithStatement) ?
									this.exitWithStatement.apply(this, arguments) :
									node;
								implemented = true;
								break;
							case Syntax.WhileStatement:
								if (this.enterWhileStatement) {
									this.enterWhileStatement.apply(this,
										arguments);
								}
								node.test = this.walkElement(node.test, node, 'test');
								node.body = this.walkElement(node.body, node, 'body');
								node = (this.exitWhileStatement) ?
									this.exitWhileStatement.apply(this, arguments) :
									node;
								implemented = true;
								break;
						}

						if (!implemented) {
							process.stdout.write('Unimplemented: ' + node.type +
								'\nContents: ' +
								JSON.stringify(node) + '\n');
						}

						return node;
					},

					walk: function Walker_walk(root) {
						return this.walkElement(root, null, '');
					}

				};

				return Walker;
			})();

			function createWalker() {
				return new Walker();
			}

			// Sync with package.json.
			exports.version = '0.1.1';
			exports.createWalker = createWalker;

			return exports;
		}(typeof exports === 'undefined' ? (eswalker = {}) : exports));

		var custom_template = {

			/**
			 * Return a list with the name of node visitor functions that will be used in this template 
			 * @method walkFunctions
			 * @return [] walkFunctions
			 */
			walkFunctions: function () {

				var walkFunctions = [
					
					{ name: 'enterCallExpression' },
					{ name: 'enterFunctionExpression' },
					{ name: 'enterFunctionDeclaration' },
					{ name: 'enterVariableDeclaration' },
					{ name: 'enterAssignmentExpression' },
					{ name: 'enterExpressionStatement' },
					{ name: 'enterNewExpression' },
				];
				//#region 
				/*		            
				var walkFunctions = [
					{name: 'enterAssignmentExpression'},
					{name: 'enterArrayExpression'},
					{name: 'enterBlockStatement'},
					{name: 'enterBinaryExpression'},
					{name: 'enterBreakStatement'},
					{name: 'enterCallExpression'},
					{name: 'enterCatchClause'},
					{name: 'enterConditionalExpression'},
					{name: 'enterContinueStatement'},
					{name: 'enterDoWhileStatement'},
					{name: 'enterDebuggerStatement'},
					{name: 'enterEmptyStatement'},
					{name: 'enterExpressionStatement'},
					{name: 'enterForStatement'},
					{name: 'enterForInStatement'},
					{name: 'enterFunctionDeclaration'},
					{name: 'enterFunctionExpression'},
					{name: 'enterIdentifier'},
					{name: 'enterIfStatement'},
					{name: 'enterLiteral'},
					{name: 'enterLabeledStatement'},
					{name: 'enterLogicalExpression'},
					{name: 'enterMemberExpression'},
					{name: 'enterNewExpression'},
					{name: 'enterObjectExpression'},
					{name: 'enterProgram'},
					{name: 'enterProperty'},
					{name: 'enterReturnStatement'},
					{name: 'enterSequenceExpression'},
					{name: 'enterSwitchStatement'},
					{name: 'enterSwitchCase'},
					{name: 'enterThisExpression'},
					{name: 'enterThrowStatement'},
					{name: 'enterTryStatement'},
					{name: 'enterUnaryExpression'},
					{name: 'enterUpdateExpression'},
					{name: 'enterVariableDeclaration'},
					{name: 'enterVariableDeclarator'},
					{name: 'enterWhileStatement'},
					{name: 'enterWithStatement'}
				];
				*/
				//#endregion
				return walkFunctions;
			},

			/**
			 * Allow to write custom tags
			 * @method tags
			 * @param {} template_instance object through which we can access the attributes like config, comment_list, etc
			 * @return tags Object that contains the custom tags implementations
			 */
			tags: function (template_instance) {

				var tags = {

					'class': {
						/**
						 * Define the way to build comments for Class tag
						 * @method buildComment
						 * @param {} data
						 * @return {undefined}
						 */
						buildComment: function (data) {

							var instance = template_instance,                  //BaseTemplate instance
								config = instance.config,                      //User current config               
								available_options = config.tags['class'],      //Custom functions tags options
								pos,                                           // Empty comment obj
								comment = {
									pos: data.pos,
									end: data.end || null,
									tags: {
										'' : [],
										'class': [],
										'param': [],
										'author': [],
										'date': [],
										'extends': [],
										'requires': [],
										'memberof': []
									},
									data: data,
									//isClass: data.isClass,
									name: null
								},
								method_name = data.name,
								node = data.node,
								params = [],
								default_value = 'My function Description';

							if (data.lends) {
								comment.tags.lends = [data.lends];
								if (comment.pos &gt;= 0) {
									//Add comment to comment_list
									instance.comments_list.push(comment);
								}
								return;
							}

							if (available_options.desc) {
								if (available_options.desc.value) {
									default_value = available_options.desc.value;
								}
								comment.tags[''] = [default_value, ''];
							}

							//@class 
							if (data.className) {
								comment.name = data.className;
								comment.tags['class'] = [''];
							}

							/*
							//@author
							comment.tags.author = [author];

							//@date
							comment.tags.date = [new Date()];
		
							//@memberof
							comment.tags.memberof = [applicationScope.concat('.module:').concat(objectType)]; // global.module:sys_ui_script
							*/
							//@extends
							if (data.extendsClassName) {
								comment.tags.extends = [data.extendsClassName]; // 'module:'.concat(header.extendsClassName) // global.module:sys_ui_script.SrAJAXTableCompleter	
							}


							//@requires
							if (data.requires &amp;&amp; data.requires.length) {
								// make requires unique
								//console.log("data.requires ", data.requires)
								data.requires = data.requires.filter(function (inclusion, index, array) {
									return !array.some(function (compare, compareIndex) {
										if (compareIndex &gt; index) {
											return (inclusion == compare);
										}
									});
								}).sort(function (a, b) { return a.toLowerCase() &gt; b.toLowerCase(); });
								
								comment.tags.requires = [];

								data.requires.forEach(function (include) {
									comment.tags.requires.push(include);
								});
							}

							//@param statement
							if (node &amp;&amp; available_options.params &amp;&amp; node.params) {
								var array = node.params,
									size = array.length,
									i = 0,
									value;

								comment.tags.param = [];
								for (i; i &lt; size; i++) {
									comment.tags.param.push('{any} ' + array[i].name);
								}
							}

							//@return statement
							if (available_options.rtrn) {
								var value = '{any}';
								if (node &amp;&amp; node.body) {
									var body_elements = node.body.body;

									if (body_elements) {
										var size = body_elements.length;
										i = 0;
										for (var i = 0; i &lt; size; i++) {
											if (body_elements[i].type === 'ReturnStatement') {

												if (body_elements[i].argument) {
													if (body_elements[i].argument.name) {
														value = '{any} ' + body_elements[i].argument.name;
													} else {
														value = body_elements[i].argument.type;
														
														if ('ArrayExpression' === value) {
															value = '{Array&lt;any&gt;} ';//add_comment
														} else if ('ObjectExpression' === value || 'CallExpression' === value) {
															value = '{any} ';//add_comment
														} else if ('Literal' === value) {
															value = '{' + typeof (body_elements[i].argument.value) + '} '; //add_comment
														} else {
															value = '{' + value + '} '; //add_comment
														}
													}
												}
											}
										}
									}
								}
								comment.tags.returns = [value];
							}

							if (comment.pos &gt;= 0) {
								//Add comment to comment_list
								instance.comments_list.push(comment);
							}
						},

						/*
							search for class extensions 
								Class.create(AJAXTableCompleter,{})

							this will add the @lends tag
						*/
						enterVariableDeclaration: function (params) {
							var instance = this,
								node = params.node,
								declarations = node.declarations,
								size = declarations.length,
								i = 0,
								item,
								comment_data = {};

							for (i; i &lt; size; i++) {
								item = declarations[i];

								if (item.init &amp;&amp; item.init.type === 'CallExpression' &amp;&amp;
									item.init.callee &amp;&amp;
									item.init.callee.object &amp;&amp; item.init.callee.object.name == 'Class' &amp;&amp;
									item.init.callee.property &amp;&amp; item.init.callee.property.name == 'create') {

									//console.log('\t', item);
									
									instance.buildComment({
										className: item.id.name,
										pos: node.range[0], // the class name, position
										end: node.range[1]
									});

									item.init.arguments.some(function (argument) {
										if (argument.type == "ObjectExpression") {
											instance.buildComment({
												lends: [applicationScope, 'module:'.concat(objectType)].concat([item.id.name, 'prototype']).join('.'),
												pos: argument.range[0],
												end: argument.range[1]
											});
											return true;
										}
									});
								}
							}
						},

						/**
						 * Search for 'WsAbstractWatsonCore.prototype' = Object.extendsObject(...)
						 * 	also works with WsAbstractWatsonCore.prototype = {} (update the class end [range])
						 * 
						 * @method enterExpressionStatement
						 * @param {} params Object that contains properties like node, parent, fieldName, siblings, index
						 * @return
						 */
						enterExpressionStatement: function (params) {
							//console.log('class.enterExpressionStatement')
							var instance = this,
								leftNode = params.node.expression.left,
								rightNode = params.node.expression.right;

							
							if (!leftNode || !rightNode || leftNode.type != 'MemberExpression' || (rightNode.type != 'CallExpression' &amp;&amp; rightNode.type != 'ObjectExpression'))
								return;

							/*
								build the class name (left)
							*/
							var object = leftNode,
								pos = leftNode.range[0],
								end = rightNode.range[1],
								objects = [],
								index = 1;

							while (object) {
								index++;
								objects.push(object.property ? object.property.name : object.name);
								if (object.type == 'Identifier') {
									object = false;
								}
								object = object.object || false;

								if (index &gt; 10)
									object = false;
							}
							
							if (objects[0] != 'prototype')
								return;

							var classNameArray = objects.reverse();
							var className = objects[0];
							var classComment = template_instance.comments_list.find(function (comment, index) {
								return (comment.name == className);
							});

							if (!classComment)
								return;

							// set end position
							classComment.end = end;
							// in case of 'ObjectExpression' we can end here

							/*
								build the extends class name (right)
							*/
							if (rightNode.type == 'CallExpression' &amp;&amp; rightNode.callee.object &amp;&amp; rightNode.callee.property &amp;&amp; (
								(rightNode.callee.object.name == 'Class' &amp;&amp; rightNode.callee.property.name == 'create') ||
								(rightNode.callee.object.name == 'Object' &amp;&amp; rightNode.callee.property.name == 'extendsObject')
							)) {
								if (rightNode.arguments.length == 2) {
									object = rightNode.arguments[0];
									pos = rightNode.arguments[1].range[0];
									objects = [];
									index = 1;

									while (object) {
										index++;
										objects.push(object.property ? object.property.name : object.name);
										if (object.type == 'Identifier') {
											object = false;
										}
										object = object.object || false;

										if (index &gt; 10)
											object = false;
									}

									var extendsClassNameArray = objects.reverse();
									if (extendsClassNameArray.length == 1) {
										extendsClassNameArray = [applicationScope, 'module:'.concat(objectType)].concat(extendsClassNameArray);

									} else {
										var scopeName = extendsClassNameArray[0].toLowerCase();
										var containsScopeName = ['global', 'x_*'].some(function (exc) {
											return (/\*$/.test(exc)) ? (scopeName.indexOf(exc.replace(/\*$/, '')) === 0) : (scopeName == exc);
										});
										if (containsScopeName) {
											extendsClassNameArray = [extendsClassNameArray[0], 'module:'.concat(objectType)].concat(extendsClassNameArray.splice(1));
										} else {
											extendsClassNameArray = [applicationScope, 'module:'.concat(objectType)].concat(extendsClassNameArray);
										}
									}
									/*
										add the extends tag to the class definition
									*/
									classComment.tags.extends = [extendsClassNameArray.join('.')];
									
								}
							}
						},

						/**
						 * Search for Object.extendsObject(aaaa.bbbb.ClassName,{}) to embed the @ lends tag
						 * 
						 * @method enterAssignmentExpression
						 * @param {} params Object that contains properties like node, parent, fieldName, siblings, index
						 * @return {undefined}
						 */
						enterAssignmentExpression: function (params) {
							
							var instance = this,
								node = params.node,
								comment_data = null;
							
							if (node.left &amp;&amp; node.left.object) {

								/*
								root class pattern:

								var VirtualAppAbstract = Class.create();
								VirtualAppAbstract.prototype = {}
								*/

								if (node.right &amp;&amp; node.right.type == 'ObjectExpression' &amp;&amp; node.left.property &amp;&amp; node.left.property.name == 'prototype') {
									// ad the @lends tag
									
									var object = node.left,
										objects = [],
										index = 1;

									while (object) {
										index++;
										objects.push(object.property ? object.property.name : object.name);
										if (object.type == 'Identifier') {
											object = false;
										}
										object = object.object || false;

										if (index &gt; 10)
											object = false;
									}
									
									var startPos = node.right.range[0];
									instance.buildComment({
										lends: [applicationScope, 'module:'.concat(objectType)].concat(objects.reverse()).join('.'),
										pos: startPos,
										node: { params: null },
										name: null
									});
									
								} else
									
								/*
								extendsObject class pattern:
								
								var VirtualAppAbstract = Class.create();
								VirtualAppAbstract.prototype = Object.extends('className', {});
								*/
								
								if (node.right &amp;&amp;
									node.right.callee &amp;&amp;
									node.right.callee.object &amp;&amp;
									node.right.callee.object.name === 'Object' &amp;&amp;
									node.right.callee.property &amp;&amp;
									node.right.callee.property.name === 'extendsObject') {
									
									
									
									if ("MemberExpression" == node.left.type) {

										// ad the @lends tag
										if (node.right.arguments[1]) {
											var startPos = node.right.arguments[1].range[0];
											instance.buildComment({
												lends: [applicationScope, 'module:'.concat(objectType)].concat([node.left.object.name, node.left.property.name]).join('.'),
												pos: startPos,
												node: { params: null },
												name: null
											});	
										}
									}
								}
							}
						}
					},

					'function': {
						/**
						 * Define the way to build comments for functions tag
						 * @method buildComment
						 * @param {} data
						 * @return {undefined}
						 */
						buildComment: function (data) {

							var instance = template_instance,                  //BaseTemplate instance
								config = instance.config,                      //User current config               
								available_options = config.tags['function'],      //Custom functions tags options
								pos,                                           // Empty comment obj
								comment = {
									pos: data.pos,
									end: data.end || null,
									tags: {
										'': [],
										'method': [],
										'param': [],
										'author': [],
										'date': [],
										'requires': [],
										'memberof': [],
										'returns': [],
									},
								},
								method_name = data.methodName,
								node = data.node,
								params = [],
								default_value = 'My function Description';

							//Description statement
							if (available_options.desc) {
								if (available_options.desc.value) {
									default_value = available_options.desc.value;
								}
								comment.tags[''] = [default_value, ''];
							}
							
							//@method statement
							if (method_name) { // &amp;&amp; available_options.name
								comment.tags.method = [method_name];
							}

							//@param statement
							if (available_options.params &amp;&amp; node.params) {
								var array = node.params,
									size = array.length,
									i = 0,
									value;
								
								comment.tags.param = [];
								for (i; i &lt; size; i++) {
									comment.tags.param.push('{any} ' + array[i].name);
								}
							}

							//@return statement
							if (available_options.rtrn) {
								var value = '{undefined}';
								if (node.body) {
									var body_elements = node.body.body;

									if (body_elements) {
										var size = body_elements.length;
										i = 0;
										for (var i = 0; i &lt; size; i++) {
											if (body_elements[i].type === 'ReturnStatement') {
												//console.log(body_elements[i].argument)
												if (body_elements[i].argument) {
													if (body_elements[i].argument.name) {
														value = '{any} ' + body_elements[i].argument.name;
													} else {
														value = body_elements[i].argument.type;
														
														if ('ArrayExpression' === value) {
															value = '{Array&lt;any&gt;} ';//add_comment
														} else if ('ObjectExpression' === value || 'CallExpression' === value) {
															value = '{any} ';//add_comment
														} else if ('Literal' === value) {
															value = '{' + typeof (body_elements[i].argument.value) + '} '; //add_comment
														} else {
															value = '{' + value + '} '; //add_comment
														}
													}
												} else {
													//value = '{undefined}';
												}
											}
										}
									}
								}
								if(value)
									comment.tags.returns = [value];
							}

							if (comment.pos &gt;= 0) {
								//Add comment to comment_list
								instance.comments_list.push(comment);
							}
						},

						/**
						 * Concrete visitor function implementation for functions tags in default Template
						 * @method enterFunctionExpression
						 * @param {} params Object that contains properties like node, parent, fieldName, siblings, index
						 * @return {undefined}
						 */
						enterFunctionExpression: function (params) {
							
							var instance = this,
								comment_data = {},
								parent = params.parent;
							
							if (parent.type === 'Property') {
								//console.log('enterFunctionExpression: Property', parent);
								if (parent.key) {
									comment_data.name = parent.key.name;
								}

								comment_data.pos = parent.range[0];
								comment_data.end = parent.range[1];
								comment_data.node = params.node;
								instance.buildComment(comment_data);
							}
							else if (parent.type === 'AssignmentExpression') {
								//console.log('enterFunctionExpression: AssignmentExpression', parent);
								if (parent.right.type === 'FunctionExpression') {

									if (parent.left.property &amp;&amp; parent.left.property.name) {
										comment_data.name = parent.left.property.name;
									}

									comment_data.pos = parent.left.range[0];
									comment_data.end = parent.left.range[1];
									comment_data.node = parent.right;
									instance.buildComment(comment_data);
								}
							}
						},

						/**
						 * Find IFFE - named or anonymous
						 *  finds: 
						 *		(function () {
						 *			return null;
						 *		})();
						 *
						 *		(function functionName() {
					 	 *			return null;
						 *		})();
						 *
						 *	but NOT:
						 *		var test = (function () {
						 *			return null;
						 *		})();
						 * @method enterExpressionStatement
						 * @param {} params 
						 * @return {undefined}
						 */
						enterExpressionStatement: function (params) {
							
							var instance = this,
								comment_data = {},
								node = params.node;

							if (node.expression &amp;&amp; node.expression.callee &amp;&amp; node.expression.callee.type == 'FunctionExpression') { 
								
								comment_data.methodName = (node.expression.callee.id) ? node.expression.callee.id.name : 'anonymous-' + node.range[0];
								comment_data.node = node;
								comment_data.pos = node.range[0];
								comment_data.end = node.range[1];
								instance.buildComment(comment_data);
								
							}
						},

						/**
						 * Concrete visitor function implementation for functions tags in default Template
						 * @method enterFunctionDeclaration
						 * @param {} params Object that contains properties like node, parent, fieldName, siblings, index
						 * @return {undefined}
						 */
						enterFunctionDeclaration: function (params) {
							
							var instance = this,
								node = params.node,
								comment_data = {
									pos: node.range[0],
									end: node.range[1],
									name: node.id.name,
									node: node
								};
							instance.buildComment(comment_data);
						},

						/**
						 * Concrete visitor function implementation for functions tags in default Template
						 * @method enterVariableDeclaration
						 * @param {} params Object that contains properties like node, parent, fieldName, siblings, index
						 * @return {undefined}
						 */
						enterVariableDeclaration: function (params) {
							
							var instance = this,
								node = params.node,
								declarations = node.declarations,
								size = declarations.length,
								i = 0,
								item,
								comment_data = {};
							for (i; i &lt; size; i++) {
								item = declarations[i];

								if (item.init &amp;&amp; item.init.type === 'FunctionExpression') {
									comment_data.name = item.id.name;
									comment_data.node = item.init;

								}
							}

							if (comment_data.name) {
								comment_data.pos = node.range[0];
								comment_data.end = node.range[1];
								instance.buildComment(comment_data);
							}
						}

						// #region 
						/* 
						enterAssignmentExpression: function(params) {console.log('AssignmentExpression', params)}, 
						enterArrayExpression: function(params) {console.log('ArrayExpression', params)}, 
						enterBlockStatement: function(params) {console.log('BlockStatement', params)}, 
						enterBinaryExpression: function(params) {console.log('BinaryExpression', params)}, 
						enterBreakStatement: function(params) {console.log('BreakStatement', params)}, 
					    
						enterCallExpression: function(params) {console.log('CallExpression', params)}, 
						enterCatchClause: function(params) {console.log('CatchClause', params)}, 
						enterConditionalExpression: function(params) {console.log('ConditionalExpression', params)}, 
						enterContinueStatement: function(params) {console.log('ContinueStatement', params)}, 
						enterDoWhileStatement: function(params) {console.log('DoWhileStatement', params)}, 
						enterDebuggerStatement: function(params) {console.log('DebuggerStatement', params)}, 
						enterEmptyStatement: function(params) {console.log('EmptyStatement', params)}, 
						enterExpressionStatement: function(params) {console.log('ExpressionStatement', params)}, 
						enterForStatement: function(params) {console.log('ForStatement', params)}, 
						enterForInStatement: function(params) {console.log('ForInStatement', params)}, 
						enterFunctionDeclaration: function(params) {console.log('FunctionDeclaration', params)}, 
						enterFunctionExpression: function(params) {console.log('FunctionExpression', params)}, 
						enterIdentifier: function(params) {console.log('Identifier', params)}, 
						enterIfStatement: function(params) {console.log('IfStatement', params)}, 
						enterLiteral: function(params) {console.log('Literal', params)}, 
						enterLabeledStatement: function(params) {console.log('LabeledStatement', params)}, 
						enterLogicalExpression: function(params) {console.log('LogicalExpression', params)}, 
						enterMemberExpression: function(params) {console.log('MemberExpression', params)}, 
						enterNewExpression: function(params) {console.log('NewExpression', params)}, 
						enterObjectExpression: function(params) {console.log('ObjectExpression', params)}, 
						enterProgram: function(params) {console.log('Program', params)}, 
						enterProperty: function(params) {console.log('Property', params)}, 
						enterReturnStatement: function(params) {console.log('ReturnStatement', params)}, 
						enterSequenceExpression: function(params) {console.log('SequenceExpression', params)}, 
						enterSwitchStatement: function(params) {console.log('SwitchStatement', params)}, 
						enterSwitchCase: function(params) {console.log('SwitchCase', params)}, 
						enterThisExpression: function(params) {console.log('ThisExpression', params)}, 
						enterThrowStatement: function(params) {console.log('ThrowStatement', params)}, 
						enterTryStatement: function(params) {console.log('TryStatement', params)}, 
						enterUnaryExpression: function(params) {console.log('UnaryExpression', params)}, 
						enterUpdateExpression: function(params) {console.log('UpdateExpression', params)}, 
						enterVariableDeclaration: function(params) {console.log('VariableDeclaration', params)}, 
						enterVariableDeclarator: function(params) {console.log('VariableDeclarator', params)}, 
						enterWhileStatement: function(params) {console.log('WhileStatement', params)}, 
						enterWithStatement: function(params) {console.log('WithStatement', params)} 
					   */
						// #endregion
					},

					'requires': {
						buildComment: function (data) {
							var instance = template_instance;
							
							var parentObj = instance.comments_list.find(function (comment) {
								return (comment.pos &lt;= data.pos &amp;&amp; comment.end &gt;= data.pos);
							});

							if (parentObj) {
								parentObj.tags.requires = parentObj.tags.requires || [];
								if (parentObj.tags.requires.indexOf(data.req) === -1) {
									parentObj.tags.requires.push(data.req);	
								}
							}
						},


						enterNewExpression: function (params) {
							//console.log('enterNewExpression', params);
							return this.requiresExpression(params);
						},

						requiresExpression: function (params, include) {
							var instance = this;

							var object = params.node.callee,
								pos = params.node.range[0];

							var objects = [];
							var index = 1;
							while (object) {
								index++;
								objects.push(('ThisExpression' == object.type ? 'this' : object.property ? object.property.name : object.name) || 'undefined');
								if (object.type == 'Identifier') {
									object = false;
								}
								object = object.object || false;

								if (index &gt; 10)
									object = false;
							}

							if (objects.length) {

								// reverse sort;
								objects.reverse();

								if (Array.isArray(include)) {
									var first = objects[0].toLowerCase();
									if (include.some(function (inc) {
										return (first.indexOf(inc.toLowerCase()) === 0);
									})) {
										instance.buildRequires(objects, pos);
									}
								} else {
									instance.buildRequires(objects, pos);
								}
							}
						},

						buildRequires: function (requiresClassArray, pos) {
							var self = this;

							if (requiresClassArray) {

								//var header = self.getHeader(pos);

								/*
									new global.Processor('a','b');
									new Processor('a','b');
								*/

								var jsGlobals = ['Object', 'Function', 'Boolean', 'Symbol', 'Error', 'EvalError', 'InternalError', 'RangeError', 'ReferenceError', 'SyntaxError', 'TypeError', 'URIError', 'Number', 'Math', 'Date', 'String', 'RegExp', 'Array', 'Int8Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array', 'Float32Array', 'Float64Array', 'Map', 'Set', 'WeakMap', 'WeakSet', 'ArrayBuffer', 'DataView', 'JSON', 'Promise', 'Generator', 'GeneratorFunction', 'Reflect', 'Proxy', 'Intl', 'WebAssembly'],
									excludeExpression = ['gs', 'Glide', 'this', 'undefined', 'Class', 'Gwt'].concat(jsGlobals),
									scopePattern = ['global', 'x_*', 'sn_*'],
									requiresClass = requiresClassArray.join('.'),
									lowerExpr = requiresClass.toLowerCase();

								//console.log("lowerExpr", lowerExpr);
								//console.log("excludeExpression ", excludeExpression);
								var inValidExpression = excludeExpression.some(function (exc) {
									return (lowerExpr.indexOf(exc.toLowerCase()) === 0);
								});
								if (inValidExpression) {
									//console.log("invalidExpression", requiresClassArray)
									return;
								}

								var currentIsClassObjectType = (['sys_script_include', 'sys_ui_script'].indexOf(objectType) !== -1);
								var requiresObjectType = (currentIsClassObjectType) ? objectType : 'sys_script_include';

								if (requiresClassArray.length &gt; 1) {
									var scopeName = requiresClassArray[0].toLowerCase();
									var containsScopeName = scopePattern.some(function (exc) {
										return (/\*$/.test(exc)) ? (scopeName.indexOf(exc.replace(/\*$/, '')) === 0) : (scopeName == exc);
									});
									//console.log('containsScopeName ', containsScopeName)

									if ((containsScopeName &amp;&amp; requiresClassArray.length &gt; 2) || (!containsScopeName &amp;&amp; requiresClassArray.length &gt; 1)) {
										var last = requiresClassArray.splice(-1, 1);
										requiresClassArray[requiresClassArray.length - 1] = requiresClassArray[requiresClassArray.length - 1].concat('#').concat(last);
									}
								}

								if (requiresClassArray.length == 1) {
									requiresClassArray = [applicationScope, 'module:'.concat(requiresObjectType)].concat(requiresClassArray);

								} else {
									var scopeName = requiresClassArray[0].toLowerCase();
									var containsScopeName = scopePattern.some(function (exc) {
										return (/\*$/.test(exc)) ? (scopeName.indexOf(exc.replace(/\*$/, '')) === 0) : (scopeName == exc);
									});
									if (containsScopeName) {
										requiresClassArray = [requiresClassArray[0], 'module:'.concat(requiresObjectType)].concat(requiresClassArray.splice(1));
									} else {
										requiresClassArray = [applicationScope, 'module:'.concat(requiresObjectType)].concat(requiresClassArray);
									}
								}

								//console.log("buildRequires ", requiresClass, pos, requiresClassArray);
								//header.requires.push(requiresClassArray.join('.'));

								self.buildComment({
									pos: pos,
									req: requiresClassArray.join('.')
								});
							}
						}
						
					}
				};
				return tags;
			}
		};
		
		var BaseTemplate = {
			initialize: function (config) {
				var instance = BaseTemplate;
				instance.config = config;
			},

			executeWalk: function (walkname, params) {
				var instance = BaseTemplate,
					tags;
				//For every tag 
				Object.keys(instance.tags).forEach(function (item, index) {
					if (instance.tags[item][walkname] &amp;&amp; instance.config.tags[item]) {
						instance.tags[item][walkname](params);
					}
				});
			},

			getCommentsList: function () {
				var instance = BaseTemplate;
				return instance.comments_list;//.concat(instance.header_comments_list);
			},

			setCommentsList: function (list) {
				var instance = BaseTemplate;
				instance.comments_list = list;
			},

			//ATTR
			comments_list: [],
			headerComments: [],
			header_comments_list: [],
			config: {}
		};

		var  SmartComments = {

	        initialize: function(config) {
	            var instance = SmartComments;

	            //initializing our own walker 
	            instance.SmartCommentsWalker = eswalker.createWalker();

	            //esprima obj
	            instance.esprima = esprima;
				
	            instance.config = config;
    
				instance.template = BaseTemplate;
				//TODO: Might be dynamically
				instance.template.walkFunctions = custom_template.walkFunctions;
				instance.template.tags = custom_template.tags(instance.template);

	            if (instance.template) {
	                instance.template.initialize(config);

	                //build users defined functions to walker
	                instance.buildWalkFunctions();
	                return true;
	            }
	            return false;
	        },

	        //esto es para que walker sepa que funciones son las que tiene que ejecuctar
	        buildWalkFunctions: function() {
	            var instance = this,
	                template = instance.template,
	                SmartCommentsWalker = instance.SmartCommentsWalker,
	                default_function,
	                walkFunctions = template.walkFunctions();

	            walkFunctions.forEach(function(item, index){
	                default_function = function(node, parent, fieldName, siblings, index) {
	                        var instance = template,
	                            params = {
	                                node: node,
	                                parent: parent,
	                                fieldName: fieldName,
	                                siblings: siblings,
	                                index: index
	                            };
	                        instance.executeWalk(item.name, params);
	                };

	                if(item.func){
	                    //user custom function
						default_function = item.func;
	                }
	                SmartCommentsWalker[item.name] = default_function;
	            });
	       
	        },

			parse: function (source){
				var instance = SmartComments;
				return instance.esprima.parse(source, {
					tokens: true,
					range: true,
					tolerant: true,
					comment: true
				});
			},

	        generate: function(source, config) {
	            var instance = SmartComments,
	                ast,
                    result = {};
                
	            try {
	                ast = instance.esprima.parse(source, {
	                    tokens: true,
	                    range: true,
	                    tolerant: true,
	                    comment: true
	                });
	            } catch (e) {
	                result.error = { 
	                    message: 'Sorry, we have some problems to parse your code',
	                    details: e
	                };
	            }
	            if (ast) {

					var process = function () {
						instance.comments_list = [];

						instance.template.setCommentsList(instance.comments_list);
						
						instance.SmartCommentsWalker.walk(ast);
						//console.log("AST", ast);
						instance.comments_list = instance.template.getCommentsList();
					
						/* check for lends tags and find it's corresponding class
							if the class can not be found, remove the lends tag again.
						*/
						instance.comments_list.slice().reverse().forEach(function (comment, index, object) {
							
							if (comment.tags.lends &amp;&amp; comment.tags.lends.length) {
								var seg = comment.tags.lends[0].split('.');
								var className = (seg[seg.length - 1] == 'prototype') ? seg[seg.length - 2] : seg[seg.length - 1];
								var found = instance.comments_list.find(function (classComment) {
									return (classComment.name == className);
								});
								if (!found) {
									instance.comments_list.splice(object.length - 1 - index, 1);
								}
							}
						});

						// add default tags to the parent object
						instance.comments_list.forEach(function (comment, index) {
							var parentObj = instance.comments_list.find(function (parent) {
								//console.log("comment.pos", comment.pos, "  parent.pos", parent.pos, " comment.end", comment.end, " parent.end", parent.end)
								return (parent !== comment &amp;&amp; parent.pos &lt;= comment.pos &amp;&amp; parent.end &gt;= comment.end);
							});
							
							if (!parentObj) {
								/*
									there is no parent, so this must be on top level
								*/
								//@author
								comment.tags.author = [author];

								//@date
								//comment.tags.date = [new Date()];

								//@memberof
								comment.tags.memberof = [applicationScope.concat('.module:').concat(objectType)]; // global.module:sys_ui_script
							
							}
							
						});
						
						instance.mergeWithExistingComments(instance, ast, source, config.favor_generated);	

					};
	                
					process();
					
					// set the new comments (merged wiht the existing ones)
					source = instance.applyComments(instance.comments_list, source);

					
					if (source.indexOf('@lends') !== -1 || source.indexOf('@class') !== -1) {
						
						//
						//	do the same thing again if there is a @lends or @class tag in place
						//	this tag might need to go if the script is not extending a class anymore.
						//
						ast = instance.parse(source);

						process();

						// bottom up remove all 'lends/class' comments
						ast.comments.reverse().forEach(function (comment) {
							if (comment.matched === undefined &amp;&amp; (comment.value.indexOf('@lends') !== -1 || comment.value.indexOf('@class') !== -1)) {
								//console.log("remove comment", comment)
								source = source.slice(0, comment.range[0]) + source.slice(comment.range[1]);
							}
						});	
					}
					
					return source;
	            } else {
	                return result;
	            }
	        },


	        /**
	         * Find any comments for functions in the source and merge them with the smartcomments-
	         * generated ones.
	         * @method mergeWithExistingComments
	         * @param instance {object} the SmartComments instance
	         * @param {object} ast - the esprima-generated AST
	         * @param {string} source - the text from the source file
	         * @param {boolean} favorGenerated - if true, favor generated comment tags over those from the source file wherever there is no clear choice (e.g., @return, @returns)
	         */
			mergeWithExistingComments: function (instance, ast, source, favorGenerated) {

				instance.comments_list.forEach(function (generatedComment, i) {
					var srcComment = instance.findMatchingComment(generatedComment, ast, source);
					if (srcComment) {
						generatedComment.srcComment = srcComment;
						instance.mergeSrcAndGeneratedComment(instance, generatedComment, favorGenerated);
					}
				});
	        },


	        /**
	         * Find a comment in the source that is for the same function as the given generatedComment.
	         * @method findMatchingComment
	         * @param {object} generatedComment - the smartcomments comment to match in the source.
	         * @param {object} ast - the esprima-generated AST
	         * @param {string} source - the text from the source file
	         * @return found {boolean}
	         */
	        findMatchingComment: function(generatedComment, ast, source) {
				var found;
                ast.comments.some(function (comment) {
					if (comment.type === 'Block') {
						if (comment.range[1] &lt;= generatedComment.pos
							&amp;&amp; comment.value.match(/^\*\s*/)
							//&amp;&amp; comment.value.match(/\*\s?\n\s{1,}\*/)
							&amp;&amp; source.slice(comment.range[1], generatedComment.pos).match(/^\s*$/)) { //source.slice(comment.range[1], generatedComment.pos).match(/^\s*$/)  source.slice(comment.range[2], generatedComment.pos).match(/^\/\*\*/m)
							
							comment.matched = true;
							found = comment;
							return found;
						}
					}
                });
	            return found;
	        },

	        /**
	         * Merge a YUIDoc comment in the source file with the smartcomments- generated one.  Favor
	         * entries from the source.  Save the merged comment lines in generatedComment.tags.
	         *
	         * @method mergeSrcAndGeneratedComment
	         * @param {object} instance - the SmartComments instance
	         * @param {object} generatedComment - the smartcomments comment object, with the source comment added as an attribute named generatedComment.srcComment.
	         * @param {boolean} favorGenerated - if true, favor generated comment tags over those from the source file wherever there is no clear choice (e.g., @return, @returns)
			 * @returns {any}
	         */
	        mergeSrcAndGeneratedComment: function(instance, generatedComment, favorGenerated) {
	            var srcComment = generatedComment.srcComment,
	                mergedCommentLines = {};

				var tagConfig = {
					author: { num: null },
					date: { num: 1 },
					class: { num: 1 },
					lends: { num: 1 },
					memberof: { num: 1 },
					extends: { num: 1 },
					method: { num: 1 },
					returns: { num: 1 },
					requires: { num: null },
					param: { num: null }
				};
				var config,
					matchingSrcTags	;

	            // process each src comment line, and remove matching comments from generatedComment
				var srcCommentTags = srcComment.value.replace(/^\*\s*\n\s*|\n\s*$/g, '').split(/\r?\n/).reduce(function (tags, commentLine) {
					var parsedTag = instance.parseTagNameValue(commentLine);
					if (tags[parsedTag.name]) {
						tags[parsedTag.name].push(parsedTag.value);
					} else {
						tags[parsedTag.name] = [parsedTag.value];
					}
					return tags;
				}, {});
				
				Object.keys(generatedComment.tags).forEach(function (tagName) {
					
					var tagValues = generatedComment.tags[tagName];
					// no values, no need to merge, return
					/*
					if (tagValues.length === 0)
						return;
					*/
					// init merge comment field
					mergedCommentLines[tagName] = mergedCommentLines[tagName] || [];
					
					/*
						tags where the generated comments always winns
					*/
					if (tagName === 'requires' ||  // tagName === '@class' || tagName === '@extends' ||
						tagName === 'date' || tagName === 'lends' || tagName === 'memberof' || tagName === 'extends' ||
						tagName === 'method' || (favorGenerated &amp;&amp; tagName === 'return')) {

						config = tagConfig[tagName] || {};
						if (config.num) {
							tagValues.forEach(function (value, index) {
								if (index &lt; config.num) {
									mergedCommentLines[tagName].push(value);
								}
							});
						} else {
							mergedCommentLines[tagName] = tagValues;
						}
						
					} else if (tagName === 'param') {
						/*
							merge the parameter tags with the one from the source code
						*/
						tagValues.forEach(function (_tag, _tagindex) {
							var tag = ''.concat(_tag);
							(srcCommentTags[tagName] || []).forEach(function (srcTag, scrIndex) {
								if (instance.isSameParam(srcTag, tag)) {
									// same tag name
									tag = srcTag;
								} else if (scrIndex == _tagindex) {
									// same position (in case of tag rename)
									tag = srcTag.replace(instance.stripParam(srcTag), instance.stripParam(tag));
								}
							});
							mergedCommentLines[tagName].push(tag);
						});

					} else if (tagName === 'returns') {

						if (tagValues.length) { // its ok to have a return value
							matchingSrcTags = srcCommentTags[tagName];
							if (matchingSrcTags &amp;&amp; matchingSrcTags.length &amp;&amp; matchingSrcTags[0].length) {

								var srcTagObj = instance.parseTag(matchingSrcTags[0]);
								var genTagObj = instance.parseTag(tagValues[0]);
								if (srcTagObj &amp;&amp; genTagObj) {
									
									if (genTagObj.type.toLowerCase() == '{undefined}' &amp;&amp; srcTagObj.type.toLowerCase() != '{undefined}') {
										matchingSrcTags = [genTagObj.type.concat(srcTagObj.text)];
										
									}
									if (genTagObj.type.toLowerCase() != '{undefined}' &amp;&amp; srcTagObj.type.toLowerCase() == '{undefined}') {
										matchingSrcTags = [genTagObj.type.concat(srcTagObj.text)];
										
									}
								}
								mergedCommentLines[tagName] = [matchingSrcTags[0]];

							} else {
								mergedCommentLines[tagName] = tagValues;
							}
						} else {
							mergedCommentLines[tagName] = [];
						}

					} else {
						/*
							all the remaining tags, check if there is already a value in the source comment
						*/
						matchingSrcTags = srcCommentTags[tagName];
						if (matchingSrcTags &amp;&amp; matchingSrcTags.length &gt; 0) {
							
							config = tagConfig[tagName] || {};
							if (config.num) {
								matchingSrcTags.forEach(function (value, index) {
									if (index &lt; config.num) {
										mergedCommentLines[tagName].push(value);
									}
								});
							} else {
								mergedCommentLines[tagName] = matchingSrcTags;
							}
							/*
								cosmetic, add a new line after comment
							*/
							if (tagName === '' &amp;&amp; mergedCommentLines[tagName].length == 1) {
								mergedCommentLines[tagName].push('');
							}
							

						} else if(tagValues.length) {
							/*
								there is no version in the soucre code if this tag, copy 
							*/
							config = tagConfig[tagName] || {};
							if (config.num) {
								tagValues.forEach(function (value, index) {
									if (index &lt; config.num) {
										mergedCommentLines[tagName].push(value);
									}
								});
							} else {
								mergedCommentLines[tagName] = tagValues;
							}
						}

					}					
	            });

				/*
				console.log('srcCommentTags', JSON.parse(JSON.stringify(srcCommentTags)))
				console.log('mergedCommentLines', JSON.parse(JSON.stringify(mergedCommentLines)))
				console.log('generatedComment.tags', JSON.parse(JSON.stringify(generatedComment.tags)))
				*/

				/*
					Add the comments from the code which are not know / supported  (actually all the rest)
					to the position the tag has in the source code.
				*/
				Object.keys(srcCommentTags).forEach(function (tagName, index) {
					if (mergedCommentLines[tagName] === undefined) {
						var tempComment = {};
						Object.keys(mergedCommentLines).forEach(function (mTagName, i) {
							if (index === i) {
								tempComment[tagName] = srcCommentTags[tagName];
							}
							tempComment[mTagName] = mergedCommentLines[mTagName];
						});
						mergedCommentLines = tempComment;
					}
				});
	            generatedComment.tags = mergedCommentLines;
	        },

			parseTag: function (string) {
				var out = null;
				var res = string.match(/^[^\{]*({.*})(.*)$/);
				if (res &amp;&amp; res.length) {
					out = {
						type: res[1],
						text: res[2]
					};
				}
				return out;
			},
			

	        /**
	         * Parse a src comment line into a tagname and value.  tagname will be '' if there is no tag.
	         * @method parseTagNameValue
	         * @param {string} commentLine - the src comment line to parse into tagname and value
	         * @return {object} e.g., { name: '@param', value: '{string} commentLine - the src ...'}
	         */
            parseTagNameValue: function (commentLine) {
                
	            var clean = commentLine.replace(/^\s*\*?\s*/, ''),    // strip leading ' * '
	                nameValueMatch = /^(?:(@\w+)\s+)?([^\r\n]*)/.exec(clean+'  ');
                
	            return {
					name: (nameValueMatch[1] || '').trim().replace(/^@/, ''),
	                value: (nameValueMatch[2] || '').trim(),
	            };
	        },


	        /**
	         * For a @param comment line, check if the given srcParamCommentLine is for the same
	         * parameter as the passed-in tag from the smartcomments-generated comment.
	         *
	         * @method isSameParam
	         * @param srcValue {string} a @param comment line from the source file.
	         * @param genValue {string} a @param value from a smartcomments-generated comment.
	         * @return {boolean} true if the two describe the same parameter.  otherwise, false.
	         */
	        isSameParam: function(srcValue, genValue) {
				var stripTypeRe = /\{[^\}]*\}/,
                    matchValRe = /^\s*\[?(\w+)\]?/;
                
                var src = srcValue;
                var gen = genValue;
	            srcValue = srcValue.replace(stripTypeRe, '');
                genValue = genValue.replace(stripTypeRe, '');
                try {
                    return (matchValRe.exec(srcValue)[1] === matchValRe.exec(genValue)[1]);
				} catch (e) {
					//console.log(srcValue, matchValRe)
					//console.log(genValue, matchValRe)
					console.error(e);
                    return false;
                }
	        },

			stripParam: function (paramValue) {
				var stripTypeRe = /\{[^\}]*\}/,
					matchValRe = /^\s*\[?(\w+)\]?/;

				paramValue = paramValue.replace(stripTypeRe, '');
				var match = matchValRe.exec(paramValue);
				return (match.length === 2) ? match[1] : null;
			},


	        /**
	         * For a given genTag tagname, find all src comment tags with the same tag name.
	         * E.g., if genTag.name === '@param', this method returns all src comment tags that are @param tags.
	         *
	         * @method findMatchingSrcTags
	         * @param {object} genTag - the generated comment tag with the tagname to match
	         * @param {array} srcCommentTags - the src comment tags from a src comment block.
	         * @return {array} matching - list of matching src tags
	         */
	        findMatchingSrcTags: function(genTag, srcCommentTags) {
				var matching = srcCommentTags.reduce(function(memo, srcTag) {
					if (srcTag.name === genTag &amp;&amp; (srcTag.name || srcTag.value || srcTag.name == '') ) {
	                    memo.push(srcTag);
					} else if (genTag === '@return' &amp;&amp; srcTag.name === '@returns') {
	                    // if using JSDoc, the source might be using @returns
	                    memo.push(srcTag);
	                }
	                return memo;
	            }, [ ]);
	            
	            return matching;
	        },

	        /**
	         * Merge in src comment tags that don't have counterparts in the SmartComments templates - e.g., @class,
	         * @static, etc.
	         * @deprecated
	         * @method mergeOtherSrcTags
	         * @param {array} srcCommentTags - src comment tags from a comment block in the source file.
	         * @param {array} mergedCommentLines - list of output comment lines to add to (tags)
	         */
	        mergeOtherSrcTags: function(srcCommentTags, mergedCommentLines) {
	            var i;
				for (i = 0; i &lt; Object.keys(mergedCommentLines).length &amp;&amp; Object.keys(mergedCommentLines)[i] !== 'method'; i += 1) ;

				srcCommentTags.forEach(function(srcTag) {
                    
					var found = Object.keys(mergedCommentLines).some(function (mTagName) {
						if (mTagName == srcTag.name &amp;&amp; mergedCommentLines[mTagName].indexOf(srcTag.value) !== -1) {
							return true;
						}
					});
					
	            	if(!found){
                        //mergedCommentLines.splice(i++, 0, srcTag);
                        switch (srcTag.name) {
                            case '':
                                break;
                            case 'module':
                                break;
                            case 'method':
								break;
							case 'change_history':
								break;
							case 'class':
								break;
							case 'extends':
								break;
							case 'lends':
								break;
                            case 'param':
                                
                            case 'return':
                                
                            case 'returns':
                            
                            case 'author':
                                
                            case 'date':
                                
							case 'NR':
							
							case 'requires':
								
							default:
								mergedCommentLines[srcTag.name] = mergedCommentLines[srcTag.name] || [];
								if (mergedCommentLines[srcTag.name].indexOf(srcTag.value) === -1) {
									mergedCommentLines[srcTag.name].push(srcTag.value);	
								}
                        }
                    }    
                });
	        },

	        applyComments: function(comments_list, source) {
	            var instance = SmartComments,
	                size = comments_list.length,
	                i = size - 1,
	                comment;

                for (i; i &gt;= 0; i--) {
	                comment_value = instance.createComment(comments_list[i], source);
	                var startPos = comments_list[i].pos,
	                    endPos = null;
	                if (comments_list[i].srcComment) {
						startPos = comments_list[i].srcComment.range[0];
						endPos = comments_list[i].pos;
	                }
	                source = instance.insertString(comment_value, startPos, endPos, source);
	            }
	            return source;
	        },

			createComment: function (comment, source) {

				var value = '/**\n',
					tag_names = Object.keys(comment.tags),
	                size = tag_names.length,
	                i = 0,
	                iterator = comment.pos - 1,
	                buffer = '',
	                currentChar,
                    especialChars = "!@#$%^&amp;*()+=-[]\\';,./{}|\":&lt;&gt;?\n",
					oneLiner = (Object.keys(comment.tags).reduce(function (cnt, tagName) {
						return (cnt + comment.tags[tagName].length);
					}, 0) === 1);
				
                if (!oneLiner) {
                    if (comment.pos === 0)
                        iterator = 0;
                    while (iterator &gt; 0) {
						currentChar = source[iterator];
                        if (especialChars.indexOf(currentChar) != -1) {
                            if (currentChar !== '\n') {
                                value = '\n' + value;
                            }
                            break;
                        }
                        buffer += currentChar;
                        iterator--;
                    }

					Object.keys(comment.tags).forEach(function (tagName) {
						var tagValues = comment.tags[tagName];
						if (tagValues.length) {
							tagName = tagName ? '@'.concat(tagName) : tagName;
							tagValues.forEach(function (tagValue) {
								value += buffer + ' * ' + ((tagName !== '') ? tagName + ' ' : '') + tagValue + '\n';
							});
						}
					});
					
                    value += buffer + ' */\n' + buffer; 
                	
				} else {
					Object.keys(comment.tags).forEach(function (tagName) {
						var tagValues = comment.tags[tagName];
						if (tagValues.length) {
							tagName = tagName ? '@'.concat(tagName) : tagName;
							value = "/** " + tagName + ' ' + tagValues[0] + " */ ";
						}
					});
                }
                return value;
	        },

			insertString: function (stringToInsert, startPos, endPos, source) {
				//console.log('insertString', stringToInsert, startPos, endPos)
	            var prefix = source.slice(0, startPos),
	                suffix = source.slice(endPos || startPos);

	            return prefix + stringToInsert + suffix;
	        },

	        //ATTRS
	        comments_list: [],
	        //esprima object
	        esprima: {},

	        //WalkerInterface
	        SmartCommentsWalker: {},

	        config: {}

	    };

		return {
			initialize: SmartComments.initialize,
			generate: SmartComments.generate
		};
	}());

	var default_config = {
		'private': false,
		favor_generated: true,
		tags: {
			'function': {
				name: {},
				desc: {
					value: "Description"
				},
				params: {},
				rtrn: {}
			},
			'class': {
				name: {},
				desc: {
					value: "Class Description"
				},
				params: {},
				rtrn: false,
				clazz: {},
				auth: {},
				date: {},
				nr: {},
				extendsClass: {}
			},
			'requires': {
				
			}
		},
		scope: 'global'
	};

	// initialize 
	smartcomments.initialize(default_config);

	return {
		comment: function (script) {
			var out = script;
			if (script &amp;&amp; (script.indexOf('function') !== -1 || script.indexOf('Class') !== -1)) {
				result = smartcomments.generate(script, default_config);

				if (typeof result == 'string') {
					out = result;
				} else {
					console.error(result);
				}
			}
			return out;
		}
	};
}]]&gt;&lt;/script&gt;&lt;script_name/&gt;&lt;sys_class_name&gt;sys_ui_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2016-04-28 12:21:59&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;true&lt;/sys_customer_update&gt;&lt;sys_id&gt;696cfd3937035a0044d3f25b34990e30&lt;/sys_id&gt;&lt;sys_mod_count&gt;13&lt;/sys_mod_count&gt;&lt;sys_name&gt;SnSmartComments&lt;/sys_name&gt;&lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_script_696cfd3937035a0044d3f25b34990e30&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-11-14 14:49:32&lt;/sys_updated_on&gt;&lt;ui_type&gt;0&lt;/ui_type&gt;&lt;use_scoped_format&gt;false&lt;/use_scoped_format&gt;&lt;/sys_ui_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>-712208957</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>2f902d4cdbf77b80ee93b14ffe96194d</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061eb800000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>SnSmartComments</target_name>
<type>UI Script</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_processor_55ff3097db6d2b00323efc600f961959</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_processor"&gt;&lt;sys_processor action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;class_name/&gt;&lt;description/&gt;&lt;interactive&gt;false&lt;/interactive&gt;&lt;name&gt;CiCdExportBaseUpdateSet&lt;/name&gt;&lt;parameters/&gt;&lt;params_endpoint/&gt;&lt;path&gt;cicd_export_base_update_set&lt;/path&gt;&lt;path_endpoint/&gt;&lt;require_csrf&gt;false&lt;/require_csrf&gt;&lt;roles/&gt;&lt;script&gt;&lt;![CDATA[(function process(g_request, g_response, g_processor) {
	
	var CustomExporter = Class.create();
	CustomExporter.prototype = Object.extendsObject(ExportWithRelatedLists, {
		exportRecord: function (record) {
			record = new GlideScriptRecordUtil.get(record).getRealRecord();
			var recordSerializer = new GlideRecordXMLSerializer();
			//recordSerializer.setApplySecurity(true);
			recordSerializer.serialize(record, this.hd, new Packages.java.lang.String('INSERT_OR_UPDATE'));
			if (this.includeAttachments &amp;&amp; record.getTableName().substring(0, 14) != "sys_attachment") {
				this.exportAttachments(record);
			}
		}
	});
	
	var sysid = g_request.getParameter('sysparm_sys_id');
	var exporter = new CustomExporter('sys_remote_update_set', sysid);
	exporter.addRelatedList('sys_remote_update_set', 'remote_base_update_set');
	exporter.addRelatedList('sys_update_xml', 'remote_update_set.remote_base_update_set');
	
	exporter.exportRecords(g_response);
	
	var del = g_request.getParameter('sysparm_delete_when_done');
	if (del == "true") {
		var ugr = new GlideRecord("sys_remote_update_set");
		ugr.addQuery("remote_base_update_set", sysid);
		ugr.query();
		while (ugr.next()) {
			ugr.deleteRecord();
		}
	}
	
})(g_request, g_response, g_processor);]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_processor&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-11-08 15:10:01&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;55ff3097db6d2b00323efc600f961959&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_name&gt;CiCdExportBaseUpdateSet&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_processor_55ff3097db6d2b00323efc600f961959&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-11-08 15:22:06&lt;/sys_updated_on&gt;&lt;type&gt;script&lt;/type&gt;&lt;/sys_processor&gt;&lt;/record_update&gt;</payload>
<payload_hash>1915172763</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>2f902d4cdbf77b80ee93b14ffe961950</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061eaaf0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CiCdExportBaseUpdateSet</target_name>
<type>Processor</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_role_77e8a7a7db6fd300dfa9b94ffe9619d6</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl_role"><sys_security_acl_role action="INSERT_OR_UPDATE"><sys_class_name>sys_security_acl_role</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-02 12:01:49</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>77e8a7a7db6fd300dfa9b94ffe9619d6</sys_id><sys_mod_count>0</sys_mod_count><sys_name>.cicd_integration_user</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_security_acl display_value="/api/devops/cicd/cd">2ae86fe7db6fd300dfa9b94ffe9619bc</sys_security_acl><sys_update_name>sys_security_acl_role_77e8a7a7db6fd300dfa9b94ffe9619d6</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-02 12:01:49</sys_updated_on><sys_user_role display_value="cicd_integration_user" name="cicd_integration_user">dd194b2bdbebd300dfa9b94ffe96194f</sys_user_role><transaction_id/></sys_security_acl_role></record_update>]]></payload>
<payload_hash>-180232956</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>2f902d4cdbf77b80ee93b14ffe961953</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ebb90000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table>/api/devops/cicd/cd</table>
<target_name>.cicd_integration_user</target_name>
<type>Access Roles</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_1a7833bddbb31f0076d6b94ffe961994</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl"><sys_security_acl action="INSERT_OR_UPDATE"><active>true</active><admin_overrides>true</admin_overrides><advanced>false</advanced><condition/><description/><name>/api/devops/cicd/ci</name><operation display_value="execute">execute</operation><script/><sys_class_name>sys_security_acl</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-09 12:55:25</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>1a7833bddbb31f0076d6b94ffe961994</sys_id><sys_mod_count>1</sys_mod_count><sys_name>/api/devops/cicd/ci</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_security_acl_1a7833bddbb31f0076d6b94ffe961994</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-10 07:16:07</sys_updated_on><type display_value="REST_Endpoint">REST_Endpoint</type></sys_security_acl></record_update>]]></payload>
<payload_hash>-976501482</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>2f902d4cdbf77b80ee93b14ffe961957</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061e9d10000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table>/api/devops/cicd/ci</table>
<target_name>/api/devops/cicd/ci</target_name>
<type>Access Control</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ui_view_cdb37233db9f3f408fb6f6700f96191a</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_view"><sys_ui_view action="INSERT_OR_UPDATE"><group/><hidden>false</hidden><name>cicd_preview</name><roles/><sys_class_name>sys_ui_view</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2019-08-23 08:53:44</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>cdb37233db9f3f408fb6f6700f96191a</sys_id><sys_mod_count>0</sys_mod_count><sys_name>CICD Preview</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ui_view_cdb37233db9f3f408fb6f6700f96191a</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2019-08-23 08:53:44</sys_updated_on><title>CICD Preview</title><user/></sys_ui_view></record_update>]]></payload>
<payload_hash>-1792228338</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>2f902d4cdbf77b80ee93b14ffe96195a</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ed9d0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CICD Preview</target_name>
<type>UI View</type>
<update_domain/>
<update_guid>49b37233829f3f404474e268c959471c</update_guid>
<update_guid_history>49b37233829f3f404474e268c959471c:-1792228338</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_map_716ba231dbffdb0076d6b94ffe96194a</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter_map"><sys_ws_query_parameter_map action="INSERT_OR_UPDATE"><sys_class_name>sys_ws_query_parameter_map</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-09 07:18:52</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>716ba231dbffdb0076d6b94ffe96194a</sys_id><sys_mod_count>0</sys_mod_count><sys_name>db836e29dbb3db0076d6b94ffe961976</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_map_716ba231dbffdb0076d6b94ffe96194a</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-09 07:18:52</sys_updated_on><web_service_operation display_value="CI - Get User Details">15a0fd61db33db0076d6b94ffe961987</web_service_operation><web_service_query_parameter display_value="sysparm_query_category">db836e29dbb3db0076d6b94ffe961976</web_service_query_parameter></sys_ws_query_parameter_map></record_update>]]></payload>
<payload_hash>-191225734</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>6390214cdbf77b80ee93b14ffe9619e8</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061eba60000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>db836e29dbb3db0076d6b94ffe961976</target_name>
<type>Scripted REST Query Parameter Associatio</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_map_675da6f1dbffdb0076d6b94ffe96197c</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter_map"><sys_ws_query_parameter_map action="INSERT_OR_UPDATE"><sys_class_name>sys_ws_query_parameter_map</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-09 07:27:22</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>675da6f1dbffdb0076d6b94ffe96197c</sys_id><sys_mod_count>0</sys_mod_count><sys_name>8d336669dbb3db0076d6b94ffe96193e</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_map_675da6f1dbffdb0076d6b94ffe96197c</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-09 07:27:22</sys_updated_on><web_service_operation display_value="CI - Get Files from Table">f3cca2b1dbffdb0076d6b94ffe96191e</web_service_operation><web_service_query_parameter display_value="sysparm_fields">8d336669dbb3db0076d6b94ffe96193e</web_service_query_parameter></sys_ws_query_parameter_map></record_update>]]></payload>
<payload_hash>998818860</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>63902d4cdbf77b80ee93b14ffe961949</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061eaf90000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>8d336669dbb3db0076d6b94ffe96193e</target_name>
<type>Scripted REST Query Parameter Associatio</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_3ee71f77db57a7801af8b14ffe9619c2</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_ui_action"&gt;&lt;sys_ui_action action="INSERT_OR_UPDATE"&gt;&lt;action_name&gt;cicd_run_build&lt;/action_name&gt;&lt;active&gt;true&lt;/active&gt;&lt;client&gt;false&lt;/client&gt;&lt;client_script_v2/&gt;&lt;comments&gt;Run CICD Process based on a Scoped Application&lt;/comments&gt;&lt;condition&gt;(gs.getProperty('cicd-integration.enabled', 'false') == 'true' &amp;amp;&amp;amp; gs.getProperty('cicd-integration.enabled.on-scoped-app', 'false') == 'true' &amp;amp;&amp;amp; current.vendor != 'ServiceNow' &amp;amp;&amp;amp; current.canWrite())&lt;/condition&gt;&lt;form_action&gt;true&lt;/form_action&gt;&lt;form_button&gt;true&lt;/form_button&gt;&lt;form_button_v2&gt;false&lt;/form_button_v2&gt;&lt;form_context_menu&gt;false&lt;/form_context_menu&gt;&lt;form_link&gt;false&lt;/form_link&gt;&lt;form_menu_button_v2&gt;false&lt;/form_menu_button_v2&gt;&lt;form_style/&gt;&lt;hint/&gt;&lt;isolate_script&gt;false&lt;/isolate_script&gt;&lt;list_action&gt;false&lt;/list_action&gt;&lt;list_banner_button&gt;false&lt;/list_banner_button&gt;&lt;list_button&gt;false&lt;/list_button&gt;&lt;list_choice&gt;false&lt;/list_choice&gt;&lt;list_context_menu&gt;false&lt;/list_context_menu&gt;&lt;list_link&gt;false&lt;/list_link&gt;&lt;list_save_with_form_button&gt;false&lt;/list_save_with_form_button&gt;&lt;list_style/&gt;&lt;name&gt;Build this Application [CICD]&lt;/name&gt;&lt;onclick/&gt;&lt;order&gt;-1&lt;/order&gt;&lt;script&gt;&lt;![CDATA[new global.CiCdRun().sys_appUiAction(current);
action.setRedirectURL(current);]]&gt;&lt;/script&gt;&lt;show_insert&gt;false&lt;/show_insert&gt;&lt;show_multiple_update&gt;false&lt;/show_multiple_update&gt;&lt;show_query&gt;false&lt;/show_query&gt;&lt;show_update&gt;true&lt;/show_update&gt;&lt;sys_class_name&gt;sys_ui_action&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-02-05 15:23:32&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_id&gt;3ee71f77db57a7801af8b14ffe9619c2&lt;/sys_id&gt;&lt;sys_mod_count&gt;15&lt;/sys_mod_count&gt;&lt;sys_name&gt;Build this Application [CICD]&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_action_3ee71f77db57a7801af8b14ffe9619c2&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-02-28 14:21:08&lt;/sys_updated_on&gt;&lt;table&gt;sys_app&lt;/table&gt;&lt;ui11_compatible&gt;true&lt;/ui11_compatible&gt;&lt;ui16_compatible&gt;false&lt;/ui16_compatible&gt;&lt;/sys_ui_action&gt;&lt;/record_update&gt;</payload>
<payload_hash>1486365718</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>63902d4cdbf77b80ee93b14ffe96194c</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ea530000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table>sys_app</table>
<target_name>Build this Application [CICD]</target_name>
<type>UI Action</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_operation_a45f8befdbebd300dfa9b94ffe9619ab</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ws_operation"&gt;&lt;sys_ws_operation action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;consumes&gt;application/json,application/xml,text/xml&lt;/consumes&gt;&lt;consumes_customized&gt;false&lt;/consumes_customized&gt;&lt;default_operation_uri&gt;/api/devops/cicd/atf/test/{testId}&lt;/default_operation_uri&gt;&lt;enforce_acl&gt;9041d7a3db2fd300dfa9b94ffe961910&lt;/enforce_acl&gt;&lt;http_method&gt;GET&lt;/http_method&gt;&lt;name&gt;ATF - Get Test Results&lt;/name&gt;&lt;operation_script&gt;&lt;![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    return new CiCdAtf(request, response).getTestResults();

})(request, response);]]&gt;&lt;/operation_script&gt;&lt;operation_uri&gt;/api/devops/v1/cicd/atf/test/{testId}&lt;/operation_uri&gt;&lt;produces&gt;application/json,application/xml,text/xml&lt;/produces&gt;&lt;produces_customized&gt;false&lt;/produces_customized&gt;&lt;relative_path&gt;/atf/test/{testId}&lt;/relative_path&gt;&lt;request_example/&gt;&lt;requires_acl_authorization&gt;true&lt;/requires_acl_authorization&gt;&lt;requires_authentication&gt;true&lt;/requires_authentication&gt;&lt;requires_snc_internal_role&gt;true&lt;/requires_snc_internal_role&gt;&lt;short_description&gt;Get ATF test results from remote&lt;/short_description&gt;&lt;sys_class_name&gt;sys_ws_operation&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-08-02 10:09:18&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;a45f8befdbebd300dfa9b94ffe9619ab&lt;/sys_id&gt;&lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;&lt;sys_name&gt;ATF - Get Test Results&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ws_operation_a45f8befdbebd300dfa9b94ffe9619ab&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-08-02 11:07:32&lt;/sys_updated_on&gt;&lt;web_service_definition display_value="CICD Integration"&gt;81eccb6fdbebd300dfa9b94ffe96190e&lt;/web_service_definition&gt;&lt;web_service_version display_value="v1"&gt;0a3dcb2fdbebd300dfa9b94ffe9619c7&lt;/web_service_version&gt;&lt;/sys_ws_operation&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1027007059</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>63902d4cdbf77b80ee93b14ffe96194f</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ecd90000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>ATF - Get Test Results</target_name>
<type>Scripted REST Resource</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_map_4ef32e69dbb3db0076d6b94ffe9619fa</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter_map"><sys_ws_query_parameter_map action="INSERT_OR_UPDATE"><sys_class_name>sys_ws_query_parameter_map</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-08 12:07:54</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>4ef32e69dbb3db0076d6b94ffe9619fa</sys_id><sys_mod_count>0</sys_mod_count><sys_name>db836e29dbb3db0076d6b94ffe961976</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_map_4ef32e69dbb3db0076d6b94ffe9619fa</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-08 12:07:54</sys_updated_on><web_service_operation display_value="CI - Get UpdateSet Files">4f6a31a9db33db0076d6b94ffe9619fa</web_service_operation><web_service_query_parameter display_value="sysparm_query_category">db836e29dbb3db0076d6b94ffe961976</web_service_query_parameter></sys_ws_query_parameter_map></record_update>]]></payload>
<payload_hash>-723219560</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>63902d4cdbf77b80ee93b14ffe961952</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ea830000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>db836e29dbb3db0076d6b94ffe961976</target_name>
<type>Scripted REST Query Parameter Associatio</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_category_m2m_db01782ddba3ff409775f6700f961919</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties_category_m2m"><sys_properties_category_m2m action="INSERT_OR_UPDATE"><category display_value="CICD Integration">8d1de113dbb86380432cfc600f9619f6</category><order>30</order><property display_value="cicd-integration.message.build-state" name="cicd-integration.message.build-state">47f0bce9dba3ff409775f6700f9619bf</property><sys_class_name>sys_properties_category_m2m</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2019-08-28 09:52:16</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>db01782ddba3ff409775f6700f961919</sys_id><sys_mod_count>1</sys_mod_count><sys_name>cicd-integration.message.build-state.CICD Integration</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_category_m2m_db01782ddba3ff409775f6700f961919</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2019-08-28 09:52:32</sys_updated_on></sys_properties_category_m2m></record_update>]]></payload>
<payload_hash>-1178606555</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>63902d4cdbf77b80ee93b14ffe961955</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ee120000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.message.build-state.CICD Integration</target_name>
<type>Category Property</type>
<update_domain/>
<update_guid>ab11782d67a3ff40039a95afe5634678</update_guid>
<update_guid_history>ab11782d67a3ff40039a95afe5634678:-1178606555,9f01782deda3ff40c125ad13744f8d1b:-1221825823</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_script_7818f6b7db9f3f408fb6f6700f96199d</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;false&lt;/action_insert&gt;&lt;action_label/&gt;&lt;action_name/&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_run_at&gt;server&lt;/action_run_at&gt;&lt;action_update&gt;false&lt;/action_update&gt;&lt;active&gt;true&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;application/&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;sys_remote_update_set&lt;/collection&gt;&lt;condition/&gt;&lt;description/&gt;&lt;execute_function&gt;false&lt;/execute_function&gt;&lt;filter_condition/&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;[CICD] Display Messages in Preview View&lt;/name&gt;&lt;onclick/&gt;&lt;order&gt;1&lt;/order&gt;&lt;priority&gt;100&lt;/priority&gt;&lt;read_access_action&gt;false&lt;/read_access_action&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[(function executeRule(current, previous /*null when async*/) {
	
	new CiCdRun().sys_remote_update_set_Display(current);
	
})(current, previous);]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-08-23 09:19:54&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_id&gt;7818f6b7db9f3f408fb6f6700f96199d&lt;/sys_id&gt;&lt;sys_mod_count&gt;14&lt;/sys_mod_count&gt;&lt;sys_name&gt;[CICD] Display Messages in Preview View&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_7818f6b7db9f3f408fb6f6700f96199d&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-08-30 14:31:57&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;when&gt;before_display&lt;/when&gt;&lt;/sys_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>1348585131</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>63902d4cdbf77b80ee93b14ffe961959</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ebc60000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table>sys_remote_update_set</table>
<target_name>[CICD] Display Messages in Preview View</target_name>
<type>Business Rule</type>
<update_domain>global</update_domain>
<update_guid>b734089e83a33380661fafaf8de40870</update_guid>
<update_guid_history>b734089e83a33380661fafaf8de40870:1348585131,3ea0952dc327ff40b872bd28273ffa18:-32003247,2f260019f92b7f40421e905207e0895c:1839882542,a51b9b0d64e77f407394b51cece658f8:942584337,f00b1b0db3e77f406a5c9b199d255ca4:1933870071,03e917c98ae77f40233db69458e4f6e8:2042424028,64d993c98ce77f40a2b2690415b9a3d4:-1865102660,4cc99f49f0e77f40837efaf2ef507017:375492866,b099df4900e77f4060ddf07fec3da8ab:-680103675,7a79df497ae77f4077414eed91ea3a74:-375435341,972c76fbe89f3f40af0aaf2da604ca8a:-1949084813,d30cf2fb119f3f40d95765ad4475fad6:-683657972,4a9b72bb839f3f40a815fad8674bd6d8:-1869775295,34d9f2b7f29f3f4079b509c9b58a8ac1:-713613332,24b9b23b389f3f40ecf0dfac18ab2ed2:-116050588</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_bcc52589dbaaefc076d6b94ffe961993</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices>HMAC hexdigest (digest of secret and body)=hmac,&#13;
match (request header secret must be identical)=match</choices><description>&lt;b&gt;Secret Validation&lt;/b&gt;&lt;br&gt;&#13;
Specify how the token shall be validated.</description><ignore_cache>false</ignore_cache><is_private>false</is_private><name>cicd-integration.pull-request-proxy.secret-validation</name><read_roles/><suffix/><sys_class_name>sys_properties</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-12-21 11:11:39</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>bcc52589dbaaefc076d6b94ffe961993</sys_id><sys_mod_count>5</sys_mod_count><sys_name>cicd-integration.pull-request-proxy.secret-validation</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_bcc52589dbaaefc076d6b94ffe961993</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-12-21 11:20:08</sys_updated_on><type>choicelist</type><value>hmac</value><write_roles/></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=bcc52589dbaaefc076d6b94ffe961993"/></record_update>]]></payload>
<payload_hash>758062037</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>6790214cdbf77b80ee93b14ffe9619e7</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ed550000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.pull-request-proxy.secret-validation</target_name>
<type>System Property</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_category_m2m_09dc5d86dbe74300dfa9b94ffe961944</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties_category_m2m"><sys_properties_category_m2m action="INSERT_OR_UPDATE"><category display_value="CICD Integration">8d1de113dbb86380432cfc600f9619f6</category><order>350</order><property display_value="cicd-integration.jsdocButton.enabled" name="cicd-integration.jsdocButton.enabled">3aacd546dbe74300dfa9b94ffe961943</property><sys_class_name>sys_properties_category_m2m</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-01-10 13:47:02</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>09dc5d86dbe74300dfa9b94ffe961944</sys_id><sys_mod_count>7</sys_mod_count><sys_name>cicd-integration.jsdocButton.enabled.CICD Integration</sys_name><sys_package display_value="Global" source="global">global</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_category_m2m_09dc5d86dbe74300dfa9b94ffe961944</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2019-01-16 16:59:05</sys_updated_on></sys_properties_category_m2m></record_update>]]></payload>
<payload_hash>-144364845</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>67902d4cdbf77b80ee93b14ffe96194b</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061e8e40000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.jsdocButton.enabled.CICD Integration</target_name>
<type>Category Property</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_map_f44baa71dbffdb0076d6b94ffe9619c5</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter_map"><sys_ws_query_parameter_map action="INSERT_OR_UPDATE"><sys_class_name>sys_ws_query_parameter_map</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-09 07:18:09</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>f44baa71dbffdb0076d6b94ffe9619c5</sys_id><sys_mod_count>0</sys_mod_count><sys_name>db836e29dbb3db0076d6b94ffe961976</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_map_f44baa71dbffdb0076d6b94ffe9619c5</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-09 07:18:09</sys_updated_on><web_service_operation display_value="CI - Get All Test In Suites">7f82aa29dbb3db0076d6b94ffe9619af</web_service_operation><web_service_query_parameter display_value="sysparm_query_category">db836e29dbb3db0076d6b94ffe961976</web_service_query_parameter></sys_ws_query_parameter_map></record_update>]]></payload>
<payload_hash>-187559323</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>67902d4cdbf77b80ee93b14ffe96194e</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061eea70000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>db836e29dbb3db0076d6b94ffe961976</target_name>
<type>Scripted REST Query Parameter Associatio</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_operation_2082ef56db1667c076d6b94ffe961972</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ws_operation"&gt;&lt;sys_ws_operation action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;consumes&gt;application/json,application/xml,text/xml&lt;/consumes&gt;&lt;consumes_customized&gt;false&lt;/consumes_customized&gt;&lt;default_operation_uri&gt;/api/devops/cicd/scope/{scopeId}&lt;/default_operation_uri&gt;&lt;enforce_acl&gt;1a7833bddbb31f0076d6b94ffe961994&lt;/enforce_acl&gt;&lt;http_method&gt;GET&lt;/http_method&gt;&lt;name&gt;CI - Get Scope Details&lt;/name&gt;&lt;operation_script&gt;&lt;![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
	
	return new CiCdApi(request, response).getScopeDetails(request.pathParams.scopeId);

})(request, response);]]&gt;&lt;/operation_script&gt;&lt;operation_uri&gt;/api/devops/v1/cicd/scope/{scopeId}&lt;/operation_uri&gt;&lt;produces&gt;application/json,application/xml,text/xml&lt;/produces&gt;&lt;produces_customized&gt;false&lt;/produces_customized&gt;&lt;relative_path&gt;/scope/{scopeId}&lt;/relative_path&gt;&lt;request_example/&gt;&lt;requires_acl_authorization&gt;true&lt;/requires_acl_authorization&gt;&lt;requires_authentication&gt;true&lt;/requires_authentication&gt;&lt;requires_snc_internal_role&gt;true&lt;/requires_snc_internal_role&gt;&lt;short_description&gt;Get all XML records of an UpdateSet&lt;/short_description&gt;&lt;sys_class_name&gt;sys_ws_operation&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-12-13 07:13:22&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;2082ef56db1667c076d6b94ffe961972&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_name&gt;CI - Get Scope Details&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ws_operation_2082ef56db1667c076d6b94ffe961972&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-12-13 07:13:22&lt;/sys_updated_on&gt;&lt;web_service_definition display_value="CICD Integration"&gt;81eccb6fdbebd300dfa9b94ffe96190e&lt;/web_service_definition&gt;&lt;web_service_version display_value="v1"&gt;0a3dcb2fdbebd300dfa9b94ffe9619c7&lt;/web_service_version&gt;&lt;/sys_ws_operation&gt;&lt;/record_update&gt;</payload>
<payload_hash>191931879</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>67902d4cdbf77b80ee93b14ffe961951</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061e9e50000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CI - Get Scope Details</target_name>
<type>Scripted REST Resource</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_map_c71d66f1dbffdb0076d6b94ffe9619d5</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter_map"><sys_ws_query_parameter_map action="INSERT_OR_UPDATE"><sys_class_name>sys_ws_query_parameter_map</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-09 07:26:14</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>c71d66f1dbffdb0076d6b94ffe9619d5</sys_id><sys_mod_count>0</sys_mod_count><sys_name>a6294a65db73db0076d6b94ffe961937</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_map_c71d66f1dbffdb0076d6b94ffe9619d5</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-09 07:26:14</sys_updated_on><web_service_operation display_value="CI - Get Files from Table">f3cca2b1dbffdb0076d6b94ffe96191e</web_service_operation><web_service_query_parameter display_value="sysparm_offset">a6294a65db73db0076d6b94ffe961937</web_service_query_parameter></sys_ws_query_parameter_map></record_update>]]></payload>
<payload_hash>636258898</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>67902d4cdbf77b80ee93b14ffe961954</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ed6c0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>a6294a65db73db0076d6b94ffe961937</target_name>
<type>Scripted REST Query Parameter Associatio</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_script_d191746ddba3ff409775f6700f96199a</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;false&lt;/action_insert&gt;&lt;action_label/&gt;&lt;action_name/&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_run_at&gt;server&lt;/action_run_at&gt;&lt;action_update&gt;false&lt;/action_update&gt;&lt;active&gt;true&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;application/&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;sys_update_set&lt;/collection&gt;&lt;condition/&gt;&lt;description/&gt;&lt;execute_function&gt;false&lt;/execute_function&gt;&lt;filter_condition/&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;[CICD] Show link to CICD results&lt;/name&gt;&lt;onclick/&gt;&lt;order&gt;10&lt;/order&gt;&lt;priority&gt;100&lt;/priority&gt;&lt;read_access_action&gt;false&lt;/read_access_action&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[(function executeRule(current, previous /*null when async*/) {
	new global.CiCdRun().sys_update_set_Display(current);
})(current, previous);]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-08-28 09:57:42&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_id&gt;d191746ddba3ff409775f6700f96199a&lt;/sys_id&gt;&lt;sys_mod_count&gt;5&lt;/sys_mod_count&gt;&lt;sys_name&gt;[CICD] Show link to CICD results&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_d191746ddba3ff409775f6700f96199a&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-08-30 14:35:11&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;when&gt;before_display&lt;/when&gt;&lt;/sys_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>1963859794</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>67902d4cdbf77b80ee93b14ffe961958</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061edb90000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table>sys_update_set</table>
<target_name>[CICD] Show link to CICD results</target_name>
<type>Business Rule</type>
<update_domain>global</update_domain>
<update_guid>c7f48c9ee4a33380f81063a3779f3b7a</update_guid>
<update_guid_history>c7f48c9ee4a33380f81063a3779f3b7a:1963859794,1517702533e3ff405db6972c844b207a:-903951942,0ab6fc614de3ff40c0746acd8613b19f:340691353,a956f4a1bde3ff4071653039b08f48de:1863960695,3616fca145e3ff4066f42f7bb052bdd6:-2031115976,1b423c2dfba3ff40690503bcbed495ae:-1808263336</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_web_service_57540cbfdb4367409775f6700f9619c0</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_web_service"&gt;&lt;sys_web_service action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;function_name&gt;*&lt;/function_name&gt;&lt;name&gt;api/devops/cicd/source/sys_update_xml&lt;/name&gt;&lt;scoped_name&gt;api/devops/cicd/source/sys_update_xml&lt;/scoped_name&gt;&lt;script&gt;&lt;![CDATA[(function scriptedWebServiceOperation(request, response) {

	return new CiCdSource().updateSetXmlSoapWebService(this.soapRequestXML, response);

})(request, response);]]&gt;&lt;/script&gt;&lt;short_description&gt;getKeys, getRecords&lt;/short_description&gt;&lt;sys_class_name&gt;sys_web_service&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-01-23 13:40:47&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;57540cbfdb4367409775f6700f9619c0&lt;/sys_id&gt;&lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;&lt;sys_name&gt;api/devops/cicd/source/sys_update_xml&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_web_service_57540cbfdb4367409775f6700f9619c0&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-01-30 17:01:15&lt;/sys_updated_on&gt;&lt;wsdl&gt;https://company1.service-now.com/api/devops/cicd/source/sys_update_xml.do?WSDL&lt;/wsdl&gt;&lt;wsdl_compliance&gt;false&lt;/wsdl_compliance&gt;&lt;/sys_web_service&gt;&lt;/record_update&gt;</payload>
<payload_hash>-2121208871</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>6b90214cdbf77b80ee93b14ffe9619e6</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061eac80000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>api/devops/cicd/source/sys_update_xml</target_name>
<type>Scripted Web Service</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_role_d2018d57db6d2b00323efc600f961948</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl_role"><sys_security_acl_role action="INSERT_OR_UPDATE"><sys_class_name>sys_security_acl_role</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-11-08 15:15:24</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>d2018d57db6d2b00323efc600f961948</sys_id><sys_mod_count>0</sys_mod_count><sys_name>.cicd_integration_user</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_security_acl display_value="CiCdExportUpdateSet">bc014d97db6d2b00323efc600f961936</sys_security_acl><sys_update_name>sys_security_acl_role_d2018d57db6d2b00323efc600f961948</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-11-08 15:15:24</sys_updated_on><sys_user_role display_value="cicd_integration_user" name="cicd_integration_user">dd194b2bdbebd300dfa9b94ffe96194f</sys_user_role><transaction_id/></sys_security_acl_role></record_update>]]></payload>
<payload_hash>1563576374</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>6b90214cdbf77b80ee93b14ffe9619e9</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061edc60000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table>CiCdExportUpdateSet</table>
<target_name>.cicd_integration_user</target_name>
<type>Access Roles</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_map_146946a5db73db0076d6b94ffe961962</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter_map"><sys_ws_query_parameter_map action="INSERT_OR_UPDATE"><sys_class_name>sys_ws_query_parameter_map</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-08 10:11:39</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>146946a5db73db0076d6b94ffe961962</sys_id><sys_mod_count>0</sys_mod_count><sys_name>a6294a65db73db0076d6b94ffe961937</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_map_146946a5db73db0076d6b94ffe961962</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-08 10:11:39</sys_updated_on><web_service_operation display_value="CI - Get UpdateSet Files">4f6a31a9db33db0076d6b94ffe9619fa</web_service_operation><web_service_query_parameter display_value="sysparm_offset">a6294a65db73db0076d6b94ffe961937</web_service_query_parameter></sys_ws_query_parameter_map></record_update>]]></payload>
<payload_hash>1831645000</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>6b902d4cdbf77b80ee93b14ffe96194a</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061e9660000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>a6294a65db73db0076d6b94ffe961937</target_name>
<type>Scripted REST Query Parameter Associatio</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_map_dadc26b1dbffdb0076d6b94ffe9619d6</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter_map"><sys_ws_query_parameter_map action="INSERT_OR_UPDATE"><sys_class_name>sys_ws_query_parameter_map</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-09 07:25:06</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>dadc26b1dbffdb0076d6b94ffe9619d6</sys_id><sys_mod_count>0</sys_mod_count><sys_name>12c846a5db73db0076d6b94ffe961917</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_map_dadc26b1dbffdb0076d6b94ffe9619d6</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-09 07:25:06</sys_updated_on><web_service_operation display_value="CI - Get Files from Table">f3cca2b1dbffdb0076d6b94ffe96191e</web_service_operation><web_service_query_parameter display_value="sysparm_limit">12c846a5db73db0076d6b94ffe961917</web_service_query_parameter></sys_ws_query_parameter_map></record_update>]]></payload>
<payload_hash>1965970942</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>6b902d4cdbf77b80ee93b14ffe96194d</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ee080000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>12c846a5db73db0076d6b94ffe961917</target_name>
<type>Scripted REST Query Parameter Associatio</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_operation_f6af13ebdb2fd300dfa9b94ffe9619b3</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ws_operation"&gt;&lt;sys_ws_operation action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;consumes&gt;application/json,application/xml,text/xml&lt;/consumes&gt;&lt;consumes_customized&gt;false&lt;/consumes_customized&gt;&lt;default_operation_uri&gt;/api/devops/cicd/deploy&lt;/default_operation_uri&gt;&lt;enforce_acl&gt;2ae86fe7db6fd300dfa9b94ffe9619bc&lt;/enforce_acl&gt;&lt;http_method&gt;POST&lt;/http_method&gt;&lt;name&gt;CD - Deploy UpdateSet to target&lt;/name&gt;&lt;operation_script&gt;&lt;![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    return new CiCdDeploy(request, response).deployUpdateSet();

})(request, response);]]&gt;&lt;/operation_script&gt;&lt;operation_uri&gt;/api/devops/v1/cicd/deploy&lt;/operation_uri&gt;&lt;produces&gt;application/json,application/xml,text/xml&lt;/produces&gt;&lt;produces_customized&gt;false&lt;/produces_customized&gt;&lt;relative_path&gt;/deploy&lt;/relative_path&gt;&lt;request_example/&gt;&lt;requires_acl_authorization&gt;true&lt;/requires_acl_authorization&gt;&lt;requires_authentication&gt;true&lt;/requires_authentication&gt;&lt;requires_snc_internal_role&gt;true&lt;/requires_snc_internal_role&gt;&lt;short_description/&gt;&lt;sys_class_name&gt;sys_ws_operation&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-08-02 11:21:45&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;f6af13ebdb2fd300dfa9b94ffe9619b3&lt;/sys_id&gt;&lt;sys_mod_count&gt;7&lt;/sys_mod_count&gt;&lt;sys_name&gt;CD - Deploy UpdateSet to target&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ws_operation_f6af13ebdb2fd300dfa9b94ffe9619b3&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-11-08 05:35:58&lt;/sys_updated_on&gt;&lt;web_service_definition display_value="CICD Integration"&gt;81eccb6fdbebd300dfa9b94ffe96190e&lt;/web_service_definition&gt;&lt;web_service_version display_value="v1"&gt;0a3dcb2fdbebd300dfa9b94ffe9619c7&lt;/web_service_version&gt;&lt;/sys_ws_operation&gt;&lt;/record_update&gt;</payload>
<payload_hash>1302470325</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>6b902d4cdbf77b80ee93b14ffe961950</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061eeb90000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CD - Deploy UpdateSet to target</target_name>
<type>Scripted REST Resource</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_6cb7d2f6dbdaa7c076d6b94ffe9619b9</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>&lt;hr&gt;&lt;b&gt;Pull Request Proxy switch.&lt;/b&gt;&lt;br&gt;&#13;
Turn on if you want to route Pull-Request from a GIT Repository hosted on the Internet (e.g. GitHub) to the CICD Server.&lt;br&gt;&#13;
Request made to '/api/devops/cicd/pull_request' will be routed to this address.</description><ignore_cache>false</ignore_cache><is_private>false</is_private><name>cicd-integration.pull-request-proxy.enabled</name><read_roles/><suffix/><sys_class_name>sys_properties</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-12-14 15:03:29</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>6cb7d2f6dbdaa7c076d6b94ffe9619b9</sys_id><sys_mod_count>6</sys_mod_count><sys_name>cicd-integration.pull-request-proxy.enabled</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_6cb7d2f6dbdaa7c076d6b94ffe9619b9</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-12-21 11:00:38</sys_updated_on><type>boolean</type><value>false</value><write_roles/></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=6cb7d2f6dbdaa7c076d6b94ffe9619b9"/></record_update>]]></payload>
<payload_hash>-345453608</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>6b902d4cdbf77b80ee93b14ffe961953</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061eb9e0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.pull-request-proxy.enabled</target_name>
<type>System Property</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_map_1792ef1adb1667c076d6b94ffe961975</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter_map"><sys_ws_query_parameter_map action="INSERT_OR_UPDATE"><sys_class_name>sys_ws_query_parameter_map</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-12-13 07:13:50</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>1792ef1adb1667c076d6b94ffe961975</sys_id><sys_mod_count>0</sys_mod_count><sys_name>8d336669dbb3db0076d6b94ffe96193e</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_map_1792ef1adb1667c076d6b94ffe961975</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-12-13 07:13:50</sys_updated_on><web_service_operation display_value="CI - Get Scope Details">2082ef56db1667c076d6b94ffe961972</web_service_operation><web_service_query_parameter display_value="sysparm_fields">8d336669dbb3db0076d6b94ffe96193e</web_service_query_parameter></sys_ws_query_parameter_map></record_update>]]></payload>
<payload_hash>-1335327508</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>6b902d4cdbf77b80ee93b14ffe961957</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061e9ae0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>8d336669dbb3db0076d6b94ffe96193e</target_name>
<type>Scripted REST Query Parameter Associatio</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_operation_b97f8befdbebd300dfa9b94ffe9619e8</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ws_operation"&gt;&lt;sys_ws_operation action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;consumes&gt;application/json,application/xml,text/xml&lt;/consumes&gt;&lt;consumes_customized&gt;false&lt;/consumes_customized&gt;&lt;default_operation_uri&gt;/api/devops/cicd/atf/suite/{suiteId}&lt;/default_operation_uri&gt;&lt;enforce_acl&gt;9041d7a3db2fd300dfa9b94ffe961910&lt;/enforce_acl&gt;&lt;http_method&gt;GET&lt;/http_method&gt;&lt;name&gt;ATF - Get Suite Results&lt;/name&gt;&lt;operation_script&gt;&lt;![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    return new CiCdAtf(request, response).getSuiteResults();

})(request, response);]]&gt;&lt;/operation_script&gt;&lt;operation_uri&gt;/api/devops/v1/cicd/atf/suite/{suiteId}&lt;/operation_uri&gt;&lt;produces&gt;application/json,application/xml,text/xml&lt;/produces&gt;&lt;produces_customized&gt;false&lt;/produces_customized&gt;&lt;relative_path&gt;/atf/suite/{suiteId}&lt;/relative_path&gt;&lt;request_example/&gt;&lt;requires_acl_authorization&gt;true&lt;/requires_acl_authorization&gt;&lt;requires_authentication&gt;true&lt;/requires_authentication&gt;&lt;requires_snc_internal_role&gt;true&lt;/requires_snc_internal_role&gt;&lt;short_description&gt;Get ATF suite results from remote&lt;/short_description&gt;&lt;sys_class_name&gt;sys_ws_operation&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-08-02 10:09:55&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;b97f8befdbebd300dfa9b94ffe9619e8&lt;/sys_id&gt;&lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;&lt;sys_name&gt;ATF - Get Suite Results&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ws_operation_b97f8befdbebd300dfa9b94ffe9619e8&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-08-02 11:07:27&lt;/sys_updated_on&gt;&lt;web_service_definition display_value="CICD Integration"&gt;81eccb6fdbebd300dfa9b94ffe96190e&lt;/web_service_definition&gt;&lt;web_service_version display_value="v1"&gt;0a3dcb2fdbebd300dfa9b94ffe9619c7&lt;/web_service_version&gt;&lt;/sys_ws_operation&gt;&lt;/record_update&gt;</payload>
<payload_hash>1482578743</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>6b902d4cdbf77b80ee93b14ffe96195a</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ed340000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>ATF - Get Suite Results</target_name>
<type>Scripted REST Resource</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_2aa816f6dbdaa7c076d6b94ffe96195c</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>&lt;b&gt;Secret Name&lt;/b&gt;&lt;br&gt;&#13;
&lt;small&gt;e.g. X-Hub-Signature&lt;/small&gt;&lt;br&gt;&#13;
The HTTP Header Name containing the Secure Token. &lt;span color="red" style="color: red;"&gt;If no name and no token is specified the API is public!&lt;/span&gt;</description><ignore_cache>false</ignore_cache><is_private>false</is_private><name>cicd-integration.pull-request-proxy.header-secret-name</name><read_roles/><suffix/><sys_class_name>sys_properties</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-12-14 15:07:43</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>2aa816f6dbdaa7c076d6b94ffe96195c</sys_id><sys_mod_count>6</sys_mod_count><sys_name>cicd-integration.pull-request-proxy.header-secret-name</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_2aa816f6dbdaa7c076d6b94ffe96195c</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-12-21 10:58:53</sys_updated_on><type>string</type><value>X-Hub-Signature</value><write_roles/></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=2aa816f6dbdaa7c076d6b94ffe96195c"/></record_update>]]></payload>
<payload_hash>-1238114394</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>6f90214cdbf77b80ee93b14ffe9619e5</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ea010000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.pull-request-proxy.header-secret-name</target_name>
<type>System Property</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_script_include_94a29327db2fd300dfa9b94ffe9619a5</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;global.CiCdAtf&lt;/api_name&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;CiCdAtf&lt;/name&gt;&lt;script&gt;&lt;![CDATA[/* exported CiCdAtf */
/* global sn_atf, gs, GlideChecksum, GlideXMLDocument, sn_ws, sn_ws_err, Class, TestExecutorAjax, GlideRecord, GlideProperties, JSON */


/**
 * Class Description
 * 
 * @class 
 * @author Boris Moers
 * @requires sn_ws_err.module:sys_script_include.BadRequestError
 * @requires global.module:sys_script_include.TestExecutorAjax
 * @memberof global.module:sys_script_include
 */
var CiCdAtf = Class.create();

CiCdAtf.prototype = /** @lends global.module:sys_script_include.CiCdAtf.prototype */ {

    /**
     * Constructor
     * 
     * @param {any} request
     * @param {any} response
     * @returns {undefined}
     */
    initialize: function (request, response) {
        var self = this;

        self.request = request;
        self.response = response;

    },

    /**
     * Get param from URL path
     * 
     * @param {any} paramName
     * @param {any} callback
     * @returns {undefined}
     */
    getPathParam: function (paramName, callback) {
        var self = this,
            out = (paramName in self.request.pathParams) ? self.request.pathParams[paramName] : null;

        if (self.isFunction(callback)) {
            return callback(out);
        } else {
            return out;
        }
    },

    /**
     * Get param form URL query argument
     * 
     * @param {any} paramName
     * @param {any} callback
     * @returns {undefined}
     */
    getQueryParam: function (paramName, callback) {
        var self = this,
            out = (paramName in self.request.queryParams) ? (function () {
                var value = self.request.queryParams[paramName];
                if (Array.isArray(value)) {
                    return (value.length === 1) ? value[0] : value;
                } else {
                    return value;
                }
            })() : null;

        if (self.isFunction(callback)) {
            return callback(out);
        } else {
            return out;
        }
    },


    /**
     * Get the testrunner from the current user.
     * This requires the testrunner window to be opened in a browser first.
     * 
     * @returns {any} testRunnerSessionId
     */
    getTestRunnerSessionId: function (runnerId) {
        var testRunnerSessionId = null;

        var existingRunner = new GlideRecord("sys_atf_agent");
        existingRunner.addQuery("status", "online");
        existingRunner.addQuery("type", "manual");
        existingRunner.addQuery("user_agent", "CONTAINS", runnerId);
        // existingRunner.addQuery("session_id", new GlideChecksum(gs.getSessionID()).getMD5());
        // otherSessionRunner.addQuery("session_id","!=", new GlideChecksum(gs.getSessionID()).getMD5());
        // existingRunner.addQuery("user", gs.getUserID());
        existingRunner.setLimit(1);
        existingRunner._query();
        if (existingRunner._next()) {
            testRunnerSessionId = existingRunner.getValue('session_id');
        }
        return testRunnerSessionId;
    },


    /**
     * Execute a Test-Suite&lt;br&gt;
     * 
     * mapped to POST /api/devops/v1/cicd/atf/suite
     * @returns {any} out
     */
    executeSuite: function () {
        var self = this,
            suiteId,
            runnerId,
            out = {
                executionId: null
            },
            need_browser = false,
            testRunnerSessionId = null;

        var requestBody = self.request.body;
        if (!requestBody || !requestBody.hasNext())
            return new sn_ws_err.BadRequestError('initialize: no body found');

        var body = requestBody.nextEntry();
        suiteId = body.id || null;
        if (gs.nil(suiteId))
            return new sn_ws_err.BadRequestError('initialize: suiteId property not found');

        runnerId = body.runnerId || null;
        if (gs.nil(runnerId))
            return new sn_ws_err.BadRequestError('initialize: runnerId property not found');
        
        var gr = new GlideRecord('sys_atf_test_suite');
        if (!gr.get(suiteId)) {
            return new sn_ws_err.BadRequestError("Could not find the Test suite with id: " + suiteId);
        }

        out.url = gs.getProperty('glide.servlet.uri').concat(gr.getLink(true));
        out.name = gr.getDisplayValue();

        need_browser = sn_atf.AutomatedTestingFramework.doesSuiteHaveUITests(suiteId);
        if (need_browser) {
            testRunnerSessionId = self.getTestRunnerSessionId(runnerId);
            if (gs.nil(testRunnerSessionId)) {
                return new sn_ws_err.BadRequestError("This TestSuite requires an active Test Runner to be available.");
            }
        }

        // execute suite
        out.executionId = new TestExecutorAjax((function () {
            var params = {
                'sysparm_name': 'true',
                'sysparm_ajax_processor_ut_test_suite_id': suiteId,
                'sysparm_ajax_processor_test_runner_session_id': testRunnerSessionId
            };
            return {
                /**
                 * Description
                 * 
                 * @param {any} paramName
                 * @returns {MemberExpression}
                 */
                getParameter: function (paramName) {
                    return params[paramName];
                }
            };
        })(), new GlideXMLDocument(), '').process();

        /*
        var executor = new sn_atf.UserTestSuiteExecutor();
        executor.setTestSuiteSysId(suiteId);
        executor.setTestRunnerSessionId(testRunnerSessionId);
        out.executionId = executor.start();
        */
        return out;
    },

    /**
     * Tet Test-Suite results&lt;br&gt;
     * 
     * mapped to GET /api/devops/v1/cicd/atf/suite/{id}
     * @returns {any} out
     */
    getSuiteResults: function () {
        var self = this,
            out = {
                testResults: []
            };

        var suiteId = self.getPathParam('suiteId');

        var gr = new GlideRecord('sys_atf_test_suite_result');
        if (gr.get(suiteId)) {
            out.number = gr.getValue('number');
            out.status = gr.getValue('status');
            out.duration = gr.getValue('run_time');
            out.url = gs.getProperty('glide.servlet.uri').concat(gr.getLink(true));
            out.type = 'test_suite_result';

            var gRes = new GlideRecord('sys_atf_test_result');
            gRes.addQuery('parent', gr.getValue('sys_id'));
            gRes._query();
            while (gRes._next()) {
                out.testResults.push(self._getTestResultDetails(gRes.getValue('sys_id')));
            }
        }
        return out;
    },


    /**
     * Execute a single Test&lt;br&gt;
     * mapped to POST /api/devops/v1/cicd/atf/test
     * @returns {any} out
     */
    executeTest: function () {
        var self = this,
            testId,
            runnerId,
            out = {
                executionId: null
            },
            need_browser = false,
            testRunnerSessionId = null;

        var requestBody = self.request.body;
        if (!requestBody || !requestBody.hasNext())
            return new sn_ws_err.BadRequestError('initialize: no body found');

        var body = requestBody.nextEntry();
        testId = body.id || null;
        if (gs.nil(testId))
            return new sn_ws_err.BadRequestError('initialize: testId property not found' + JSON.stringify(body));

        runnerId = body.runnerId || null;
        if (gs.nil(runnerId))
            return new sn_ws_err.BadRequestError('initialize: runnerId property not found');
        
        var gr = new GlideRecord('sys_atf_test');
        if (!gr.get(testId)) {
            return new sn_ws_err.BadRequestError("Could not find the Test suite with id: " + testId);
        }

        out.url = gs.getProperty('glide.servlet.uri').concat(gr.getLink(true));
        out.name = gr.getDisplayValue();

        need_browser = sn_atf.AutomatedTestingFramework.doesTestHaveUISteps(testId);
        if (need_browser) {
            testRunnerSessionId = self.getTestRunnerSessionId(runnerId);
            if (gs.nil(testRunnerSessionId)) {
                return new sn_ws_err.BadRequestError("This Test requires an active Test Runner to be available.");
            }
        }

        // execute test
        out.executionId = new TestExecutorAjax((function () {
            var params = {
                'sysparm_ajax_processor_ut_test_id': testId,
                'sysparm_ajax_processor_test_runner_session_id': testRunnerSessionId
            };
            return {
                /**
                 * Description
                 * 
                 * @param {any} name
                 * @returns {MemberExpression}
                 */
                getParameter: function name(name) {
                    return params[name];
                }
            };
        })(), new GlideXMLDocument(), '').process();

        return out;
    },


    /**
     * Get Single Test Results&lt;br&gt;
     * mapped to GET /api/devops/v1/cicd/atf/test/{id}
     * @returns {any}
     */
    getTestResults: function () {
        var self = this;

        var testId = self.getPathParam('testId');

        return self._getTestResultDetails(testId);

    },

    /**
     * Get the execution state of a test run&lt;br&gt;
     * mapped to GET /api/devops/v1/cicd/atf/track/{id}
     * @returns {any}
     */
    getExecutionTrackerState: function () {
        var self = this;
        var id = self.getPathParam('executionId');
        var gr = new GlideRecord('sys_execution_tracker');
        gr.get(id);

        return {
            state: {
                value: gr.getValue('state'),
                display_value: gr.getDisplayValue('state')
            },
            result: {
                value: gr.getValue('result'),
                display_value: gr.getDisplayValue('result')
            },
            url: gs.getProperty('glide.servlet.uri').concat(gr.getLink(true))
        };

    },

    /**
     * convert test result to object
     * 
     * @param {any} sysId
     * @returns {any} out
     */
    _getTestResultDetails: function (sysId) {
        var self = this,
            out = {
                stepResults: []
            };

        var gr = new GlideRecord('sys_atf_test_result');
        if (gr.get(sysId)) {

            out.number = gr.getDisplayValue('test');
            out.status = gr.getValue('status');
            out.startTime = gr.getValue('start_time');
            out.endTime = gr.getValue('end_time');
            out.duration = gr.getValue('run_time');
            out.output = gr.getValue('output');
            out.type = 'test_result';
            out.url = gs.getProperty('glide.servlet.uri').concat(gr.getLink(true));

            var gRes = new GlideRecord('sys_atf_test_result_step');
            gRes.addQuery('test_result', gr.getValue('sys_id'));
            gRes.orderBy('step.order');
            gRes._query();
            while (gRes._next()) {
                out.stepResults.push({
                    order: parseInt(gRes.getElement('step.order').toString(), 10),
                    startTime: gRes.getValue('start_time'),
                    step: gRes.getDisplayValue('step'),
                    status: gRes.getValue('status'),
                    summary: gRes.getValue('summary'),
                    url: gs.getProperty('glide.servlet.uri').concat(gRes.getLink(true))
                });
            }
        }
        return out;
    },

    type: 'CiCdAtf'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-08-02 10:25:39&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;94a29327db2fd300dfa9b94ffe9619a5&lt;/sys_id&gt;&lt;sys_mod_count&gt;18&lt;/sys_mod_count&gt;&lt;sys_name&gt;CiCdAtf&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_94a29327db2fd300dfa9b94ffe9619a5&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-02-28 14:19:19&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>-404806724</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>6f90214cdbf77b80ee93b14ffe9619e8</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ec950000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CiCdAtf</target_name>
<type>Script Include</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_category_m2m_23fc0a26dbe1a700323efc600f961955</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties_category_m2m"><sys_properties_category_m2m action="INSERT_OR_UPDATE"><category display_value="CICD Integration">8d1de113dbb86380432cfc600f9619f6</category><order>0</order><property display_value="cicd-integration.enabled" name="cicd-integration.enabled">d9ecc622dbe1a700323efc600f961901</property><sys_class_name>sys_properties_category_m2m</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-11-06 12:51:09</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>23fc0a26dbe1a700323efc600f961955</sys_id><sys_mod_count>3</sys_mod_count><sys_name>cicd-integration.enabled.CICD Integration</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_category_m2m_23fc0a26dbe1a700323efc600f961955</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-11-06 12:54:00</sys_updated_on></sys_properties_category_m2m></record_update>]]></payload>
<payload_hash>1618055312</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>6f902d4cdbf77b80ee93b14ffe961949</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061e9ee0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.enabled.CICD Integration</target_name>
<type>Category Property</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_operation_8bb25eaddb0dab80432cfc600f961931</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ws_operation"&gt;&lt;sys_ws_operation action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;consumes&gt;application/json,application/xml,text/xml&lt;/consumes&gt;&lt;consumes_customized&gt;false&lt;/consumes_customized&gt;&lt;default_operation_uri&gt;/api/devops/cicd/export_updateset/{updateSetSysId}&lt;/default_operation_uri&gt;&lt;enforce_acl&gt;1a7833bddbb31f0076d6b94ffe961994&lt;/enforce_acl&gt;&lt;http_method&gt;GET&lt;/http_method&gt;&lt;name&gt;CI - Export UpdateSet XML&lt;/name&gt;&lt;operation_script&gt;&lt;![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
	
	return new CiCdApi(request, response).exportUpdateSet(request.pathParams.updateSetSysId);
	
})(request, response);]]&gt;&lt;/operation_script&gt;&lt;operation_uri&gt;/api/devops/v1/cicd/export_updateset/{updateSetSysId}&lt;/operation_uri&gt;&lt;produces&gt;application/json,application/xml,text/xml&lt;/produces&gt;&lt;produces_customized&gt;false&lt;/produces_customized&gt;&lt;relative_path&gt;/export_updateset/{updateSetSysId}&lt;/relative_path&gt;&lt;request_example/&gt;&lt;requires_acl_authorization&gt;true&lt;/requires_acl_authorization&gt;&lt;requires_authentication&gt;true&lt;/requires_authentication&gt;&lt;requires_snc_internal_role&gt;true&lt;/requires_snc_internal_role&gt;&lt;short_description&gt;Get all XML records of an UpdateSet&lt;/short_description&gt;&lt;sys_class_name&gt;sys_ws_operation&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-10-09 14:10:55&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;8bb25eaddb0dab80432cfc600f961931&lt;/sys_id&gt;&lt;sys_mod_count&gt;10&lt;/sys_mod_count&gt;&lt;sys_name&gt;CI - Export UpdateSet XML&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ws_operation_8bb25eaddb0dab80432cfc600f961931&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-01-29 11:05:03&lt;/sys_updated_on&gt;&lt;web_service_definition display_value="CICD Integration"&gt;81eccb6fdbebd300dfa9b94ffe96190e&lt;/web_service_definition&gt;&lt;web_service_version display_value="v1"&gt;0a3dcb2fdbebd300dfa9b94ffe9619c7&lt;/web_service_version&gt;&lt;/sys_ws_operation&gt;&lt;/record_update&gt;</payload>
<payload_hash>2006108053</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>6f902d4cdbf77b80ee93b14ffe96194c</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ec4e0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CI - Export UpdateSet XML</target_name>
<type>Scripted REST Resource</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_operation_881f87efdbebd300dfa9b94ffe961978</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ws_operation"&gt;&lt;sys_ws_operation action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;consumes&gt;application/json,application/xml,text/xml&lt;/consumes&gt;&lt;consumes_customized&gt;false&lt;/consumes_customized&gt;&lt;default_operation_uri&gt;/api/devops/cicd/atf/suite&lt;/default_operation_uri&gt;&lt;enforce_acl&gt;9041d7a3db2fd300dfa9b94ffe961910&lt;/enforce_acl&gt;&lt;http_method&gt;POST&lt;/http_method&gt;&lt;name&gt;ATF - Run Suite&lt;/name&gt;&lt;operation_script&gt;&lt;![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    return new CiCdAtf(request, response).executeSuite();

})(request, response);]]&gt;&lt;/operation_script&gt;&lt;operation_uri&gt;/api/devops/v1/cicd/atf/suite&lt;/operation_uri&gt;&lt;produces&gt;application/json,application/xml,text/xml&lt;/produces&gt;&lt;produces_customized&gt;false&lt;/produces_customized&gt;&lt;relative_path&gt;/atf/suite&lt;/relative_path&gt;&lt;request_example/&gt;&lt;requires_acl_authorization&gt;true&lt;/requires_acl_authorization&gt;&lt;requires_authentication&gt;true&lt;/requires_authentication&gt;&lt;requires_snc_internal_role&gt;true&lt;/requires_snc_internal_role&gt;&lt;short_description&gt;Execute an ATF suite from remote&lt;/short_description&gt;&lt;sys_class_name&gt;sys_ws_operation&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-08-02 10:08:10&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;881f87efdbebd300dfa9b94ffe961978&lt;/sys_id&gt;&lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;&lt;sys_name&gt;ATF - Run Suite&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ws_operation_881f87efdbebd300dfa9b94ffe961978&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-08-02 11:07:40&lt;/sys_updated_on&gt;&lt;web_service_definition display_value="CICD Integration"&gt;81eccb6fdbebd300dfa9b94ffe96190e&lt;/web_service_definition&gt;&lt;web_service_version display_value="v1"&gt;0a3dcb2fdbebd300dfa9b94ffe9619c7&lt;/web_service_version&gt;&lt;/sys_ws_operation&gt;&lt;/record_update&gt;</payload>
<payload_hash>1919291012</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>6f902d4cdbf77b80ee93b14ffe96194f</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ec3d0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>ATF - Run Suite</target_name>
<type>Scripted REST Resource</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_map_dab8c2a5db73db0076d6b94ffe961988</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter_map"><sys_ws_query_parameter_map action="INSERT_OR_UPDATE"><sys_class_name>sys_ws_query_parameter_map</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-08 10:11:24</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>dab8c2a5db73db0076d6b94ffe961988</sys_id><sys_mod_count>0</sys_mod_count><sys_name>12c846a5db73db0076d6b94ffe961917</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_map_dab8c2a5db73db0076d6b94ffe961988</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-08 10:11:24</sys_updated_on><web_service_operation display_value="CI - Get UpdateSet Files">4f6a31a9db33db0076d6b94ffe9619fa</web_service_operation><web_service_query_parameter display_value="sysparm_limit">12c846a5db73db0076d6b94ffe961917</web_service_query_parameter></sys_ws_query_parameter_map></record_update>]]></payload>
<payload_hash>150208212</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>6f902d4cdbf77b80ee93b14ffe961952</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061edfc0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>12c846a5db73db0076d6b94ffe961917</target_name>
<type>Scripted REST Query Parameter Associatio</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_role_560285d7db6d2b00323efc600f9619a5</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl_role"><sys_security_acl_role action="INSERT_OR_UPDATE"><sys_class_name>sys_security_acl_role</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-11-08 15:19:17</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>560285d7db6d2b00323efc600f9619a5</sys_id><sys_mod_count>0</sys_mod_count><sys_name>CiCdExportBaseUpdateSet.cicd_integration_user</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_security_acl display_value="CiCdExportBaseUpdateSet">bc02c9d7db6d2b00323efc600f96192c</sys_security_acl><sys_update_name>sys_security_acl_role_560285d7db6d2b00323efc600f9619a5</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-11-08 15:19:17</sys_updated_on><sys_user_role display_value="cicd_integration_user" name="cicd_integration_user">dd194b2bdbebd300dfa9b94ffe96194f</sys_user_role><transaction_id/></sys_security_acl_role></record_update>]]></payload>
<payload_hash>833217698</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>6f902d4cdbf77b80ee93b14ffe961955</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061eac00000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table>CiCdExportBaseUpdateSet</table>
<target_name>CiCdExportBaseUpdateSet.cicd_integration_user</target_name>
<type>Access Roles</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_category_m2m_1529da7adbdaa7c076d6b94ffe961953</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties_category_m2m"><sys_properties_category_m2m action="INSERT_OR_UPDATE"><category display_value="CICD Integration">8d1de113dbb86380432cfc600f9619f6</category><order>520</order><property display_value="cicd-integration.pull-request-proxy.header-secret-name" name="cicd-integration.pull-request-proxy.header-secret-name">2aa816f6dbdaa7c076d6b94ffe96195c</property><sys_class_name>sys_properties_category_m2m</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-12-14 15:09:48</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>1529da7adbdaa7c076d6b94ffe961953</sys_id><sys_mod_count>1</sys_mod_count><sys_name>cicd-integration.server.pullrequest.header-secret.CICD Integration</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_category_m2m_1529da7adbdaa7c076d6b94ffe961953</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-12-14 15:10:00</sys_updated_on></sys_properties_category_m2m></record_update>]]></payload>
<payload_hash>340326930</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>6f902d4cdbf77b80ee93b14ffe961956</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061e9800000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.server.pullrequest.header-secret.CICD Integration</target_name>
<type>Category Property</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_bc014d97db6d2b00323efc600f961936</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl"><sys_security_acl action="INSERT_OR_UPDATE"><active>true</active><admin_overrides>true</admin_overrides><advanced>false</advanced><condition/><description/><name>CiCdExportUpdateSet</name><operation display_value="execute">execute</operation><script/><sys_class_name>sys_security_acl</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-11-08 15:15:24</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>bc014d97db6d2b00323efc600f961936</sys_id><sys_mod_count>1</sys_mod_count><sys_name>CiCdExportUpdateSet</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_security_acl_bc014d97db6d2b00323efc600f961936</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-11-08 15:18:46</sys_updated_on><type display_value="processor">processor</type></sys_security_acl></record_update>]]></payload>
<payload_hash>427851278</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>6f902d4cdbf77b80ee93b14ffe961959</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ed460000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table>CiCdExportUpdateSet</table>
<target_name>CiCdExportUpdateSet</target_name>
<type>Access Control</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_a16a83eadb7be7409775f6700f9619b3</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>&lt;b&gt;Show CICD UI action in scoped apps.&lt;/b&gt;</description><ignore_cache>false</ignore_cache><is_private>false</is_private><name>cicd-integration.enabled.on-scoped-app</name><read_roles/><suffix/><sys_class_name>sys_properties</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2019-02-26 13:40:43</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>a16a83eadb7be7409775f6700f9619b3</sys_id><sys_mod_count>6</sys_mod_count><sys_name>cicd-integration.enabled.on-scoped-app</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_a16a83eadb7be7409775f6700f9619b3</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2019-02-26 13:54:35</sys_updated_on><type>boolean</type><value>false</value><write_roles/></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=a16a83eadb7be7409775f6700f9619b3"/></record_update>]]></payload>
<payload_hash>-1414276959</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>a390214cdbf77b80ee93b14ffe9619e7</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ecd10000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.enabled.on-scoped-app</target_name>
<type>System Property</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_category_m2m_88752389db432f00ee93b14ffe96199a</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties_category_m2m"><sys_properties_category_m2m action="INSERT_OR_UPDATE"><category display_value="CICD Integration">8d1de113dbb86380432cfc600f9619f6</category><order>410</order><property display_value="cicd-integration.auto-create-cd-user" name="cicd-integration.auto-create-cd-user">2d24af09db432f00ee93b14ffe961983</property><sys_class_name>sys_properties_category_m2m</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2019-01-15 17:00:52</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>88752389db432f00ee93b14ffe96199a</sys_id><sys_mod_count>3</sys_mod_count><sys_name>cicd-integration.auto-create-cd-user.CICD Integration</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_category_m2m_88752389db432f00ee93b14ffe96199a</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2019-01-31 09:27:03</sys_updated_on></sys_properties_category_m2m></record_update>]]></payload>
<payload_hash>-1631997357</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>a390214cdbf77b80ee93b14ffe9619ea</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ec450000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.auto-create-cd-user.CICD Integration</target_name>
<type>Category Property</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_map_595daaf1dbffdb0076d6b94ffe961926</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter_map"><sys_ws_query_parameter_map action="INSERT_OR_UPDATE"><sys_class_name>sys_ws_query_parameter_map</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-09 07:27:14</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>595daaf1dbffdb0076d6b94ffe961926</sys_id><sys_mod_count>0</sys_mod_count><sys_name>8d736e29dbb3db0076d6b94ffe961989</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_map_595daaf1dbffdb0076d6b94ffe961926</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-09 07:27:14</sys_updated_on><web_service_operation display_value="CI - Get Files from Table">f3cca2b1dbffdb0076d6b94ffe96191e</web_service_operation><web_service_query_parameter display_value="sysparm_display_value">8d736e29dbb3db0076d6b94ffe961989</web_service_query_parameter></sys_ws_query_parameter_map></record_update>]]></payload>
<payload_hash>1072202913</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>a3902d4cdbf77b80ee93b14ffe96194b</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061eacf0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>8d736e29dbb3db0076d6b94ffe961989</target_name>
<type>Scripted REST Query Parameter Associatio</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_c7aabe3bdb9f3f408fb6f6700f9619b2</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_ui_action"&gt;&lt;sys_ui_action action="INSERT_OR_UPDATE"&gt;&lt;action_name&gt;cicd_run_confirm_problems&lt;/action_name&gt;&lt;active&gt;true&lt;/active&gt;&lt;client&gt;false&lt;/client&gt;&lt;client_script_v2/&gt;&lt;comments&gt;Confirm preview problems and continue with pipeline&lt;/comments&gt;&lt;condition&gt;new global.CiCdRun().sys_remote_updateDisplayConfirmUiAction(current)&lt;/condition&gt;&lt;form_action&gt;true&lt;/form_action&gt;&lt;form_button&gt;true&lt;/form_button&gt;&lt;form_button_v2&gt;false&lt;/form_button_v2&gt;&lt;form_context_menu&gt;false&lt;/form_context_menu&gt;&lt;form_link&gt;false&lt;/form_link&gt;&lt;form_menu_button_v2&gt;false&lt;/form_menu_button_v2&gt;&lt;form_style/&gt;&lt;hint/&gt;&lt;isolate_script&gt;false&lt;/isolate_script&gt;&lt;list_action&gt;false&lt;/list_action&gt;&lt;list_banner_button&gt;false&lt;/list_banner_button&gt;&lt;list_button&gt;false&lt;/list_button&gt;&lt;list_choice&gt;false&lt;/list_choice&gt;&lt;list_context_menu&gt;false&lt;/list_context_menu&gt;&lt;list_link&gt;false&lt;/list_link&gt;&lt;list_save_with_form_button&gt;false&lt;/list_save_with_form_button&gt;&lt;list_style/&gt;&lt;name&gt;Confirm Conflicts [CICD]&lt;/name&gt;&lt;onclick/&gt;&lt;order&gt;-1&lt;/order&gt;&lt;script&gt;&lt;![CDATA[new global.CiCdRun().sys_remote_updateConfirmUiAction(current, action);
]]&gt;&lt;/script&gt;&lt;show_insert&gt;false&lt;/show_insert&gt;&lt;show_multiple_update&gt;false&lt;/show_multiple_update&gt;&lt;show_query&gt;false&lt;/show_query&gt;&lt;show_update&gt;true&lt;/show_update&gt;&lt;sys_class_name&gt;sys_ui_action&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-08-23 09:24:10&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_id&gt;c7aabe3bdb9f3f408fb6f6700f9619b2&lt;/sys_id&gt;&lt;sys_mod_count&gt;12&lt;/sys_mod_count&gt;&lt;sys_name&gt;Confirm Conflicts [CICD]&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_action_c7aabe3bdb9f3f408fb6f6700f9619b2&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-08-28 14:34:32&lt;/sys_updated_on&gt;&lt;table&gt;sys_remote_update_set&lt;/table&gt;&lt;ui11_compatible&gt;true&lt;/ui11_compatible&gt;&lt;ui16_compatible&gt;false&lt;/ui16_compatible&gt;&lt;/sys_ui_action&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1248524266</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>a3902d4cdbf77b80ee93b14ffe96194e</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ed750000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table>sys_remote_update_set</table>
<target_name>Confirm Conflicts [CICD]</target_name>
<type>UI Action</type>
<update_domain>global</update_domain>
<update_guid>5aa1712125a37780ef446ccc7ae74e2c</update_guid>
<update_guid_history>5aa1712125a37780ef446ccc7ae74e2c:-1248524266,c08a5fc960e77f409fe35314ec2f463d:1959969654,1f9ac34943a77f40c1d9e670912bf953:456121292,b16aabb086e73f4095b0a23a84ac5be3:460217694,75fb873492673f40110cfac8f0c0fe2d:1427333681,33db0ff4e1673f408eb7fcd2a016fcd3:-1023577949,6c9b83f443673f40ce496bc05dc2d1fa:1427333681,76f6137fa1137f4011931c7a8225127b:-1886777690,67c6d3f78c137f404d9aa89fc0a7a5ea:34016824,31a61ffb65137f40e72a425c14e466b8:-156632816,174b367b939f3f40162864dbed622ae8:-485585249,9fba7e3bcd9f3f4047217a8f0c83886c:1281482611,83aabe3b799f3f40474b53091ca20cb4:2037418880</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_map_10b3aa69dbb3db0076d6b94ffe961946</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter_map"><sys_ws_query_parameter_map action="INSERT_OR_UPDATE"><sys_class_name>sys_ws_query_parameter_map</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-08 12:06:39</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>10b3aa69dbb3db0076d6b94ffe961946</sys_id><sys_mod_count>0</sys_mod_count><sys_name>8d336669dbb3db0076d6b94ffe96193e</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_map_10b3aa69dbb3db0076d6b94ffe961946</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-08 12:06:39</sys_updated_on><web_service_operation display_value="CI - Get UpdateSet Files">4f6a31a9db33db0076d6b94ffe9619fa</web_service_operation><web_service_query_parameter display_value="sysparm_fields">8d336669dbb3db0076d6b94ffe96193e</web_service_query_parameter></sys_ws_query_parameter_map></record_update>]]></payload>
<payload_hash>1871068494</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>a3902d4cdbf77b80ee93b14ffe961951</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061e9120000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>8d336669dbb3db0076d6b94ffe96193e</target_name>
<type>Scripted REST Query Parameter Associatio</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_map_b182675adb1667c076d6b94ffe9619a1</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter_map"><sys_ws_query_parameter_map action="INSERT_OR_UPDATE"><sys_class_name>sys_ws_query_parameter_map</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-12-13 07:13:42</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>b182675adb1667c076d6b94ffe9619a1</sys_id><sys_mod_count>0</sys_mod_count><sys_name>8d736e29dbb3db0076d6b94ffe961989</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_map_b182675adb1667c076d6b94ffe9619a1</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-12-13 07:13:42</sys_updated_on><web_service_operation display_value="CI - Get Scope Details">2082ef56db1667c076d6b94ffe961972</web_service_operation><web_service_query_parameter display_value="sysparm_display_value">8d736e29dbb3db0076d6b94ffe961989</web_service_query_parameter></sys_ws_query_parameter_map></record_update>]]></payload>
<payload_hash>731251037</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>a3902d4cdbf77b80ee93b14ffe961954</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ed140000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>8d736e29dbb3db0076d6b94ffe961989</target_name>
<type>Scripted REST Query Parameter Associatio</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_8d336669dbb3db0076d6b94ffe96193e</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter"><sys_ws_query_parameter action="INSERT_OR_UPDATE"><example_value/><name>sysparm_fields</name><required>false</required><short_description>A comma-separated list of fields to return in the response</short_description><sys_class_name>sys_ws_query_parameter</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-08 12:04:48</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>8d336669dbb3db0076d6b94ffe96193e</sys_id><sys_mod_count>0</sys_mod_count><sys_name>sysparm_fields</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_8d336669dbb3db0076d6b94ffe96193e</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-08 12:04:48</sys_updated_on><web_service_definition display_value="CICD Integration">81eccb6fdbebd300dfa9b94ffe96190e</web_service_definition></sys_ws_query_parameter></record_update>]]></payload>
<payload_hash>-1573573632</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>a3902d4cdbf77b80ee93b14ffe961958</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ec5b0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>sysparm_fields</target_name>
<type>Scripted REST Query Parameter</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sysrule_view_2aa25305dbe77f409775f6700f961981</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sysrule_view"><sysrule_view action="INSERT_OR_UPDATE"><active>true</active><advanced>false</advanced><condition table="sys_remote_update_set">stateSTARTSWITHconflict_review^EQ<item endquery="false" field="state" goto="false" newquery="false" operator="STARTSWITH" or="false" value="conflict_review"/><item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/></condition><description/><device_type>browser</device_type><match_conditions>ALL</match_conditions><name>CICD-Conflict-Review</name><order>100</order><overrides_user_preference>true</overrides_user_preference><script/><sys_class_name>sysrule_view</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2019-08-27 08:21:23</sys_created_on><sys_customer_update>false</sys_customer_update><sys_domain>global</sys_domain><sys_id>2aa25305dbe77f409775f6700f961981</sys_id><sys_mod_count>8</sys_mod_count><sys_name>CICD-Conflict-Review</sys_name><sys_overrides/><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sysrule_view_2aa25305dbe77f409775f6700f961981</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2019-08-28 14:23:01</sys_updated_on><table>sys_remote_update_set</table><view>cicd_preview</view></sysrule_view></record_update>]]></payload>
<payload_hash>1528972619</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>a790214cdbf77b80ee93b14ffe9619e6</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061e9f80000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table>sys_remote_update_set</table>
<target_name>CICD-Conflict-Review</target_name>
<type>View Rule</type>
<update_domain>global</update_domain>
<update_guid>590f25a9d76377808733064f071d5659</update_guid>
<update_guid_history>590f25a9d76377808733064f071d5659:1528972619,2ab6570904e77f40f5856f5049e5a474:2006934861,05465fc559e77f405a16efbc1be8e66f:-1462066323,32d457850ae77f4039dc89c8586c3dc1:1500480660,61c41785d3e77f40a731acdce68f5414:1690738164,21b49385a4e77f402ba9ecc1556672df:1398099369,4a145b45a2e77f40ce09095884fffba1:794010706,b1a3d3459de77f4002920154c6ec6cd2:-548713272,2ea25305bbe77f40d1f56875f03a2e82:-1409100774</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_bc02c9d7db6d2b00323efc600f96192c</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl"><sys_security_acl action="INSERT_OR_UPDATE"><active>true</active><admin_overrides>true</admin_overrides><advanced>false</advanced><condition/><description/><name>CiCdExportBaseUpdateSet</name><operation display_value="execute">execute</operation><script/><sys_class_name>sys_security_acl</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-11-08 15:19:00</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>bc02c9d7db6d2b00323efc600f96192c</sys_id><sys_mod_count>0</sys_mod_count><sys_name>CiCdExportBaseUpdateSet</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_security_acl_bc02c9d7db6d2b00323efc600f96192c</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-11-08 15:19:00</sys_updated_on><type display_value="processor">processor</type></sys_security_acl></record_update>]]></payload>
<payload_hash>-607368720</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>a790214cdbf77b80ee93b14ffe9619e9</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ed4d0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table>CiCdExportBaseUpdateSet</table>
<target_name>CiCdExportBaseUpdateSet</target_name>
<type>Access Control</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_script_4d57c452dbe333801af8b14ffe96198b</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;true&lt;/action_insert&gt;&lt;action_label/&gt;&lt;action_name/&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_run_at&gt;server&lt;/action_run_at&gt;&lt;action_update&gt;true&lt;/action_update&gt;&lt;active&gt;true&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;application/&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;sys_remote_update_set&lt;/collection&gt;&lt;condition/&gt;&lt;description/&gt;&lt;execute_function&gt;false&lt;/execute_function&gt;&lt;filter_condition/&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;[CICD] Send Deployment Complete to CICD&lt;/name&gt;&lt;onclick/&gt;&lt;order&gt;1&lt;/order&gt;&lt;priority&gt;1&lt;/priority&gt;&lt;read_access_action&gt;false&lt;/read_access_action&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[(function executeRule(current) {
	new global.CiCdRun().sys_remote_update_set_AsyncIU(current);
})(current);]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-08-30 14:45:25&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_id&gt;4d57c452dbe333801af8b14ffe96198b&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_name&gt;[CICD] Send Deployment Complete to CICD&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_4d57c452dbe333801af8b14ffe96198b&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-08-30 14:45:25&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;when&gt;async&lt;/when&gt;&lt;/sys_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1432199529</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>a7902d4cdbf77b80ee93b14ffe96194a</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ea7c0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table>sys_remote_update_set</table>
<target_name>[CICD] Send Deployment Complete to CICD</target_name>
<type>Business Rule</type>
<update_domain>global</update_domain>
<update_guid>4957c45224e3338014423e3f2bacc08e</update_guid>
<update_guid_history>4957c45224e3338014423e3f2bacc08e:-1432199529</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_role_bad193e3db2fd300dfa9b94ffe961909</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl_role"><sys_security_acl_role action="INSERT_OR_UPDATE"><sys_class_name>sys_security_acl_role</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-02 10:21:02</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>bad193e3db2fd300dfa9b94ffe961909</sys_id><sys_mod_count>0</sys_mod_count><sys_name>/api/devops/cicd/atf.atf_test_designer</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_security_acl display_value="/api/devops/cicd/atf">9041d7a3db2fd300dfa9b94ffe961910</sys_security_acl><sys_update_name>sys_security_acl_role_bad193e3db2fd300dfa9b94ffe961909</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-02 10:21:02</sys_updated_on><sys_user_role display_value="atf_test_designer" name="atf_test_designer">38eb7e98372413003ddac98754990e04</sys_user_role><transaction_id/></sys_security_acl_role></record_update>]]></payload>
<payload_hash>793082969</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>a7902d4cdbf77b80ee93b14ffe96194d</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ed3e0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table>/api/devops/cicd/atf</table>
<target_name>/api/devops/cicd/atf.atf_test_designer</target_name>
<type>Access Roles</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_script_include_d8f74022db9667c076d6b94ffe9619b5</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;global.CiCdJsDoc&lt;/api_name&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;CiCdJsDoc&lt;/name&gt;&lt;script&gt;&lt;![CDATA[/**
 * Helper Class to control visibility of UI action
 * 
 * @class 
 * @author Boris Moers [b.moers]
 * @memberof global.module:sys_script_include
 */
var CiCdJsDoc = Class.create();
CiCdJsDoc.prototype = /** @lends global.module:sys_script_include.CiCdJsDoc.prototype */ {
    /**
     * Constructor
     * 
     * @returns {undefined}
     */
    initialize: function () {
    },

    /**
     * Helper Function to show/hide button
     * 
     * @param {any} current
     * @returns {boolean} 
     */
    showButton: function (current) {
        if (gs.nil(current) || !current.canWrite())
            return false;

        return (gs.getProperty('cicd-integration.jsdocButton.enabled', 'false') == 'true');
    },

    type: 'CiCdJsDoc'
};]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-12-13 09:57:36&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;d8f74022db9667c076d6b94ffe9619b5&lt;/sys_id&gt;&lt;sys_mod_count&gt;4&lt;/sys_mod_count&gt;&lt;sys_name&gt;CiCdJsDoc&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_d8f74022db9667c076d6b94ffe9619b5&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-02-28 14:20:04&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1543452726</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>a7902d4cdbf77b80ee93b14ffe961950</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ede90000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CiCdJsDoc</target_name>
<type>Script Include</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_view_dfbde738dbe73f409775f6700f9619cd</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_action_view"><sys_ui_action_view action="INSERT_OR_UPDATE"><sys_class_name>sys_ui_action_view</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2019-08-26 15:41:12</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>dfbde738dbe73f409775f6700f9619cd</sys_id><sys_mod_count>1</sys_mod_count><sys_name>Run Preview Again.CICD Preview</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_ui_action display_value="Run Preview Again">ee4e751b0a0a0b540067943a72e77194</sys_ui_action><sys_ui_view display_value="CICD Preview" name="cicd_preview">cdb37233db9f3f408fb6f6700f96191a</sys_ui_view><sys_update_name>sys_ui_action_view_dfbde738dbe73f409775f6700f9619cd</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2019-08-26 15:41:17</sys_updated_on><visibility>exclude</visibility></sys_ui_action_view></record_update>]]></payload>
<payload_hash>880080553</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>a7902d4cdbf77b80ee93b14ffe961953</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ee7e0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>exclude</target_name>
<type>UI View Action</type>
<update_domain/>
<update_guid>2ccd27382fe73f4025bcbcc29047405d</update_guid>
<update_guid_history>2ccd27382fe73f4025bcbcc29047405d:880080553,1bbde7389be73f400724c770c279a5cf:-1096425993</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_version_0a3dcb2fdbebd300dfa9b94ffe9619c7</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_version"><sys_ws_version action="INSERT_OR_UPDATE"><active>true</active><deprecated>false</deprecated><is_default>true</is_default><short_description/><sys_class_name>sys_ws_version</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-02 10:00:07</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>0a3dcb2fdbebd300dfa9b94ffe9619c7</sys_id><sys_mod_count>1</sys_mod_count><sys_name>v1</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_version_0a3dcb2fdbebd300dfa9b94ffe9619c7</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-02 10:00:07</sys_updated_on><version>1</version><version_id>v1</version_id><web_service_definition display_value="CICD Integration">81eccb6fdbebd300dfa9b94ffe96190e</web_service_definition></sys_ws_version></record_update>]]></payload>
<payload_hash>-702790228</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>a7902d4cdbf77b80ee93b14ffe961957</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061e8ed0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>v1</target_name>
<type>Scripted REST Version</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_script_76fd0722dbbbe7409775f6700f9619e3</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;false&lt;/action_insert&gt;&lt;action_label/&gt;&lt;action_name/&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_run_at&gt;server&lt;/action_run_at&gt;&lt;action_update&gt;true&lt;/action_update&gt;&lt;active&gt;true&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;application/&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;sys_update_set&lt;/collection&gt;&lt;condition/&gt;&lt;description/&gt;&lt;execute_function&gt;false&lt;/execute_function&gt;&lt;filter_condition/&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;[CICD] Check state changes and run CICD&lt;/name&gt;&lt;onclick/&gt;&lt;order&gt;10&lt;/order&gt;&lt;priority&gt;100&lt;/priority&gt;&lt;read_access_action&gt;false&lt;/read_access_action&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[(function executeRule(current, previous /*null when async*/) {
	
	new CiCdRun().sys_update_set_Before_IU(current, previous);
	
})(current, previous);]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-02-26 13:58:55&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_id&gt;76fd0722dbbbe7409775f6700f9619e3&lt;/sys_id&gt;&lt;sys_mod_count&gt;4&lt;/sys_mod_count&gt;&lt;sys_name&gt;[CICD] Check state changes and run CICD&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_76fd0722dbbbe7409775f6700f9619e3&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-08-30 14:33:53&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;when&gt;before&lt;/when&gt;&lt;/sys_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1667923142</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>a7902d4cdbf77b80ee93b14ffe96195a</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ebb00000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table>sys_update_set</table>
<target_name>[CICD] Check state changes and run CICD</target_name>
<type>Business Rule</type>
<update_domain>global</update_domain>
<update_guid>00b4cc5e12a33380ef57e5df4740596a</update_guid>
<update_guid_history>00b4cc5e12a33380ef57e5df4740596a:-1667923142,dccf8da5ac27ff40d60b158af309366b:566023238,38183c6590e3ff40ca5f0c7601b959ea:1965782833,78183c65d7e3ff401e50cb8b09ba9de7:-286709437</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_operation_6637ca8fdb6737801af8b14ffe96195d</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ws_operation"&gt;&lt;sys_ws_operation action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;consumes&gt;application/json,application/xml,text/xml&lt;/consumes&gt;&lt;consumes_customized&gt;false&lt;/consumes_customized&gt;&lt;default_operation_uri&gt;/api/devops/cicd/version&lt;/default_operation_uri&gt;&lt;enforce_acl&gt;1a7833bddbb31f0076d6b94ffe961994&lt;/enforce_acl&gt;&lt;http_method&gt;GET&lt;/http_method&gt;&lt;name&gt;CI - Get Application Version&lt;/name&gt;&lt;operation_script&gt;&lt;![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
	
	return new CiCdApi(request, response).getAppVersion();

})(request, response);]]&gt;&lt;/operation_script&gt;&lt;operation_uri&gt;/api/devops/v1/cicd/version&lt;/operation_uri&gt;&lt;produces&gt;application/json,application/xml,text/xml&lt;/produces&gt;&lt;produces_customized&gt;false&lt;/produces_customized&gt;&lt;relative_path&gt;/version&lt;/relative_path&gt;&lt;request_example/&gt;&lt;requires_acl_authorization&gt;true&lt;/requires_acl_authorization&gt;&lt;requires_authentication&gt;true&lt;/requires_authentication&gt;&lt;requires_snc_internal_role&gt;true&lt;/requires_snc_internal_role&gt;&lt;short_description&gt;Get all XML records of an UpdateSet&lt;/short_description&gt;&lt;sys_class_name&gt;sys_ws_operation&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-09-02 07:59:40&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;6637ca8fdb6737801af8b14ffe96195d&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_name&gt;CI - Get Application Version&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ws_operation_6637ca8fdb6737801af8b14ffe96195d&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-09-02 07:59:40&lt;/sys_updated_on&gt;&lt;web_service_definition display_value="CICD Integration"&gt;81eccb6fdbebd300dfa9b94ffe96190e&lt;/web_service_definition&gt;&lt;web_service_version display_value="v1"&gt;0a3dcb2fdbebd300dfa9b94ffe9619c7&lt;/web_service_version&gt;&lt;/sys_ws_operation&gt;&lt;/record_update&gt;</payload>
<payload_hash>2066219161</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>ab90214cdbf77b80ee93b14ffe9619e5</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061eae60000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CI - Get Application Version</target_name>
<type>Scripted REST Resource</type>
<update_domain/>
<update_guid>ea37ca8fd767378033cf37acca1eae5e</update_guid>
<update_guid_history>ea37ca8fd767378033cf37acca1eae5e:2066219161</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_9041d7a3db2fd300dfa9b94ffe961910</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl"><sys_security_acl action="INSERT_OR_UPDATE"><active>true</active><admin_overrides>true</admin_overrides><advanced>false</advanced><condition/><description/><name>/api/devops/cicd/atf</name><operation display_value="execute">execute</operation><script/><sys_class_name>sys_security_acl</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-02 10:18:48</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>9041d7a3db2fd300dfa9b94ffe961910</sys_id><sys_mod_count>0</sys_mod_count><sys_name>/api/devops/cicd/atf</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_security_acl_9041d7a3db2fd300dfa9b94ffe961910</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-02 10:18:48</sys_updated_on><type display_value="REST_Endpoint">REST_Endpoint</type></sys_security_acl></record_update>]]></payload>
<payload_hash>-680893968</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>ab90214cdbf77b80ee93b14ffe9619e8</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ec7a0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table>/api/devops/cicd/atf</table>
<target_name>/api/devops/cicd/atf</target_name>
<type>Access Control</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_operation_f3cca2b1dbffdb0076d6b94ffe96191e</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ws_operation"&gt;&lt;sys_ws_operation action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;consumes&gt;application/json,application/xml,text/xml&lt;/consumes&gt;&lt;consumes_customized&gt;false&lt;/consumes_customized&gt;&lt;default_operation_uri&gt;/api/devops/cicd/file/{tableName}&lt;/default_operation_uri&gt;&lt;enforce_acl&gt;1a7833bddbb31f0076d6b94ffe961994&lt;/enforce_acl&gt;&lt;http_method&gt;GET&lt;/http_method&gt;&lt;name&gt;CI - Get Files from Table&lt;/name&gt;&lt;operation_script&gt;&lt;![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
	
	return new CiCdApi(request, response).getFilesFromTable(request.pathParams.tableName);

})(request, response);]]&gt;&lt;/operation_script&gt;&lt;operation_uri&gt;/api/devops/v1/cicd/file/{tableName}&lt;/operation_uri&gt;&lt;produces&gt;application/json,application/xml,text/xml&lt;/produces&gt;&lt;produces_customized&gt;false&lt;/produces_customized&gt;&lt;relative_path&gt;/file/{tableName}&lt;/relative_path&gt;&lt;request_example/&gt;&lt;requires_acl_authorization&gt;true&lt;/requires_acl_authorization&gt;&lt;requires_authentication&gt;true&lt;/requires_authentication&gt;&lt;requires_snc_internal_role&gt;true&lt;/requires_snc_internal_role&gt;&lt;short_description&gt;Get Records from a Table extending sys_metadata&lt;/short_description&gt;&lt;sys_class_name&gt;sys_ws_operation&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-08-09 07:24:51&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;f3cca2b1dbffdb0076d6b94ffe96191e&lt;/sys_id&gt;&lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;&lt;sys_name&gt;CI - Get Files from Table&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ws_operation_f3cca2b1dbffdb0076d6b94ffe96191e&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-08-09 12:57:16&lt;/sys_updated_on&gt;&lt;web_service_definition display_value="CICD Integration"&gt;81eccb6fdbebd300dfa9b94ffe96190e&lt;/web_service_definition&gt;&lt;web_service_version display_value="v1"&gt;0a3dcb2fdbebd300dfa9b94ffe9619c7&lt;/web_service_version&gt;&lt;/sys_ws_operation&gt;&lt;/record_update&gt;</payload>
<payload_hash>1290786105</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>ab902d4cdbf77b80ee93b14ffe961949</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ee9f0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CI - Get Files from Table</target_name>
<type>Scripted REST Resource</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_operation_6680a3afdb2fd300dfa9b94ffe961992</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ws_operation"&gt;&lt;sys_ws_operation action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;consumes&gt;application/json,application/xml,text/xml&lt;/consumes&gt;&lt;consumes_customized&gt;false&lt;/consumes_customized&gt;&lt;default_operation_uri&gt;/api/devops/cicd/pull&lt;/default_operation_uri&gt;&lt;enforce_acl&gt;2ae86fe7db6fd300dfa9b94ffe9619bc&lt;/enforce_acl&gt;&lt;http_method&gt;POST&lt;/http_method&gt;&lt;name&gt;CD - Pull UpdateSet from source&lt;/name&gt;&lt;operation_script&gt;&lt;![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    return new CiCdDeploy(request, response).pullUpdateSet();

})(request, response);]]&gt;&lt;/operation_script&gt;&lt;operation_uri&gt;/api/devops/v1/cicd/pull&lt;/operation_uri&gt;&lt;produces&gt;application/json,application/xml,text/xml&lt;/produces&gt;&lt;produces_customized&gt;false&lt;/produces_customized&gt;&lt;relative_path&gt;/pull&lt;/relative_path&gt;&lt;request_example/&gt;&lt;requires_acl_authorization&gt;true&lt;/requires_acl_authorization&gt;&lt;requires_authentication&gt;true&lt;/requires_authentication&gt;&lt;requires_snc_internal_role&gt;true&lt;/requires_snc_internal_role&gt;&lt;short_description&gt;Request Target to Pull an UpdateSet from Source&lt;/short_description&gt;&lt;sys_class_name&gt;sys_ws_operation&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-08-02 11:24:31&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;6680a3afdb2fd300dfa9b94ffe961992&lt;/sys_id&gt;&lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;&lt;sys_name&gt;CD - Pull UpdateSet from source&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ws_operation_6680a3afdb2fd300dfa9b94ffe961992&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-08-09 12:59:44&lt;/sys_updated_on&gt;&lt;web_service_definition display_value="CICD Integration"&gt;81eccb6fdbebd300dfa9b94ffe96190e&lt;/web_service_definition&gt;&lt;web_service_version display_value="v1"&gt;0a3dcb2fdbebd300dfa9b94ffe9619c7&lt;/web_service_version&gt;&lt;/sys_ws_operation&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1275875927</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>ab902d4cdbf77b80ee93b14ffe96194c</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061eaef0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CD - Pull UpdateSet from source</target_name>
<type>Scripted REST Resource</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_operation_7f82aa29dbb3db0076d6b94ffe9619af</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ws_operation"&gt;&lt;sys_ws_operation action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;consumes&gt;application/json,application/xml,text/xml&lt;/consumes&gt;&lt;consumes_customized&gt;false&lt;/consumes_customized&gt;&lt;default_operation_uri&gt;/api/devops/cicd/test_in_suites&lt;/default_operation_uri&gt;&lt;enforce_acl&gt;1a7833bddbb31f0076d6b94ffe961994&lt;/enforce_acl&gt;&lt;http_method&gt;GET&lt;/http_method&gt;&lt;name&gt;CI - Get All Test In Suites&lt;/name&gt;&lt;operation_script&gt;&lt;![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
	
	return new CiCdApi(request, response).getAllTestInSuites();

})(request, response);]]&gt;&lt;/operation_script&gt;&lt;operation_uri&gt;/api/devops/v1/cicd/test_in_suites&lt;/operation_uri&gt;&lt;produces&gt;application/json,application/xml,text/xml&lt;/produces&gt;&lt;produces_customized&gt;false&lt;/produces_customized&gt;&lt;relative_path&gt;/test_in_suites&lt;/relative_path&gt;&lt;request_example/&gt;&lt;requires_acl_authorization&gt;true&lt;/requires_acl_authorization&gt;&lt;requires_authentication&gt;true&lt;/requires_authentication&gt;&lt;requires_snc_internal_role&gt;true&lt;/requires_snc_internal_role&gt;&lt;short_description&gt;Get all Tests assigned to a Test Suite&lt;/short_description&gt;&lt;sys_class_name&gt;sys_ws_operation&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-08-08 12:01:35&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;7f82aa29dbb3db0076d6b94ffe9619af&lt;/sys_id&gt;&lt;sys_mod_count&gt;6&lt;/sys_mod_count&gt;&lt;sys_name&gt;CI - Get All Test In Suites&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ws_operation_7f82aa29dbb3db0076d6b94ffe9619af&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-10-09 14:37:05&lt;/sys_updated_on&gt;&lt;web_service_definition display_value="CICD Integration"&gt;81eccb6fdbebd300dfa9b94ffe96190e&lt;/web_service_definition&gt;&lt;web_service_version display_value="v1"&gt;0a3dcb2fdbebd300dfa9b94ffe9619c7&lt;/web_service_version&gt;&lt;/sys_ws_operation&gt;&lt;/record_update&gt;</payload>
<payload_hash>1064717164</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>ab902d4cdbf77b80ee93b14ffe96194f</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ec160000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CI - Get All Test In Suites</target_name>
<type>Scripted REST Resource</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_a6294a65db73db0076d6b94ffe961937</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter"><sys_ws_query_parameter action="INSERT_OR_UPDATE"><example_value>0</example_value><name>sysparm_offset</name><required>false</required><short_description>The offset row (default 0)</short_description><sys_class_name>sys_ws_query_parameter</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-08 10:10:38</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>a6294a65db73db0076d6b94ffe961937</sys_id><sys_mod_count>1</sys_mod_count><sys_name>sysparm_offset</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_a6294a65db73db0076d6b94ffe961937</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-08 10:15:15</sys_updated_on><web_service_definition display_value="CICD Integration">81eccb6fdbebd300dfa9b94ffe96190e</web_service_definition></sys_ws_query_parameter></record_update>]]></payload>
<payload_hash>120400958</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>ab902d4cdbf77b80ee93b14ffe961952</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ecdf0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>sysparm_offset</target_name>
<type>Scripted REST Query Parameter</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_operation_4f6a31a9db33db0076d6b94ffe9619fa</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ws_operation"&gt;&lt;sys_ws_operation action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;consumes&gt;application/json,application/xml,text/xml&lt;/consumes&gt;&lt;consumes_customized&gt;false&lt;/consumes_customized&gt;&lt;default_operation_uri&gt;/api/devops/cicd/updateset_files/{updateSetSysId}&lt;/default_operation_uri&gt;&lt;enforce_acl&gt;1a7833bddbb31f0076d6b94ffe961994&lt;/enforce_acl&gt;&lt;http_method&gt;GET&lt;/http_method&gt;&lt;name&gt;CI - Get UpdateSet Files&lt;/name&gt;&lt;operation_script&gt;&lt;![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
	
	return new CiCdApi(request, response).getUpdateSetFiles(request.pathParams.updateSetSysId);

})(request, response);]]&gt;&lt;/operation_script&gt;&lt;operation_uri&gt;/api/devops/v1/cicd/updateset_files/{updateSetSysId}&lt;/operation_uri&gt;&lt;produces&gt;application/json,application/xml,text/xml&lt;/produces&gt;&lt;produces_customized&gt;false&lt;/produces_customized&gt;&lt;relative_path&gt;/updateset_files/{updateSetSysId}&lt;/relative_path&gt;&lt;request_example/&gt;&lt;requires_acl_authorization&gt;true&lt;/requires_acl_authorization&gt;&lt;requires_authentication&gt;true&lt;/requires_authentication&gt;&lt;requires_snc_internal_role&gt;true&lt;/requires_snc_internal_role&gt;&lt;short_description&gt;Get all XML records of an UpdateSet&lt;/short_description&gt;&lt;sys_class_name&gt;sys_ws_operation&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-08-08 09:06:13&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;4f6a31a9db33db0076d6b94ffe9619fa&lt;/sys_id&gt;&lt;sys_mod_count&gt;8&lt;/sys_mod_count&gt;&lt;sys_name&gt;CI - Get UpdateSet Files&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ws_operation_4f6a31a9db33db0076d6b94ffe9619fa&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-10-09 14:38:25&lt;/sys_updated_on&gt;&lt;web_service_definition display_value="CICD Integration"&gt;81eccb6fdbebd300dfa9b94ffe96190e&lt;/web_service_definition&gt;&lt;web_service_version display_value="v1"&gt;0a3dcb2fdbebd300dfa9b94ffe9619c7&lt;/web_service_version&gt;&lt;/sys_ws_operation&gt;&lt;/record_update&gt;</payload>
<payload_hash>2116938262</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>ab902d4cdbf77b80ee93b14ffe961955</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ea8a0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CI - Get UpdateSet Files</target_name>
<type>Scripted REST Resource</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_view_14043633db9f3f408fb6f6700f961911</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_action_view"><sys_ui_action_view action="INSERT_OR_UPDATE"><sys_class_name>sys_ui_action_view</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2019-08-23 08:55:02</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>14043633db9f3f408fb6f6700f961911</sys_id><sys_mod_count>1</sys_mod_count><sys_name>Save.CICD Preview</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_ui_action display_value="Save">47fd7f4dc0a8000600a552278b5232ab</sys_ui_action><sys_ui_view display_value="CICD Preview" name="cicd_preview">cdb37233db9f3f408fb6f6700f96191a</sys_ui_view><sys_update_name>sys_ui_action_view_14043633db9f3f408fb6f6700f961911</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2019-08-23 08:55:15</sys_updated_on><visibility>exclude</visibility></sys_ui_action_view></record_update>]]></payload>
<payload_hash>-1703463547</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>ab902d4cdbf77b80ee93b14ffe961956</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061e95d0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>exclude</target_name>
<type>UI View Action</type>
<update_domain/>
<update_guid>93047e33269f3f4020786553c1bf980c</update_guid>
<update_guid_history>93047e33269f3f4020786553c1bf980c:-1703463547,d00436336c9f3f40f9bdf7b17bc67c13:614997203</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_category_m2m_94083fe7db34e380432cfc600f9619be</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties_category_m2m"><sys_properties_category_m2m action="INSERT_OR_UPDATE"><category display_value="CICD Integration">8d1de113dbb86380432cfc600f9619f6</category><order>300</order><property display_value="cicd-integration.server.mid-server-name" name="cicd-integration.server.mid-server-name">cf30d293db3c6380432cfc600f961913</property><sys_class_name>sys_properties_category_m2m</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-10-03 16:25:32</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>94083fe7db34e380432cfc600f9619be</sys_id><sys_mod_count>0</sys_mod_count><sys_name>cicd-integration.server.mid-server-name.CICD Integration</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_category_m2m_94083fe7db34e380432cfc600f9619be</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-10-03 16:25:32</sys_updated_on></sys_properties_category_m2m></record_update>]]></payload>
<payload_hash>1430501724</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>ab902d4cdbf77b80ee93b14ffe961959</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ec890000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.server.mid-server-name.CICD Integration</target_name>
<type>Category Property</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_map_dc5b2e71dbffdb0076d6b94ffe96191d</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter_map"><sys_ws_query_parameter_map action="INSERT_OR_UPDATE"><sys_class_name>sys_ws_query_parameter_map</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-09 07:18:23</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>dc5b2e71dbffdb0076d6b94ffe96191d</sys_id><sys_mod_count>0</sys_mod_count><sys_name>db836e29dbb3db0076d6b94ffe961976</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_map_dc5b2e71dbffdb0076d6b94ffe96191d</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-09 07:18:23</sys_updated_on><web_service_operation display_value="CI - Get UpdateSet Details">dfe5f9e1db33db0076d6b94ffe96198a</web_service_operation><web_service_query_parameter display_value="sysparm_query_category">db836e29dbb3db0076d6b94ffe961976</web_service_query_parameter></sys_ws_query_parameter_map></record_update>]]></payload>
<payload_hash>1839862209</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>af90214cdbf77b80ee93b14ffe9619e7</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ee200000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>db836e29dbb3db0076d6b94ffe961976</target_name>
<type>Scripted REST Query Parameter Associatio</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_cf30d293db3c6380432cfc600f961913</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>&lt;b&gt;MID Server to be used&lt;/b&gt; (requires 'cicd-integration.server.through-mid' to be true)&lt;br&gt;&#13;
If empty, first available MID Server is automatically used.</description><ignore_cache>false</ignore_cache><is_private>false</is_private><name>cicd-integration.server.mid-server-name</name><read_roles/><suffix/><sys_class_name>sys_properties</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-10-02 14:13:40</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>cf30d293db3c6380432cfc600f961913</sys_id><sys_mod_count>5</sys_mod_count><sys_name>cicd-integration.server.mid-server-name</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_cf30d293db3c6380432cfc600f961913</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2019-03-22 21:00:07</sys_updated_on><type>string</type><value/><write_roles/></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=cf30d293db3c6380432cfc600f961913"/></record_update>]]></payload>
<payload_hash>1752582160</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>af902d4cdbf77b80ee93b14ffe961948</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061edb00000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.server.mid-server-name</target_name>
<type>System Property</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_map_1ce3ea69dbb3db0076d6b94ffe961950</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter_map"><sys_ws_query_parameter_map action="INSERT_OR_UPDATE"><sys_class_name>sys_ws_query_parameter_map</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-08 12:07:26</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>1ce3ea69dbb3db0076d6b94ffe961950</sys_id><sys_mod_count>0</sys_mod_count><sys_name>f4636669dbb3db0076d6b94ffe961901</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_map_1ce3ea69dbb3db0076d6b94ffe961950</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-08 12:07:26</sys_updated_on><web_service_operation display_value="CI - Get UpdateSet Files">4f6a31a9db33db0076d6b94ffe9619fa</web_service_operation><web_service_query_parameter display_value="sysparm_query">f4636669dbb3db0076d6b94ffe961901</web_service_query_parameter></sys_ws_query_parameter_map></record_update>]]></payload>
<payload_hash>-1275073881</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>af902d4cdbf77b80ee93b14ffe96194b</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061e9d80000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>f4636669dbb3db0076d6b94ffe961901</target_name>
<type>Scripted REST Query Parameter Associatio</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_view_98ec8378db673f409775f6700f9619ae</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_action_view"><sys_ui_action_view action="INSERT_OR_UPDATE"><sys_class_name>sys_ui_action_view</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2019-08-26 13:17:38</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>98ec8378db673f409775f6700f9619ae</sys_id><sys_mod_count>1</sys_mod_count><sys_name>Insert and Stay.CICD Preview</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_ui_action display_value="Insert and Stay">48032bf8c0a800060050c250f1337e8b</sys_ui_action><sys_ui_view display_value="CICD Preview" name="cicd_preview">cdb37233db9f3f408fb6f6700f96191a</sys_ui_view><sys_update_name>sys_ui_action_view_98ec8378db673f409775f6700f9619ae</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2019-08-26 13:17:46</sys_updated_on><visibility>exclude</visibility></sys_ui_action_view></record_update>]]></payload>
<payload_hash>-1951460639</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>af902d4cdbf77b80ee93b14ffe96194e</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ecbe0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>exclude</target_name>
<type>UI View Action</type>
<update_domain/>
<update_guid>5aecc378b9673f40637bcdaa1d759988</update_guid>
<update_guid_history>5aecc378b9673f40637bcdaa1d759988:-1951460639,98ec8378c3673f40af207a44bce4d2b0:367000111</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_operation_15a0fd61db33db0076d6b94ffe961987</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ws_operation"&gt;&lt;sys_ws_operation action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;consumes&gt;application/json,application/xml,text/xml&lt;/consumes&gt;&lt;consumes_customized&gt;false&lt;/consumes_customized&gt;&lt;default_operation_uri&gt;/api/devops/cicd/user/{userId}&lt;/default_operation_uri&gt;&lt;enforce_acl&gt;1a7833bddbb31f0076d6b94ffe961994&lt;/enforce_acl&gt;&lt;http_method&gt;GET&lt;/http_method&gt;&lt;name&gt;CI - Get User Details&lt;/name&gt;&lt;operation_script&gt;&lt;![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    return new CiCdApi(request, response).getUserById(request.pathParams.userId);

})(request, response);]]&gt;&lt;/operation_script&gt;&lt;operation_uri&gt;/api/devops/v1/cicd/user/{userId}&lt;/operation_uri&gt;&lt;produces&gt;application/json,application/xml,text/xml&lt;/produces&gt;&lt;produces_customized&gt;false&lt;/produces_customized&gt;&lt;relative_path&gt;/user/{userId}&lt;/relative_path&gt;&lt;request_example/&gt;&lt;requires_acl_authorization&gt;true&lt;/requires_acl_authorization&gt;&lt;requires_authentication&gt;true&lt;/requires_authentication&gt;&lt;requires_snc_internal_role&gt;true&lt;/requires_snc_internal_role&gt;&lt;short_description&gt;Get Details of a User&lt;/short_description&gt;&lt;sys_class_name&gt;sys_ws_operation&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-08-08 08:23:30&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;15a0fd61db33db0076d6b94ffe961987&lt;/sys_id&gt;&lt;sys_mod_count&gt;4&lt;/sys_mod_count&gt;&lt;sys_name&gt;CI - Get User Details&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ws_operation_15a0fd61db33db0076d6b94ffe961987&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-08-09 12:58:09&lt;/sys_updated_on&gt;&lt;web_service_definition display_value="CICD Integration"&gt;81eccb6fdbebd300dfa9b94ffe96190e&lt;/web_service_definition&gt;&lt;web_service_version display_value="v1"&gt;0a3dcb2fdbebd300dfa9b94ffe9619c7&lt;/web_service_version&gt;&lt;/sys_ws_operation&gt;&lt;/record_update&gt;</payload>
<payload_hash>489914291</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>af902d4cdbf77b80ee93b14ffe961951</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061e98c0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CI - Get User Details</target_name>
<type>Scripted REST Resource</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_category_m2m_957acbeadb7be7409775f6700f9619ea</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties_category_m2m"><sys_properties_category_m2m action="INSERT_OR_UPDATE"><category display_value="CICD Integration">8d1de113dbb86380432cfc600f9619f6</category><order>10</order><property display_value="cicd-integration.enabled.on-scoped-app" name="cicd-integration.enabled.on-scoped-app">a16a83eadb7be7409775f6700f9619b3</property><sys_class_name>sys_properties_category_m2m</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2019-02-26 13:40:58</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>957acbeadb7be7409775f6700f9619ea</sys_id><sys_mod_count>1</sys_mod_count><sys_name>cicd-integration.enabled.on-scoped-app.CICD Integration</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_category_m2m_957acbeadb7be7409775f6700f9619ea</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2019-02-26 13:43:29</sys_updated_on></sys_properties_category_m2m></record_update>]]></payload>
<payload_hash>1977565445</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>af902d4cdbf77b80ee93b14ffe961954</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ecaa0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.enabled.on-scoped-app.CICD Integration</target_name>
<type>Category Property</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_db836e29dbb3db0076d6b94ffe961976</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter"><sys_ws_query_parameter action="INSERT_OR_UPDATE"><example_value/><name>sysparm_query_category</name><required>false</required><short_description>Name of the query category (read replica category) to use for queries</short_description><sys_class_name>sys_ws_query_parameter</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-08 12:05:55</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>db836e29dbb3db0076d6b94ffe961976</sys_id><sys_mod_count>0</sys_mod_count><sys_name>sysparm_query_category</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_db836e29dbb3db0076d6b94ffe961976</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-08 12:05:55</sys_updated_on><web_service_definition display_value="CICD Integration">81eccb6fdbebd300dfa9b94ffe96190e</web_service_definition></sys_ws_query_parameter></record_update>]]></payload>
<payload_hash>-1060531745</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>af902d4cdbf77b80ee93b14ffe961958</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ee190000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>sysparm_query_category</target_name>
<type>Scripted REST Query Parameter</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_12c846a5db73db0076d6b94ffe961917</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter"><sys_ws_query_parameter action="INSERT_OR_UPDATE"><example_value>100</example_value><name>sysparm_limit</name><required>false</required><short_description>The maximum number of results returned per page (default: 10,000)</short_description><sys_class_name>sys_ws_query_parameter</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-08 10:09:37</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>12c846a5db73db0076d6b94ffe961917</sys_id><sys_mod_count>0</sys_mod_count><sys_name>sysparm_limit</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_12c846a5db73db0076d6b94ffe961917</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-08 10:09:37</sys_updated_on><web_service_definition display_value="CICD Integration">81eccb6fdbebd300dfa9b94ffe96190e</web_service_definition></sys_ws_query_parameter></record_update>]]></payload>
<payload_hash>1213871834</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>e390214cdbf77b80ee93b14ffe9619e6</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061e9480000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>sysparm_limit</target_name>
<type>Scripted REST Query Parameter</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_security_acl_role_ace153e3db2fd300dfa9b94ffe9619df</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_security_acl_role"><sys_security_acl_role action="INSERT_OR_UPDATE"><sys_class_name>sys_security_acl_role</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-02 10:21:02</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>ace153e3db2fd300dfa9b94ffe9619df</sys_id><sys_mod_count>0</sys_mod_count><sys_name>/api/devops/cicd/atf.atf_ws_designer</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_security_acl display_value="/api/devops/cicd/atf">9041d7a3db2fd300dfa9b94ffe961910</sys_security_acl><sys_update_name>sys_security_acl_role_ace153e3db2fd300dfa9b94ffe9619df</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-02 10:21:02</sys_updated_on><sys_user_role display_value="atf_ws_designer" name="atf_ws_designer">0a8d7f9e3b8032000774229c93efc41e</sys_user_role><transaction_id/></sys_security_acl_role></record_update>]]></payload>
<payload_hash>-141258999</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>e390214cdbf77b80ee93b14ffe9619e9</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ed030000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table>/api/devops/cicd/atf</table>
<target_name>/api/devops/cicd/atf.atf_ws_designer</target_name>
<type>Access Roles</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_map_2da36669dbb3db0076d6b94ffe961903</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter_map"><sys_ws_query_parameter_map action="INSERT_OR_UPDATE"><sys_class_name>sys_ws_query_parameter_map</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-08 12:06:28</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>2da36669dbb3db0076d6b94ffe961903</sys_id><sys_mod_count>0</sys_mod_count><sys_name>8d736e29dbb3db0076d6b94ffe961989</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_map_2da36669dbb3db0076d6b94ffe961903</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-08 12:06:28</sys_updated_on><web_service_operation display_value="CI - Get UpdateSet Files">4f6a31a9db33db0076d6b94ffe9619fa</web_service_operation><web_service_query_parameter display_value="sysparm_display_value">8d736e29dbb3db0076d6b94ffe961989</web_service_query_parameter></sys_ws_query_parameter_map></record_update>]]></payload>
<payload_hash>591648571</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>e3902d4cdbf77b80ee93b14ffe96194a</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ea310000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>8d736e29dbb3db0076d6b94ffe961989</target_name>
<type>Scripted REST Query Parameter Associatio</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_view_b0eaa774dbe73f409775f6700f96195f</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_action_view"><sys_ui_action_view action="INSERT_OR_UPDATE"><sys_class_name>sys_ui_action_view</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2019-08-26 15:28:45</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>b0eaa774dbe73f409775f6700f96195f</sys_id><sys_mod_count>1</sys_mod_count><sys_name>Delete.CICD Preview</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_ui_action display_value="Delete">57dc4c970a0a0b3400f8f0538d3faf94</sys_ui_action><sys_ui_view display_value="CICD Preview" name="cicd_preview">cdb37233db9f3f408fb6f6700f96191a</sys_ui_view><sys_update_name>sys_ui_action_view_b0eaa774dbe73f409775f6700f96195f</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2019-08-26 15:28:59</sys_updated_on><visibility>exclude</visibility></sys_ui_action_view></record_update>]]></payload>
<payload_hash>-1453656560</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>e3902d4cdbf77b80ee93b14ffe96194d</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ed0d0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>exclude</target_name>
<type>UI View Action</type>
<update_domain/>
<update_guid>94faafb062e73f4038dece253834cb6d</update_guid>
<update_guid_history>94faafb062e73f4038dece253834cb6d:-1453656560,fceaa77472e73f40e3477b4a41baf260:864804190</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_a7df4293db3c6380432cfc600f961974</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>&lt;b&gt;Connect to CICD Server via MID Server&lt;/b&gt;</description><ignore_cache>false</ignore_cache><is_private>false</is_private><name>cicd-integration.server.through-mid</name><read_roles/><suffix/><sys_class_name>sys_properties</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-10-02 14:12:04</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>a7df4293db3c6380432cfc600f961974</sys_id><sys_mod_count>5</sys_mod_count><sys_name>cicd-integration.server.through-mid</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_a7df4293db3c6380432cfc600f961974</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-12-14 15:19:29</sys_updated_on><type>boolean</type><value>true</value><write_roles/></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=a7df4293db3c6380432cfc600f961974"/></record_update>]]></payload>
<payload_hash>1687938585</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>e3902d4cdbf77b80ee93b14ffe961950</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ecf20000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.server.through-mid</target_name>
<type>System Property</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_processor_b88ab453db6d2b00323efc600f9619fe</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_processor"&gt;&lt;sys_processor action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;class_name/&gt;&lt;description/&gt;&lt;interactive&gt;false&lt;/interactive&gt;&lt;name&gt;CiCdExportUpdateSet&lt;/name&gt;&lt;parameters/&gt;&lt;params_endpoint/&gt;&lt;path&gt;cicd_export_update_set&lt;/path&gt;&lt;path_endpoint/&gt;&lt;require_csrf&gt;false&lt;/require_csrf&gt;&lt;roles/&gt;&lt;script&gt;&lt;![CDATA[(function process(g_request, g_response, g_processor) {

    var CustomExporter = Class.create();
    CustomExporter.prototype = Object.extendsObject(ExportWithRelatedLists, {
        exportRecord: function (record) {
            record = new GlideScriptRecordUtil.get(record).getRealRecord();
            var recordSerializer = new GlideRecordXMLSerializer();
            //recordSerializer.setApplySecurity(true);
            recordSerializer.serialize(record, this.hd, new Packages.java.lang.String('INSERT_OR_UPDATE'));
            if (this.includeAttachments &amp;&amp; record.getTableName().substring(0, 14) != "sys_attachment") {
                this.exportAttachments(record);
            }
        }
    });

    var sysid = g_request.getParameter('sysparm_sys_id');
    var exporter = new CustomExporter('sys_remote_update_set', sysid);
    exporter.addRelatedList('sys_update_xml', 'remote_update_set');
    exporter.exportRecords(g_response);

    var del = g_request.getParameter('sysparm_delete_when_done');
    if (del == "true") {
        var ugr = new GlideRecord("sys_remote_update_set");
        ugr.addQuery("sys_id", sysid);
        ugr.query();
        if (ugr.next()) {
            ugr.deleteRecord();
        }
    }

})(g_request, g_response, g_processor);]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_processor&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-11-08 14:54:55&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;b88ab453db6d2b00323efc600f9619fe&lt;/sys_id&gt;&lt;sys_mod_count&gt;7&lt;/sys_mod_count&gt;&lt;sys_name&gt;CiCdExportUpdateSet&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_processor_b88ab453db6d2b00323efc600f9619fe&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-11-08 15:22:23&lt;/sys_updated_on&gt;&lt;type&gt;script&lt;/type&gt;&lt;/sys_processor&gt;&lt;/record_update&gt;</payload>
<payload_hash>50614892</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>e3902d4cdbf77b80ee93b14ffe961953</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ed290000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CiCdExportUpdateSet</target_name>
<type>Processor</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_map_342daeb1dbffdb0076d6b94ffe9619d0</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter_map"><sys_ws_query_parameter_map action="INSERT_OR_UPDATE"><sys_class_name>sys_ws_query_parameter_map</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-09 07:26:21</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>342daeb1dbffdb0076d6b94ffe9619d0</sys_id><sys_mod_count>0</sys_mod_count><sys_name>db836e29dbb3db0076d6b94ffe961976</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_map_342daeb1dbffdb0076d6b94ffe9619d0</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-09 07:26:21</sys_updated_on><web_service_operation display_value="CI - Get Files from Table">f3cca2b1dbffdb0076d6b94ffe96191e</web_service_operation><web_service_query_parameter display_value="sysparm_query_category">db836e29dbb3db0076d6b94ffe961976</web_service_query_parameter></sys_ws_query_parameter_map></record_update>]]></payload>
<payload_hash>-1287989520</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>e3902d4cdbf77b80ee93b14ffe961957</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ea390000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>db836e29dbb3db0076d6b94ffe961976</target_name>
<type>Scripted REST Query Parameter Associatio</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_user_role_dd194b2bdbebd300dfa9b94ffe96194f</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_user_role"><sys_user_role action="INSERT_OR_UPDATE"><assignable_by/><description/><elevated_privilege>false</elevated_privilege><encryption_context/><grantable>true</grantable><includes_roles/><name>cicd_integration_user</name><requires_subscription>-1</requires_subscription><scoped_admin>false</scoped_admin><suffix/><sys_class_name>sys_user_role</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-02 09:42:02</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>dd194b2bdbebd300dfa9b94ffe96194f</sys_id><sys_mod_count>0</sys_mod_count><sys_name>cicd_integration_user</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_user_role_dd194b2bdbebd300dfa9b94ffe96194f</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-02 09:42:02</sys_updated_on></sys_user_role></record_update>]]></payload>
<payload_hash>-462555258</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>e3902d4cdbf77b80ee93b14ffe96195a</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ee2c0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd_integration_user</target_name>
<type>Role</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_operation_18361231db2bb7808fb6f6700f9619ec</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ws_operation"&gt;&lt;sys_ws_operation action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;consumes&gt;application/json,application/xml,text/xml&lt;/consumes&gt;&lt;consumes_customized&gt;false&lt;/consumes_customized&gt;&lt;default_operation_uri&gt;/api/devops/cicd/deploy_step&lt;/default_operation_uri&gt;&lt;enforce_acl&gt;2ae86fe7db6fd300dfa9b94ffe9619bc&lt;/enforce_acl&gt;&lt;http_method&gt;POST&lt;/http_method&gt;&lt;name&gt;CD - Deploy Process Steps (POST)&lt;/name&gt;&lt;operation_script&gt;&lt;![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    return new CiCdDeploy(request, response).processUpdateSetDeploySteps();

})(request, response);]]&gt;&lt;/operation_script&gt;&lt;operation_uri&gt;/api/devops/v1/cicd/deploy_step&lt;/operation_uri&gt;&lt;produces&gt;application/json,application/xml,text/xml&lt;/produces&gt;&lt;produces_customized&gt;false&lt;/produces_customized&gt;&lt;relative_path&gt;/deploy_step&lt;/relative_path&gt;&lt;request_example/&gt;&lt;requires_acl_authorization&gt;true&lt;/requires_acl_authorization&gt;&lt;requires_authentication&gt;true&lt;/requires_authentication&gt;&lt;requires_snc_internal_role&gt;true&lt;/requires_snc_internal_role&gt;&lt;short_description/&gt;&lt;sys_class_name&gt;sys_ws_operation&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-08-29 11:52:38&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;18361231db2bb7808fb6f6700f9619ec&lt;/sys_id&gt;&lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;&lt;sys_name&gt;CD - Deploy Process Steps (POST)&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ws_operation_18361231db2bb7808fb6f6700f9619ec&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-08-29 11:57:02&lt;/sys_updated_on&gt;&lt;web_service_definition display_value="CICD Integration"&gt;81eccb6fdbebd300dfa9b94ffe96190e&lt;/web_service_definition&gt;&lt;web_service_version display_value="v1"&gt;0a3dcb2fdbebd300dfa9b94ffe9619c7&lt;/web_service_version&gt;&lt;/sys_ws_operation&gt;&lt;/record_update&gt;</payload>
<payload_hash>584540378</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>e790214cdbf77b80ee93b14ffe9619e5</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061e9c30000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CD - Deploy Process Steps (POST)</target_name>
<type>Scripted REST Resource</type>
<update_domain/>
<update_guid>8b369a71552bb780046f4ed26aa23030</update_guid>
<update_guid_history>8b369a71552bb780046f4ed26aa23030:584540378,10361231942bb78045289effc84bd5ee:-412504630</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_category_m2m_8519da7adbdaa7c076d6b94ffe961941</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties_category_m2m"><sys_properties_category_m2m action="INSERT_OR_UPDATE"><category display_value="CICD Integration">8d1de113dbb86380432cfc600f9619f6</category><order>530</order><property display_value="cicd-integration.pull-request-proxy.secret" name="cicd-integration.pull-request-proxy.secret">11095a7adbdaa7c076d6b94ffe96190c</property><sys_class_name>sys_properties_category_m2m</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-12-14 15:09:31</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>8519da7adbdaa7c076d6b94ffe961941</sys_id><sys_mod_count>1</sys_mod_count><sys_name>cicd-integration.server.pullrequest.secret.CICD Integration</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_category_m2m_8519da7adbdaa7c076d6b94ffe961941</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-12-14 15:10:10</sys_updated_on></sys_properties_category_m2m></record_update>]]></payload>
<payload_hash>-144888834</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>e790214cdbf77b80ee93b14ffe9619e8</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ec360000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.server.pullrequest.secret.CICD Integration</target_name>
<type>Category Property</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_view_ce54b273db9f3f408fb6f6700f96190d</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_action_view"><sys_ui_action_view action="INSERT_OR_UPDATE"><sys_class_name>sys_ui_action_view</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2019-08-23 08:56:32</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>ce54b273db9f3f408fb6f6700f96190d</sys_id><sys_mod_count>0</sys_mod_count><sys_name>Save &amp; close.CICD Preview</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_ui_action display_value="Save &amp; close">42df02e20a0a0b340080e61b551f2909</sys_ui_action><sys_ui_view display_value="CICD Preview" name="cicd_preview">cdb37233db9f3f408fb6f6700f96191a</sys_ui_view><sys_update_name>sys_ui_action_view_ce54b273db9f3f408fb6f6700f96190d</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2019-08-23 08:56:32</sys_updated_on><visibility>exclude</visibility></sys_ui_action_view></record_update>]]></payload>
<payload_hash>-893895863</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>e7902d4cdbf77b80ee93b14ffe961949</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061eda70000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>exclude</target_name>
<type>UI View Action</type>
<update_domain/>
<update_guid>0654b273609f3f400f7569e3020d7b0f</update_guid>
<update_guid_history>0654b273609f3f400f7569e3020d7b0f:-893895863</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_map_5dcde335dbb31f0076d6b94ffe96198a</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter_map"><sys_ws_query_parameter_map action="INSERT_OR_UPDATE"><sys_class_name>sys_ws_query_parameter_map</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-09 12:08:44</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>5dcde335dbb31f0076d6b94ffe96198a</sys_id><sys_mod_count>0</sys_mod_count><sys_name>8d336669dbb3db0076d6b94ffe96193e</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_map_5dcde335dbb31f0076d6b94ffe96198a</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-09 12:08:44</sys_updated_on><web_service_operation display_value="CI - Set UpdateSet Status">0dc4a3f9db731f0076d6b94ffe961989</web_service_operation><web_service_query_parameter display_value="sysparm_fields">8d336669dbb3db0076d6b94ffe96193e</web_service_query_parameter></sys_ws_query_parameter_map></record_update>]]></payload>
<payload_hash>522230659</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>e7902d4cdbf77b80ee93b14ffe96194c</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061eadd0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>8d336669dbb3db0076d6b94ffe96193e</target_name>
<type>Scripted REST Query Parameter Associatio</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_d9ecc622dbe1a700323efc600f961901</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>&lt;b&gt;CICD Integration enabled.&lt;/b&gt;&lt;br&gt;&#13;
&lt;small&gt;CICD process master switch.&lt;/small&gt;</description><ignore_cache>false</ignore_cache><is_private>false</is_private><name>cicd-integration.enabled</name><read_roles/><suffix/><sys_class_name>sys_properties</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-11-06 12:50:43</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>d9ecc622dbe1a700323efc600f961901</sys_id><sys_mod_count>7</sys_mod_count><sys_name>cicd-integration.enabled</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_d9ecc622dbe1a700323efc600f961901</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2019-02-26 13:42:52</sys_updated_on><type>boolean</type><value>false</value><write_roles/></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=d9ecc622dbe1a700323efc600f961901"/></record_update>]]></payload>
<payload_hash>400204041</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>e7902d4cdbf77b80ee93b14ffe96194f</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061edf40000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.enabled</target_name>
<type>System Property</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_8d736e29dbb3db0076d6b94ffe961989</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter"><sys_ws_query_parameter action="INSERT_OR_UPDATE"><example_value>all</example_value><name>sysparm_display_value</name><required>false</required><short_description>Return field display values (true), actual values (false), or both (all) [false]</short_description><sys_class_name>sys_ws_query_parameter</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-08 12:05:29</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>8d736e29dbb3db0076d6b94ffe961989</sys_id><sys_mod_count>1</sys_mod_count><sys_name>sysparm_display_value</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_8d736e29dbb3db0076d6b94ffe961989</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-09 07:13:44</sys_updated_on><web_service_definition display_value="CICD Integration">81eccb6fdbebd300dfa9b94ffe96190e</web_service_definition></sys_ws_query_parameter></record_update>]]></payload>
<payload_hash>-1746206567</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>e7902d4cdbf77b80ee93b14ffe961952</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ec670000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>sysparm_display_value</target_name>
<type>Scripted REST Query Parameter</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_web_service_12b38c73db8367409775f6700f961914</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_web_service"&gt;&lt;sys_web_service action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;function_name&gt;*&lt;/function_name&gt;&lt;name&gt;api/devops/cicd/source/sys_update_set&lt;/name&gt;&lt;scoped_name&gt;api/devops/cicd/source/sys_update_set&lt;/scoped_name&gt;&lt;script&gt;&lt;![CDATA[(function scriptedWebServiceOperation(request, response) {
	
	return new CiCdSource().updateSetSoapWebService(this.soapRequestXML, response);

})(request, response);]]&gt;&lt;/script&gt;&lt;short_description&gt;getKeys, getRecords&lt;/short_description&gt;&lt;sys_class_name&gt;sys_web_service&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-01-23 13:38:48&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;12b38c73db8367409775f6700f961914&lt;/sys_id&gt;&lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;&lt;sys_name&gt;api/devops/cicd/source/sys_update_set&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_web_service_12b38c73db8367409775f6700f961914&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-01-30 17:00:52&lt;/sys_updated_on&gt;&lt;wsdl&gt;https://company1.service-now.com/api/devops/cicd/source/sys_update_set.do?WSDL&lt;/wsdl&gt;&lt;wsdl_compliance&gt;false&lt;/wsdl_compliance&gt;&lt;/sys_web_service&gt;&lt;/record_update&gt;</payload>
<payload_hash>1887726945</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>e7902d4cdbf77b80ee93b14ffe961955</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061e93e0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>api/devops/cicd/source/sys_update_set</target_name>
<type>Scripted Web Service</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_47f0bce9dba3ff409775f6700f9619bf</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>&lt;b&gt;Show link to build state in update set form.&lt;/b&gt;</description><ignore_cache>false</ignore_cache><is_private>false</is_private><name>cicd-integration.message.build-state</name><read_roles/><suffix/><sys_class_name>sys_properties</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2019-08-28 09:51:58</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>47f0bce9dba3ff409775f6700f9619bf</sys_id><sys_mod_count>4</sys_mod_count><sys_name>cicd-integration.message.build-state</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_47f0bce9dba3ff409775f6700f9619bf</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2019-08-28 12:19:28</sys_updated_on><type>boolean</type><value>false</value><write_roles/></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=47f0bce9dba3ff409775f6700f9619bf"/></record_update>]]></payload>
<payload_hash>-830444110</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>e7902d4cdbf77b80ee93b14ffe961956</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ea5e0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.message.build-state</target_name>
<type>System Property</type>
<update_domain/>
<update_guid>b7b21ded2327ff40e6610bf6efa52873</update_guid>
<update_guid_history>b7b21ded2327ff40e6610bf6efa52873:-830444110,47a215addd27ff401fc06b4030898844:1743757725,51c5706161e3ff40de27426585294bc6:-830444110,9531f82d78a3ff4029793cac4be2e00d:1743757725,7bf0f42d2fa3ff40727c983c28546605:-396247651</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_8fcb4a3d37035a0044d3f25b34990eed</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_ui_action"&gt;&lt;sys_ui_action action="INSERT_OR_UPDATE"&gt;&lt;action_name&gt;snd_add_jsdoc&lt;/action_name&gt;&lt;active&gt;true&lt;/active&gt;&lt;client&gt;true&lt;/client&gt;&lt;client_script_v2/&gt;&lt;comments&gt;Automatically add comments to code&lt;/comments&gt;&lt;condition&gt;new global.CiCdJsDoc().showButton(current);&lt;/condition&gt;&lt;form_action&gt;true&lt;/form_action&gt;&lt;form_button&gt;true&lt;/form_button&gt;&lt;form_button_v2&gt;false&lt;/form_button_v2&gt;&lt;form_context_menu&gt;false&lt;/form_context_menu&gt;&lt;form_link&gt;false&lt;/form_link&gt;&lt;form_menu_button_v2&gt;false&lt;/form_menu_button_v2&gt;&lt;form_style/&gt;&lt;hint&gt;Add JSDoc-Tags to Code&lt;/hint&gt;&lt;isolate_script&gt;false&lt;/isolate_script&gt;&lt;list_action&gt;false&lt;/list_action&gt;&lt;list_banner_button&gt;false&lt;/list_banner_button&gt;&lt;list_button&gt;false&lt;/list_button&gt;&lt;list_choice&gt;false&lt;/list_choice&gt;&lt;list_context_menu&gt;false&lt;/list_context_menu&gt;&lt;list_link&gt;false&lt;/list_link&gt;&lt;list_save_with_form_button&gt;false&lt;/list_save_with_form_button&gt;&lt;list_style/&gt;&lt;name&gt;[ ]&lt;/name&gt;&lt;onclick&gt;commentCode()&lt;/onclick&gt;&lt;order&gt;666&lt;/order&gt;&lt;script&gt;&lt;![CDATA[if (window) {
	/*
		change the value of all jsDoc buttons on the page and hide them.
	*/
    $j('[data-action-name="snd_add_jsdoc"]').each(function () {
        $j(this).html('&lt;span class="field_decoration icon-template"&gt;&lt;/span&gt;').hide();
    });

	/*
		add event to wait for the page to be loaded and then check
		if there are any script fields in the page - if so, show the jsDoc buttons.
	*/
    window.addAfterPageLoadedEvent(function () {

        var hasCode = g_form.elements.some(function (field) {
            var value = g_form.getValue(field.fieldName);
            return (value.indexOf('function') !== -1 || value.indexOf('Class') !== -1);
        });
        if (hasCode) {
            $j('[data-action-name="snd_add_jsdoc"]').each(function () {
                $j(this).show();
            });
        }
    });
} 
/**
 * Main function to be called by clicking on the UI button.
 * 
 * @author Boris Moers [b.moers]
 * @requires global.module:sys_script_include.SnSmartComments
 * @memberof global.module:sys_ui_action
 * @returns {undefined}
 */
function commentCode() {

	/**
     * Walk through all form fields and add comments, to be called
     * as callback below.
     * 
     * @param {any} userName
     * @param {any} scope
     * @param {any} objectType
     * @returns {undefined}
     */
    var applyComments = function (userName, scope, objectType) {
        var smart = new SnSmartComments(userName, scope, objectType);
        g_form.elements.forEach(function (field) {
            var fieldName = field.fieldName,
                value = g_form.getValue(fieldName);
            if (!g_form.isDisabled(fieldName) &amp;&amp; value &amp;&amp; (value.indexOf('function') !== -1 || value.indexOf('Class') !== -1)) {
                console.log("SnSmartComments: commented field '%s'", fieldName);
                g_form.setValue(fieldName, smart.comment(value));
            }
        });
    };

    var objectType = g_form.getTableName(),
        userName = g_user.getFullName().concat(' [').concat(g_user.getUserName()).concat(']'),
        scope = g_scratchpad.scope || 'global';
    
    applyComments(userName, scope, objectType);
}]]&gt;&lt;/script&gt;&lt;show_insert&gt;true&lt;/show_insert&gt;&lt;show_multiple_update&gt;false&lt;/show_multiple_update&gt;&lt;show_query&gt;false&lt;/show_query&gt;&lt;show_update&gt;true&lt;/show_update&gt;&lt;sys_class_name&gt;sys_ui_action&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2016-04-28 13:28:55&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;true&lt;/sys_customer_update&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_id&gt;8fcb4a3d37035a0044d3f25b34990eed&lt;/sys_id&gt;&lt;sys_mod_count&gt;65&lt;/sys_mod_count&gt;&lt;sys_name&gt;[ ]&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_action_8fcb4a3d37035a0044d3f25b34990eed&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-02-28 14:21:30&lt;/sys_updated_on&gt;&lt;table&gt;sys_metadata&lt;/table&gt;&lt;ui11_compatible&gt;false&lt;/ui11_compatible&gt;&lt;ui16_compatible&gt;false&lt;/ui16_compatible&gt;&lt;/sys_ui_action&gt;&lt;/record_update&gt;</payload>
<payload_hash>-228374202</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>e7902d4cdbf77b80ee93b14ffe961959</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ec720000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table>sys_metadata</table>
<target_name>[ ]</target_name>
<type>UI Action</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_d46f0e97dbf86380432cfc600f961954</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>&lt;hr&gt;&lt;b&gt;The CICD Server Host Name&lt;/b&gt;&lt;br&gt;&#13;
&lt;small&gt;e.g. https://sncicd.company.com&lt;/small&gt;</description><ignore_cache>false</ignore_cache><is_private>false</is_private><name>cicd-integration.server.url</name><read_roles/><suffix/><sys_class_name>sys_properties</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-10-02 14:09:55</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>d46f0e97dbf86380432cfc600f961954</sys_id><sys_mod_count>16</sys_mod_count><sys_name>cicd-integration.server.url</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_d46f0e97dbf86380432cfc600f961954</sys_update_name><sys_updated_by>VA-CICD-01</sys_updated_by><sys_updated_on>2019-04-10 12:21:59</sys_updated_on><type>string</type><value>https://localhost:8443</value><write_roles/></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=d46f0e97dbf86380432cfc600f961954"/></record_update>]]></payload>
<payload_hash>1471633938</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>eb90214cdbf77b80ee93b14ffe9619e7</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061edd00000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.server.url</target_name>
<type>System Property</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_category_m2m_ac7f0293db3c6380432cfc600f961948</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties_category_m2m"><sys_properties_category_m2m action="INSERT_OR_UPDATE"><category display_value="CICD Integration">8d1de113dbb86380432cfc600f9619f6</category><order>100</order><property display_value="cicd-integration.server.url" name="cicd-integration.server.url">d46f0e97dbf86380432cfc600f961954</property><sys_class_name>sys_properties_category_m2m</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-10-02 14:10:13</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>ac7f0293db3c6380432cfc600f961948</sys_id><sys_mod_count>2</sys_mod_count><sys_name>cicd-integration.server.uri.CICD Integration</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_category_m2m_ac7f0293db3c6380432cfc600f961948</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-10-03 16:25:31</sys_updated_on></sys_properties_category_m2m></record_update>]]></payload>
<payload_hash>-1610937612</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>eb902d4cdbf77b80ee93b14ffe961948</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ecfa0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>cicd-integration.server.uri.CICD Integration</target_name>
<type>Category Property</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_map_17b2e35adb1667c076d6b94ffe96194c</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter_map"><sys_ws_query_parameter_map action="INSERT_OR_UPDATE"><sys_class_name>sys_ws_query_parameter_map</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-12-13 07:14:23</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>17b2e35adb1667c076d6b94ffe96194c</sys_id><sys_mod_count>0</sys_mod_count><sys_name>db836e29dbb3db0076d6b94ffe961976</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_map_17b2e35adb1667c076d6b94ffe96194c</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-12-13 07:14:23</sys_updated_on><web_service_operation display_value="CI - Get Scope Details">2082ef56db1667c076d6b94ffe961972</web_service_operation><web_service_query_parameter display_value="sysparm_query_category">db836e29dbb3db0076d6b94ffe961976</web_service_query_parameter></sys_ws_query_parameter_map></record_update>]]></payload>
<payload_hash>38876662</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>eb902d4cdbf77b80ee93b14ffe96194b</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061e9b80000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>db836e29dbb3db0076d6b94ffe961976</target_name>
<type>Scripted REST Query Parameter Associatio</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_definition_81eccb6fdbebd300dfa9b94ffe96190e</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_definition"><sys_ws_definition action="INSERT_OR_UPDATE"><active>true</active><base_uri>/api/devops/cicd</base_uri><consumes>application/json,application/xml,text/xml</consumes><consumes_customized>false</consumes_customized><default_version>v1</default_version><doc_link/><enforce_acl/><is_versioned>true</is_versioned><name>CICD Integration</name><namespace>devops</namespace><produces>application/json,application/xml,text/xml</produces><produces_customized>false</produces_customized><service_id>cicd</service_id><short_description/><sys_class_name>sys_ws_definition</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-02 09:59:28</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>81eccb6fdbebd300dfa9b94ffe96190e</sys_id><sys_mod_count>1</sys_mod_count><sys_name>CICD Integration</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_definition_81eccb6fdbebd300dfa9b94ffe96190e</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-02 10:00:07</sys_updated_on></sys_ws_definition></record_update>]]></payload>
<payload_hash>-744445395</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>eb902d4cdbf77b80ee93b14ffe96194e</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ec2f0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CICD Integration</target_name>
<type>Scripted REST API</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_operation_0dc4a3f9db731f0076d6b94ffe961989</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ws_operation"&gt;&lt;sys_ws_operation action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;consumes&gt;application/json,application/xml,text/xml&lt;/consumes&gt;&lt;consumes_customized&gt;false&lt;/consumes_customized&gt;&lt;default_operation_uri&gt;/api/devops/cicd/updateset_status/{updateSetSysId}&lt;/default_operation_uri&gt;&lt;enforce_acl&gt;1a7833bddbb31f0076d6b94ffe961994&lt;/enforce_acl&gt;&lt;http_method&gt;PATCH&lt;/http_method&gt;&lt;name&gt;CI - Set UpdateSet Status&lt;/name&gt;&lt;operation_script&gt;&lt;![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
	
	return new CiCdApi(request, response).setUpdateSetStatus(request.pathParams.updateSetSysId);

})(request, response);]]&gt;&lt;/operation_script&gt;&lt;operation_uri&gt;/api/devops/v1/cicd/updateset_status/{updateSetSysId}&lt;/operation_uri&gt;&lt;produces&gt;application/json&lt;/produces&gt;&lt;produces_customized&gt;true&lt;/produces_customized&gt;&lt;relative_path&gt;/updateset_status/{updateSetSysId}&lt;/relative_path&gt;&lt;request_example&gt;{&amp;#13;
    "state": "state"&amp;#13;
}&lt;/request_example&gt;&lt;requires_acl_authorization&gt;true&lt;/requires_acl_authorization&gt;&lt;requires_authentication&gt;true&lt;/requires_authentication&gt;&lt;requires_snc_internal_role&gt;true&lt;/requires_snc_internal_role&gt;&lt;short_description&gt;Update the status of an UpdateSet&lt;/short_description&gt;&lt;sys_class_name&gt;sys_ws_operation&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-08-09 11:29:19&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;0dc4a3f9db731f0076d6b94ffe961989&lt;/sys_id&gt;&lt;sys_mod_count&gt;7&lt;/sys_mod_count&gt;&lt;sys_name&gt;CI - Set UpdateSet Status&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ws_operation_0dc4a3f9db731f0076d6b94ffe961989&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-10-09 14:34:56&lt;/sys_updated_on&gt;&lt;web_service_definition display_value="CICD Integration"&gt;81eccb6fdbebd300dfa9b94ffe96190e&lt;/web_service_definition&gt;&lt;web_service_version display_value="v1"&gt;0a3dcb2fdbebd300dfa9b94ffe9619c7&lt;/web_service_version&gt;&lt;/sys_ws_operation&gt;&lt;/record_update&gt;</payload>
<payload_hash>335149438</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>eb902d4cdbf77b80ee93b14ffe961951</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061e9010000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CI - Set UpdateSet Status</target_name>
<type>Scripted REST Resource</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_operation_6bed8babdbebd300dfa9b94ffe9619c6</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ws_operation"&gt;&lt;sys_ws_operation action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;consumes&gt;application/json,application/xml,text/xml&lt;/consumes&gt;&lt;consumes_customized&gt;false&lt;/consumes_customized&gt;&lt;default_operation_uri&gt;/api/devops/cicd/atf/test&lt;/default_operation_uri&gt;&lt;enforce_acl&gt;9041d7a3db2fd300dfa9b94ffe961910&lt;/enforce_acl&gt;&lt;http_method&gt;POST&lt;/http_method&gt;&lt;name&gt;ATF - Run Test&lt;/name&gt;&lt;operation_script&gt;&lt;![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    return new CiCdAtf(request, response).executeTest();

})(request, response);]]&gt;&lt;/operation_script&gt;&lt;operation_uri&gt;/api/devops/v1/cicd/atf/test&lt;/operation_uri&gt;&lt;produces&gt;application/json,application/xml,text/xml&lt;/produces&gt;&lt;produces_customized&gt;false&lt;/produces_customized&gt;&lt;relative_path&gt;/atf/test&lt;/relative_path&gt;&lt;request_example/&gt;&lt;requires_acl_authorization&gt;true&lt;/requires_acl_authorization&gt;&lt;requires_authentication&gt;true&lt;/requires_authentication&gt;&lt;requires_snc_internal_role&gt;true&lt;/requires_snc_internal_role&gt;&lt;short_description&gt;Execute an ATF test from remote&lt;/short_description&gt;&lt;sys_class_name&gt;sys_ws_operation&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-08-02 10:04:07&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;6bed8babdbebd300dfa9b94ffe9619c6&lt;/sys_id&gt;&lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;&lt;sys_name&gt;ATF - Run Test&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ws_operation_6bed8babdbebd300dfa9b94ffe9619c6&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-08-02 11:07:46&lt;/sys_updated_on&gt;&lt;web_service_definition display_value="CICD Integration"&gt;81eccb6fdbebd300dfa9b94ffe96190e&lt;/web_service_definition&gt;&lt;web_service_version display_value="v1"&gt;0a3dcb2fdbebd300dfa9b94ffe9619c7&lt;/web_service_version&gt;&lt;/sys_ws_operation&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1287357852</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>eb902d4cdbf77b80ee93b14ffe961954</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061eb950000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>ATF - Run Test</target_name>
<type>Scripted REST Resource</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ui_action_view_b30d0b78db673f409775f6700f96192d</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_action_view"><sys_ui_action_view action="INSERT_OR_UPDATE"><sys_class_name>sys_ui_action_view</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2019-08-26 13:18:25</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>b30d0b78db673f409775f6700f96192d</sys_id><sys_mod_count>1</sys_mod_count><sys_name>Insert.CICD Preview</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_ui_action display_value="Insert">48029ef7c0a8000600e7770b24e5d36f</sys_ui_action><sys_ui_view display_value="CICD Preview" name="cicd_preview">cdb37233db9f3f408fb6f6700f96191a</sys_ui_view><sys_update_name>sys_ui_action_view_b30d0b78db673f409775f6700f96192d</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2019-08-26 13:18:33</sys_updated_on><visibility>exclude</visibility></sys_ui_action_view></record_update>]]></payload>
<payload_hash>920278250</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>eb902d4cdbf77b80ee93b14ffe961958</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ed1d0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>exclude</target_name>
<type>UI View Action</type>
<update_domain/>
<update_guid>651d0b78f9673f4072a2013a49f6067f</update_guid>
<update_guid_history>651d0b78f9673f4072a2013a49f6067f:920278250,fb0d0b78fa673f404b7f7f7e5da2e32e:-1056228296</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_app_application_91194b2bdbebd300dfa9b94ffe96194d</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_app_application"><sys_app_application action="INSERT_OR_UPDATE"><active>true</active><category display_value="Administration">647e6524c0a80a080010856a87e15ce2</category><description/><device_type>browser</device_type><hint/><name>CICD Integration</name><order/><roles>admin,cicd_integration_user</roles><sys_class_name>sys_app_application</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-02 09:42:02</sys_created_on><sys_customer_update>false</sys_customer_update><sys_domain>global</sys_domain><sys_id>91194b2bdbebd300dfa9b94ffe96194d</sys_id><sys_mod_count>4</sys_mod_count><sys_name>CICD Integration</sys_name><sys_overrides/><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_app_application_91194b2bdbebd300dfa9b94ffe96194d</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-11-08 05:49:17</sys_updated_on><title>CICD Integration</title><view_name/></sys_app_application></record_update>]]></payload>
<payload_hash>-2084281760</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>ef90214cdbf77b80ee93b14ffe9619e6</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ec820000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CICD Integration</target_name>
<type>Application Menu</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ui_form_sections_dd8920b6131d93802df7b9b76144b038</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update><sys_ui_form_sections form_id="dd8920b6131d93802df7b9b76144b038" sys_domain="global" table="atf_input_variable" version="3"><sys_ui_form_section action="INSERT_OR_UPDATE"><position>0</position><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-11-23 15:51:34</sys_created_on><sys_domain>global</sys_domain><sys_id>d4595e8cdb4a6f4076d6b94ffe96199f</sys_id><sys_mod_count>0</sys_mod_count><sys_overrides/><sys_ui_form display_value="atf_input_variable" name="atf_input_variable" sys_domain="global" view="eff0c3980a0a3c19007418a5890fdda5">dd8920b6131d93802df7b9b76144b038</sys_ui_form><sys_ui_section display_value="">dc595e8cdb4a6f4076d6b94ffe96199a</sys_ui_section><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-11-23 15:51:34</sys_updated_on></sys_ui_form_section><sys_ui_form_section action="INSERT_OR_UPDATE"><position>1</position><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-11-23 15:51:34</sys_created_on><sys_domain>global</sys_domain><sys_id>1c595e8cdb4a6f4076d6b94ffe9619a3</sys_id><sys_mod_count>0</sys_mod_count><sys_overrides/><sys_ui_form display_value="atf_input_variable" name="atf_input_variable" sys_domain="global" view="eff0c3980a0a3c19007418a5890fdda5">dd8920b6131d93802df7b9b76144b038</sys_ui_form><sys_ui_section display_value="">d8595e8cdb4a6f4076d6b94ffe96199f</sys_ui_section><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-11-23 15:51:34</sys_updated_on></sys_ui_form_section><sys_ui_form_section action="INSERT_OR_UPDATE"><position>2</position><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-11-23 15:51:34</sys_created_on><sys_domain>global</sys_domain><sys_id>58595e8cdb4a6f4076d6b94ffe961994</sys_id><sys_mod_count>0</sys_mod_count><sys_overrides/><sys_ui_form display_value="atf_input_variable" name="atf_input_variable" sys_domain="global" view="eff0c3980a0a3c19007418a5890fdda5">dd8920b6131d93802df7b9b76144b038</sys_ui_form><sys_ui_section display_value="">88591e4cdb4a6f4076d6b94ffe961976</sys_ui_section><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-11-23 15:51:34</sys_updated_on></sys_ui_form_section><sys_ui_form_section action="INSERT_OR_UPDATE"><position>3</position><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-11-23 15:51:34</sys_created_on><sys_domain>global</sys_domain><sys_id>9c595e8cdb4a6f4076d6b94ffe961997</sys_id><sys_mod_count>0</sys_mod_count><sys_overrides/><sys_ui_form display_value="atf_input_variable" name="atf_input_variable" sys_domain="global" view="eff0c3980a0a3c19007418a5890fdda5">dd8920b6131d93802df7b9b76144b038</sys_ui_form><sys_ui_section display_value="">d0595e8cdb4a6f4076d6b94ffe961995</sys_ui_section><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-11-23 15:51:34</sys_updated_on></sys_ui_form_section><sys_ui_form_section action="INSERT_OR_UPDATE"><position>4</position><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-11-23 15:51:34</sys_created_on><sys_domain>global</sys_domain><sys_id>d8595e8cdb4a6f4076d6b94ffe96199a</sys_id><sys_mod_count>0</sys_mod_count><sys_overrides/><sys_ui_form display_value="atf_input_variable" name="atf_input_variable" sys_domain="global" view="eff0c3980a0a3c19007418a5890fdda5">dd8920b6131d93802df7b9b76144b038</sys_ui_form><sys_ui_section display_value="">90595e8cdb4a6f4076d6b94ffe961998</sys_ui_section><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-11-23 15:51:34</sys_updated_on></sys_ui_form_section><sys_ui_form_section action="INSERT_OR_UPDATE"><position>5</position><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-11-23 15:51:34</sys_created_on><sys_domain>global</sys_domain><sys_id>d8595e8cdb4a6f4076d6b94ffe9619a6</sys_id><sys_mod_count>0</sys_mod_count><sys_overrides/><sys_ui_form display_value="atf_input_variable" name="atf_input_variable" sys_domain="global" view="eff0c3980a0a3c19007418a5890fdda5">dd8920b6131d93802df7b9b76144b038</sys_ui_form><sys_ui_section display_value="">10595e8cdb4a6f4076d6b94ffe9619a4</sys_ui_section><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-11-23 15:51:34</sys_updated_on></sys_ui_form_section><sys_ui_form action="INSERT_OR_UPDATE"><name>atf_input_variable</name><roles/><sys_class_name>sys_ui_form</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-11-23 15:51:34</sys_created_on><sys_customer_update>false</sys_customer_update><sys_domain>global</sys_domain><sys_id>dd8920b6131d93802df7b9b76144b038</sys_id><sys_mod_count>0</sys_mod_count><sys_name>atf_input_variable</sys_name><sys_overrides/><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ui_form_sections_dd8920b6131d93802df7b9b76144b038</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-11-23 15:51:34</sys_updated_on><sys_user/><view display_value="Advanced" name="advanced">eff0c3980a0a3c19007418a5890fdda5</view><view_name/></sys_ui_form></sys_ui_form_sections></record_update>]]></payload>
<payload_hash>-1208694745</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>ef90214cdbf77b80ee93b14ffe9619e9</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ee630000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table>atf_input_variable</table>
<target_name>Input Variables</target_name>
<type>Form Sections</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view>eff0c3980a0a3c19007418a5890fdda5</view>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_app_module_2c0de113dbb86380432cfc600f961941</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_app_module"><sys_app_module action="INSERT_OR_UPDATE"><active>true</active><application display_value="CICD Integration">91194b2bdbebd300dfa9b94ffe96194d</application><assessment/><content_page/><device_type/><filter/><hint/><homepage/><image/><link_type>DIRECT</link_type><map_page/><mobile_title>Properties</mobile_title><mobile_view_name>Mobile</mobile_view_name><name/><order/><override_menu_roles>false</override_menu_roles><populate_view/><query>system_properties_ui.do?sysparm_title=CICD%20Integration%20Properties&amp;sysparm_category=CICD Integration</query><report/><roles/><survey/><survey_overwrite>true</survey_overwrite><sys_class_name>sys_app_module</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-10-02 11:42:41</sys_created_on><sys_customer_update>false</sys_customer_update><sys_domain>global</sys_domain><sys_id>2c0de113dbb86380432cfc600f961941</sys_id><sys_mod_count>0</sys_mod_count><sys_name>Properties</sys_name><sys_overrides/><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_app_module_2c0de113dbb86380432cfc600f961941</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-10-02 11:42:41</sys_updated_on><timeline_page/><title>Properties</title><uncancelable>false</uncancelable><view_name/><window_name/></sys_app_module></record_update>]]></payload>
<payload_hash>-403242582</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>ef902d4cdbf77b80ee93b14ffe96194a</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ea1c0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>Properties</target_name>
<type>Module</type>
<update_domain>global</update_domain>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_map_790b6e31dbffdb0076d6b94ffe9619f1</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter_map"><sys_ws_query_parameter_map action="INSERT_OR_UPDATE"><sys_class_name>sys_ws_query_parameter_map</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-09 07:17:08</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>790b6e31dbffdb0076d6b94ffe9619f1</sys_id><sys_mod_count>0</sys_mod_count><sys_name>12c846a5db73db0076d6b94ffe961917</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_map_790b6e31dbffdb0076d6b94ffe9619f1</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-09 07:17:08</sys_updated_on><web_service_operation display_value="CI - Get All Test In Suites">7f82aa29dbb3db0076d6b94ffe9619af</web_service_operation><web_service_query_parameter display_value="sysparm_limit">12c846a5db73db0076d6b94ffe961917</web_service_query_parameter></sys_ws_query_parameter_map></record_update>]]></payload>
<payload_hash>1584319145</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>ef902d4cdbf77b80ee93b14ffe96194d</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ebcd0000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>12c846a5db73db0076d6b94ffe961917</target_name>
<type>Scripted REST Query Parameter Associatio</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_app_19190fabdbebd300dfa9b94ffe96193e</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_app"><sys_app action="INSERT_OR_UPDATE"><active>true</active><enforce_license>log</enforce_license><js_level>helsinki_es5</js_level><licensable>true</licensable><license_category/><license_model>none</license_model><logo/><menu display_value="CICD Integration">91194b2bdbebd300dfa9b94ffe96194d</menu><name>CICD Integration</name><private>false</private><restrict_table_access>false</restrict_table_access><runtime_access_tracking>permissive</runtime_access_tracking><scope>global</scope><scoped_administration>false</scoped_administration><short_description/><source>19190fabdbebd300dfa9b94ffe96193e</source><store_correlation_id/><store_url/><sys_class_name>sys_app</sys_class_name><sys_code/><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-02 09:42:02</sys_created_on><sys_id>19190fabdbebd300dfa9b94ffe96193e</sys_id><sys_mod_count>28</sys_mod_count><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2019-09-05 07:44:39</sys_updated_on><template/><trackable>true</trackable><user_role display_value="cicd_integration_user" name="cicd_integration_user">dd194b2bdbebd300dfa9b94ffe96194f</user_role><vendor/><vendor_prefix/><version>1.4.1</version></sys_app></record_update>]]></payload>
<payload_hash>1777840287</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>ef902d4cdbf77b80ee93b14ffe961950</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061e8b00000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CICD Integration</target_name>
<type>Custom Application</type>
<update_domain/>
<update_guid>cc90694ca4f77b80655b4c03f633ed77</update_guid>
<update_guid_history>cc90694ca4f77b80655b4c03f633ed77:1777840287,309b0496a2e33380bd6736cf9432371c:1448074526,bb764052a9e33380ad696fef8704a0af:1777840287,14cbdef5d02bb780e8a886e818324ab1:-1666640472,d72f2d29fe63778064f895a21c01967d:-208766682,1e5251ed3927ff401fa3c63490e9ac2b:-538532443,f10a3ce5d1e3ff404ec1624ba7db99bf:-868298204,fa7eb809bdeb3f40a59157315a9f5f52:-1198063965,0e8f60c1e6eb3f405f5070a2577a4b11:-1527829726,01aaac8171eb3f405551c2e1eafde272:-1857595487,da337378d0e73f404da83b1b63a6ab6a:2107606048,c36bafb052e73f4027d5c8b3b5416b72:1777840287,683c85e0382fff40d97bbc7caba0a276:1448074526,05bc457473cafb808a37250a0e5bc69f:1356029985,49bc457473cafb80df551629c76a489d:1026264224</update_guid_history>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_properties_category_8d1de113dbb86380432cfc600f9619f6</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties_category"><sys_properties_category action="INSERT_OR_UPDATE"><name>CICD Integration</name><sys_class_name>sys_properties_category</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-10-02 11:40:35</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>8d1de113dbb86380432cfc600f9619f6</sys_id><sys_mod_count>2</sys_mod_count><sys_name>CICD Integration</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_properties_category_8d1de113dbb86380432cfc600f9619f6</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-11-09 16:10:23</sys_updated_on><title/></sys_properties_category></record_update>]]></payload>
<payload_hash>55941862</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>ef902d4cdbf77b80ee93b14ffe961953</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ec550000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CICD Integration</target_name>
<type>System Property Category</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_query_parameter_map_5ad9ea31dbffdb0076d6b94ffe961979</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_query_parameter_map"><sys_ws_query_parameter_map action="INSERT_OR_UPDATE"><sys_class_name>sys_ws_query_parameter_map</sys_class_name><sys_created_by>b.moers</sys_created_by><sys_created_on>2018-08-09 07:12:05</sys_created_on><sys_customer_update>false</sys_customer_update><sys_id>5ad9ea31dbffdb0076d6b94ffe961979</sys_id><sys_mod_count>0</sys_mod_count><sys_name>8d736e29dbb3db0076d6b94ffe961989</sys_name><sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e">19190fabdbebd300dfa9b94ffe96193e</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</sys_scope><sys_update_name>sys_ws_query_parameter_map_5ad9ea31dbffdb0076d6b94ffe961979</sys_update_name><sys_updated_by>b.moers</sys_updated_by><sys_updated_on>2018-08-09 07:12:05</sys_updated_on><web_service_operation display_value="CI - Get UpdateSet Details">dfe5f9e1db33db0076d6b94ffe96198a</web_service_operation><web_service_query_parameter display_value="sysparm_display_value">8d736e29dbb3db0076d6b94ffe961989</web_service_query_parameter></sys_ws_query_parameter_map></record_update>]]></payload>
<payload_hash>-406265934</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>ef902d4cdbf77b80ee93b14ffe961957</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ead60000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>8d736e29dbb3db0076d6b94ffe961989</target_name>
<type>Scripted REST Query Parameter Associatio</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="CICD Integration">19190fabdbebd300dfa9b94ffe96193e</application>
<category>customer</category>
<comments/>
<name>sys_ws_operation_dfe5f9e1db33db0076d6b94ffe96198a</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ws_operation"&gt;&lt;sys_ws_operation action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;consumes&gt;application/json,application/xml,text/xml&lt;/consumes&gt;&lt;consumes_customized&gt;false&lt;/consumes_customized&gt;&lt;default_operation_uri&gt;/api/devops/cicd/updateset/{updateSetSysId}&lt;/default_operation_uri&gt;&lt;enforce_acl&gt;1a7833bddbb31f0076d6b94ffe961994&lt;/enforce_acl&gt;&lt;http_method&gt;GET&lt;/http_method&gt;&lt;name&gt;CI - Get UpdateSet Details&lt;/name&gt;&lt;operation_script&gt;&lt;![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    return new CiCdApi(request, response).getUpdateSetDetails(request.pathParams.updateSetSysId);

})(request, response);]]&gt;&lt;/operation_script&gt;&lt;operation_uri&gt;/api/devops/v1/cicd/updateset/{updateSetSysId}&lt;/operation_uri&gt;&lt;produces&gt;application/json,application/xml,text/xml&lt;/produces&gt;&lt;produces_customized&gt;false&lt;/produces_customized&gt;&lt;relative_path&gt;/updateset/{updateSetSysId}&lt;/relative_path&gt;&lt;request_example/&gt;&lt;requires_acl_authorization&gt;true&lt;/requires_acl_authorization&gt;&lt;requires_authentication&gt;true&lt;/requires_authentication&gt;&lt;requires_snc_internal_role&gt;true&lt;/requires_snc_internal_role&gt;&lt;short_description&gt;Get Details of an UpdateSet&lt;/short_description&gt;&lt;sys_class_name&gt;sys_ws_operation&lt;/sys_class_name&gt;&lt;sys_created_by&gt;b.moers&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-08-08 08:46:34&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;dfe5f9e1db33db0076d6b94ffe96198a&lt;/sys_id&gt;&lt;sys_mod_count&gt;4&lt;/sys_mod_count&gt;&lt;sys_name&gt;CI - Get UpdateSet Details&lt;/sys_name&gt;&lt;sys_package display_value="CICD Integration" source="19190fabdbebd300dfa9b94ffe96193e"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="CICD Integration"&gt;19190fabdbebd300dfa9b94ffe96193e&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ws_operation_dfe5f9e1db33db0076d6b94ffe96198a&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;b.moers&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-10-04 14:04:30&lt;/sys_updated_on&gt;&lt;web_service_definition display_value="CICD Integration"&gt;81eccb6fdbebd300dfa9b94ffe96190e&lt;/web_service_definition&gt;&lt;web_service_version display_value="v1"&gt;0a3dcb2fdbebd300dfa9b94ffe9619c7&lt;/web_service_version&gt;&lt;/sys_ws_operation&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1967761505</payload_hash>
<remote_update_set display_value="CICD Integration - 1.4.1">a790214cdbf77b80ee93b14ffe9619e4</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>b.moers</sys_created_by>
<sys_created_on>2019-09-05 07:44:53</sys_created_on>
<sys_id>ef902d4cdbf77b80ee93b14ffe96195a</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>16d0061ee870000001</sys_recorded_at>
<sys_updated_by>b.moers</sys_updated_by>
<sys_updated_on>2019-09-05 07:44:53</sys_updated_on>
<table/>
<target_name>CI - Get UpdateSet Details</target_name>
<type>Scripted REST Resource</type>
<update_domain/>
<update_guid/>
<update_guid_history/>
<update_set display_value=""/>
<view/>
</sys_update_xml>
</unload>
